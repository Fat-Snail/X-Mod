<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XCode</name>
    </assembly>
    <members>
        <member name="T:XCode.BindColumnAttribute">
            <summary>指定实体类属性所绑定数据字段信息。</summary>
        </member>
        <member name="P:XCode.BindColumnAttribute.Name">
            <summary>字段名</summary>
        </member>
        <member name="P:XCode.BindColumnAttribute.Description">
            <summary>描述</summary>
        </member>
        <member name="P:XCode.BindColumnAttribute.RawType">
            <summary>
            原始数据类型。
            当且仅当目标数据库同为该数据库类型时，采用实体属性信息上的RawType作为反向工程的目标字段类型，以期获得开发和生产的最佳兼容。
            </summary>
        </member>
        <member name="P:XCode.BindColumnAttribute.ItemType">
            <summary>元素类型</summary>
        </member>
        <member name="P:XCode.BindColumnAttribute.Precision">
            <summary>精度</summary>
        </member>
        <member name="P:XCode.BindColumnAttribute.Scale">
            <summary>位数</summary>
        </member>
        <member name="P:XCode.BindColumnAttribute.DefaultValue">
            <summary>默认值</summary>
        </member>
        <member name="P:XCode.BindColumnAttribute.Master">
            <summary>是否主字段。主字段作为业务主要字段，代表当前数据行意义</summary>
        </member>
        <member name="M:XCode.BindColumnAttribute.#ctor">
            <summary>构造函数</summary>
        </member>
        <member name="M:XCode.BindColumnAttribute.#ctor(System.String)">
            <summary>构造函数</summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:XCode.BindColumnAttribute.#ctor(System.String,System.String,System.String)">
            <summary>构造函数</summary>
            <param name="name">名称</param>
            <param name="description"></param>
            <param name="rawType"></param>
        </member>
        <member name="M:XCode.BindColumnAttribute.GetCustomAttribute(System.Reflection.MemberInfo)">
            <summary>检索应用于类型成员的自定义属性。</summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.BindIndexAttribute">
            <summary>用于指定数据类所绑定到的索引</summary>
        </member>
        <member name="P:XCode.BindIndexAttribute.Name">
            <summary>名称</summary>
        </member>
        <member name="P:XCode.BindIndexAttribute.Unique">
            <summary>是否唯一</summary>
        </member>
        <member name="P:XCode.BindIndexAttribute.Columns">
            <summary>数据列集合</summary>
        </member>
        <member name="M:XCode.BindIndexAttribute.#ctor(System.String,System.Boolean,System.String)">
            <summary>指定一个索引</summary>
            <param name="name">名称</param>
            <param name="unique"></param>
            <param name="columns"></param>
        </member>
        <member name="M:XCode.BindIndexAttribute.Fill(XCode.DataAccessLayer.IDataIndex)">
            <summary>填充索引</summary>
            <param name="index"></param>
        </member>
        <member name="T:XCode.BindTableAttribute">
            <summary>指定实体类所绑定的数据表信息。</summary>
        </member>
        <member name="P:XCode.BindTableAttribute.Name">
            <summary>
            表名。
            可以在配置文件中通过XCode.ConnMaps把实体映射到别的数据表上
            </summary>
        </member>
        <member name="P:XCode.BindTableAttribute.Description">
            <summary>描述</summary>
        </member>
        <member name="P:XCode.BindTableAttribute.ConnName">
            <summary>
            连接名。
            实体类的所有数据库操作，将发生在该连接名指定的数据库连接上。
            此外，可动态修改实体类在当前线程上的连接名（改Meta.ConnName）；
            也可以在配置文件中通过XCode.ConnMaps把连接名映射到别的连接上。
            </summary>
        </member>
        <member name="P:XCode.BindTableAttribute.DbType">
            <summary>
            数据库类型。
            仅用于记录实体类由何种类型数据库生成，当且仅当目标数据库同为该数据库类型时，采用实体属性信息上的RawType作为反向工程的目标字段类型，以期获得开发和生产的最佳兼容。
            </summary>
        </member>
        <member name="P:XCode.BindTableAttribute.IsView">
            <summary>是否视图</summary>
        </member>
        <member name="M:XCode.BindTableAttribute.#ctor(System.String)">
            <summary>构造函数</summary>
            <param name="name">表名</param>
        </member>
        <member name="M:XCode.BindTableAttribute.#ctor(System.String,System.String)">
            <summary>构造函数</summary>
            <param name="name">表名</param>
            <param name="description">描述</param>
        </member>
        <member name="M:XCode.BindTableAttribute.#ctor(System.String,System.String,System.String,XCode.DataAccessLayer.DatabaseType,System.Boolean)">
            <summary>构造函数</summary>
            <param name="name">表名</param>
            <param name="description">描述</param>
            <param name="connName"></param>
            <param name="dbType"></param>
            <param name="isView"></param>
        </member>
        <member name="T:XCode.MapAttribute">
            <summary>用于指定数据属性映射关系</summary>
        </member>
        <member name="P:XCode.MapAttribute.Name">
            <summary>数据列</summary>
        </member>
        <member name="P:XCode.MapAttribute.Provider">
            <summary>目标提供者</summary>
        </member>
        <member name="M:XCode.MapAttribute.#ctor(System.String)">
            <summary>指定一个表内关联关系</summary>
            <param name="column"></param>
        </member>
        <member name="M:XCode.MapAttribute.#ctor(System.String,System.Type,System.String)">
            <summary>指定一个关系</summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="key"></param>
        </member>
        <member name="T:XCode.MapProvider">
            <summary>映射提供者</summary>
        </member>
        <member name="P:XCode.MapProvider.EntityType">
            <summary>实体类型</summary>
        </member>
        <member name="P:XCode.MapProvider.Key">
            <summary>关联键</summary>
        </member>
        <member name="M:XCode.MapProvider.GetDataSource">
            <summary>获取数据源</summary>
            <returns></returns>
        </member>
        <member name="T:XCode.ModelCheckModes">
            <summary>模型检查模式</summary>
        </member>
        <member name="F:XCode.ModelCheckModes.CheckAllTablesWhenInit">
            <summary>初始化时检查所有表。默认值。具有最好性能。</summary>
        </member>
        <member name="F:XCode.ModelCheckModes.CheckTableWhenFirstUse">
            <summary>第一次使用时检查表。常用于通用实体类等存在大量实体类但不会同时使用所有实体类的场合，避免反向工程生成没有使用到的实体类的数据表。</summary>
        </member>
        <member name="T:XCode.ModelCheckModeAttribute">
            <summary>模型检查模式</summary>
        </member>
        <member name="P:XCode.ModelCheckModeAttribute.Mode">
            <summary>模式</summary>
        </member>
        <member name="M:XCode.ModelCheckModeAttribute.#ctor(XCode.ModelCheckModes)">
            <summary>指定实体类的模型检查模式</summary>
            <param name="mode"></param>
        </member>
        <member name="T:XCode.ModelSortModes">
            <summary>模型字段排序模式</summary>
        </member>
        <member name="F:XCode.ModelSortModes.BaseFirst">
            <summary>基类优先。默认值。一般用于扩展某个实体类增加若干数据字段。</summary>
        </member>
        <member name="F:XCode.ModelSortModes.DerivedFirst">
            <summary>派生类优先。一般用于具有某些公共数据字段的基类。</summary>
        </member>
        <member name="T:XCode.ModelSortModeAttribute">
            <summary>模型字段排序模式。其实不是很重要，仅仅影响数据字段在数据表中的先后顺序而已</summary>
        </member>
        <member name="P:XCode.ModelSortModeAttribute.Mode">
            <summary>模式</summary>
        </member>
        <member name="M:XCode.ModelSortModeAttribute.#ctor(XCode.ModelSortModes)">
            <summary>指定实体类的模型字段排序模式</summary>
            <param name="mode"></param>
        </member>
        <member name="T:XCode.Cache.CacheBase`1">
            <summary>缓存基类</summary>
        </member>
        <member name="P:XCode.Cache.CacheBase`1.ConnName">
            <summary>连接名</summary>
        </member>
        <member name="P:XCode.Cache.CacheBase`1.TableName">
            <summary>表名</summary>
        </member>
        <member name="M:XCode.Cache.CacheBase`1.Invoke``2(System.Func{``0,``1},``0)">
            <summary>调用委托方法前设置连接名和表名，调用后还原</summary>
        </member>
        <member name="T:XCode.Cache.CacheBase">
            <summary>缓存基类</summary>
        </member>
        <member name="P:XCode.Cache.CacheBase.Debug">
            <summary>是否调试缓存模块</summary>
        </member>
        <member name="P:XCode.Cache.CacheBase.Period">
            <summary>显示统计信息的周期。默认60*60s，DAL.Debug=true时10*60s，Debug=true时60s</summary>
        </member>
        <member name="P:XCode.Cache.CacheBase.LogPrefix">
            <summary>日志前缀</summary>
        </member>
        <member name="M:XCode.Cache.CacheBase.CheckShowStatics(System.Int32@,System.Action)">
            <summary>检查并显示统计信息</summary>
            <param name="total"></param>
            <param name="show"></param>
        </member>
        <member name="T:XCode.Cache.DataCache">
            <summary>运行数据缓存</summary>
        </member>
        <member name="P:XCode.Cache.DataCache.Current">
            <summary>当前实例</summary>
        </member>
        <member name="P:XCode.Cache.DataCache.Name">
            <summary>名称</summary>
        </member>
        <member name="M:XCode.Cache.DataCache.Load(System.String,System.Boolean)">
            <summary>加载</summary>
            <param name="file"></param>
            <param name="create"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Cache.DataCache.Save(System.String,XCode.Cache.DataCache)">
            <summary>保存</summary>
            <param name="file"></param>
            <param name="data"></param>
        </member>
        <member name="M:XCode.Cache.DataCache.SaveAsync">
            <summary>异步保存</summary>
        </member>
        <member name="P:XCode.Cache.DataCache.Counts">
            <summary>每个表总记录数</summary>
        </member>
        <member name="P:XCode.Cache.DataCache.FieldCache">
            <summary>字段缓存，每个缓存项的值</summary>
        </member>
        <member name="T:XCode.Cache.EntityCache`1">
            <summary>实体缓存</summary>
            <remarks>
            缓存更新逻辑：
            1，初始化。首次访问阻塞等待，确保得到有效数据。
            2，定时过期。过期后异步更新缓存返回旧数据，保障性能。但若过期两倍时间，则同步更新缓存阻塞等待返回新数据。
            3，主动清除。外部主动清除缓存，强制清除后下次访问时同步更新缓存，非强制清除后下次访问时异步更新缓存。
            4，添删改过期。添删改期间，仅修改缓存，不改变过期更新，避免事务中频繁更新缓存，提交回滚事务后强制清除缓存。
            </remarks>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="P:XCode.Cache.EntityCache`1.ExpiredTime">
            <summary>缓存过期时间</summary>
        </member>
        <member name="P:XCode.Cache.EntityCache`1.Times">
            <summary>缓存更新次数</summary>
        </member>
        <member name="P:XCode.Cache.EntityCache`1.Expire">
            <summary>过期时间。单位是秒，默认10秒</summary>
        </member>
        <member name="P:XCode.Cache.EntityCache`1.FillListMethod">
            <summary>填充数据的方法</summary>
        </member>
        <member name="P:XCode.Cache.EntityCache`1.WaitFirst">
            <summary>是否等待第一次查询。如果不等待，第一次返回空集合。默认true</summary>
        </member>
        <member name="P:XCode.Cache.EntityCache`1.Using">
            <summary>是否在使用缓存，在不触发缓存动作的情况下检查是否有使用缓存</summary>
        </member>
        <member name="M:XCode.Cache.EntityCache`1.#ctor">
            <summary>实例化实体缓存</summary>
        </member>
        <member name="P:XCode.Cache.EntityCache`1.Entities">
            <summary>实体集合。无数据返回空集合而不是null</summary>
        </member>
        <member name="M:XCode.Cache.EntityCache`1.Find(System.Predicate{`0})">
            <summary>检索与指定谓词定义的条件匹配的所有元素。</summary>
            <param name="match">条件</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Cache.EntityCache`1.FindAll(System.Predicate{`0})">
            <summary>检索与指定谓词定义的条件匹配的所有元素。</summary>
            <param name="match">条件</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Cache.EntityCache`1.Clear(System.String,System.Boolean)">
            <summary>清除缓存</summary>
            <param name="reason">清除原因</param>
            <param name="force">强制清除，下次访问阻塞等待。默认false仅置为过期，下次访问异步更新</param>
        </member>
        <member name="M:XCode.Cache.EntityCache`1.Add(`0)">
            <summary>添加对象到缓存</summary>
            <param name="entity"></param>
        </member>
        <member name="M:XCode.Cache.EntityCache`1.Remove(`0)">
            <summary>从缓存中删除对象</summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="F:XCode.Cache.EntityCache`1.Total">
            <summary>总次数</summary>
        </member>
        <member name="F:XCode.Cache.EntityCache`1.Success">
            <summary>命中</summary>
        </member>
        <member name="M:XCode.Cache.EntityCache`1.ShowStatics">
            <summary>显示统计信息</summary>
        </member>
        <member name="M:XCode.Cache.EntityCache`1.ToString">
            <summary>输出名称</summary>
            <returns></returns>
        </member>
        <member name="T:XCode.Cache.FieldCache`1">
            <summary>统计字段缓存</summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:XCode.Cache.FieldCache`1.MaxRows">
            <summary>最大行数。默认50</summary>
        </member>
        <member name="P:XCode.Cache.FieldCache`1.Where">
            <summary>数据源条件</summary>
        </member>
        <member name="P:XCode.Cache.FieldCache`1.OrderBy">
            <summary>排序子句。默认按照分组计数降序</summary>
        </member>
        <member name="P:XCode.Cache.FieldCache`1.GetDisplay">
            <summary>获取显示名的委托</summary>
        </member>
        <member name="P:XCode.Cache.FieldCache`1.DisplayFormat">
            <summary>显示名格式化字符串，两个参数是名称和个数</summary>
        </member>
        <member name="M:XCode.Cache.FieldCache`1.#ctor(System.String)">
            <summary>对指定字段使用实体缓存</summary>
            <param name="fieldName"></param>
        </member>
        <member name="M:XCode.Cache.FieldCache`1.FindAllName">
            <summary>获取所有类别名称</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Cache.FieldCache`1.ToString">
            <summary>输出名称</summary>
            <returns></returns>
        </member>
        <member name="T:XCode.Cache.IEntityCacheBase">
            <summary>缓存基接口</summary>
        </member>
        <member name="P:XCode.Cache.IEntityCacheBase.ConnName">
            <summary>连接名</summary>
        </member>
        <member name="P:XCode.Cache.IEntityCacheBase.TableName">
            <summary>表名</summary>
        </member>
        <member name="T:XCode.Cache.IEntityCache">
            <summary>实体缓存接口</summary>
        </member>
        <member name="P:XCode.Cache.IEntityCache.Entities">
            <summary>实体集合。因为涉及一个转换，数据量大时很耗性能，建议不要使用。</summary>
        </member>
        <member name="M:XCode.Cache.IEntityCache.Clear(System.String,System.Boolean)">
            <summary>清除缓存</summary>
            <param name="reason">清除原因</param>
            <param name="force">强制清除，下次访问阻塞等待。默认false仅置为过期，下次访问异步更新</param>
        </member>
        <member name="T:XCode.Cache.ISingleEntityCache">
            <summary>单对象缓存接口</summary>
        </member>
        <member name="P:XCode.Cache.ISingleEntityCache.Expire">
            <summary>过期时间。单位是秒，默认60秒</summary>
        </member>
        <member name="P:XCode.Cache.ISingleEntityCache.MaxEntity">
            <summary>最大实体数。默认10000</summary>
        </member>
        <member name="P:XCode.Cache.ISingleEntityCache.Using">
            <summary>是否在使用缓存</summary>
        </member>
        <member name="P:XCode.Cache.ISingleEntityCache.Item(System.Object)">
            <summary>获取数据</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Cache.ISingleEntityCache.GetItemWithSlaveKey(System.String)">
            <summary>根据从键获取实体数据</summary>
            <param name="slaveKey"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Cache.ISingleEntityCache.ContainsKey(System.Object)">
            <summary>是否包含指定主键</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Cache.ISingleEntityCache.ContainsSlaveKey(System.String)">
            <summary>是否包含指定从键</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Cache.ISingleEntityCache.Add(XCode.IEntity)">
            <summary>向单对象缓存添加项</summary>
            <param name="value">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Cache.ISingleEntityCache.Remove(XCode.IEntity)">
            <summary>移除指定项</summary>
            <param name="entity"></param>
        </member>
        <member name="M:XCode.Cache.ISingleEntityCache.Clear(System.String)">
            <summary>清除所有数据</summary>
            <param name="reason">清除缓存原因</param>
        </member>
        <member name="T:XCode.Cache.ISingleEntityCache`2">
            <summary></summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:XCode.Cache.ISingleEntityCache`2.Item(`0)">
            <summary>获取数据</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.Cache.ISingleEntityCache`2.GetKeyMethod">
            <summary>获取缓存主键的方法，默认方法为获取实体主键值</summary>
        </member>
        <member name="P:XCode.Cache.ISingleEntityCache`2.FindKeyMethod">
            <summary>查找数据的方法</summary>
        </member>
        <member name="P:XCode.Cache.ISingleEntityCache`2.SlaveKeyIgnoreCase">
            <summary>从键是否区分大小写</summary>
        </member>
        <member name="P:XCode.Cache.ISingleEntityCache`2.FindSlaveKeyMethod">
            <summary>根据从键查找数据的方法</summary>
        </member>
        <member name="P:XCode.Cache.ISingleEntityCache`2.GetSlaveKeyMethod">
            <summary>获取缓存从键的方法，默认为空</summary>
        </member>
        <member name="T:XCode.Cache.SingleEntityCache`2">
            <summary>单对象缓存</summary>
            <remarks>
            用一个值为实体的字典作为缓存（键一般就是主键），适用于单表大量互相没有关系的数据。
            </remarks>
            <typeparam name="TKey">键值类型</typeparam>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="P:XCode.Cache.SingleEntityCache`2.Expire">
            <summary>过期时间。单位是秒，默认10秒</summary>
        </member>
        <member name="P:XCode.Cache.SingleEntityCache`2.ClearPeriod">
            <summary>清理周期。默认60秒检查一次，清理10倍（600秒）未访问的缓存项</summary>
        </member>
        <member name="P:XCode.Cache.SingleEntityCache`2.MaxEntity">
            <summary>最大实体数。默认10000</summary>
        </member>
        <member name="P:XCode.Cache.SingleEntityCache`2.Using">
            <summary>是否在使用缓存</summary>
        </member>
        <member name="P:XCode.Cache.SingleEntityCache`2.GetKeyMethod">
            <summary>获取缓存主键的方法，默认方法为获取实体主键值</summary>
        </member>
        <member name="P:XCode.Cache.SingleEntityCache`2.FindKeyMethod">
            <summary>查找数据的方法</summary>
        </member>
        <member name="P:XCode.Cache.SingleEntityCache`2.SlaveKeyIgnoreCase">
            <summary>从键是否区分大小写</summary>
        </member>
        <member name="P:XCode.Cache.SingleEntityCache`2.FindSlaveKeyMethod">
            <summary>根据从键查找数据的方法</summary>
        </member>
        <member name="P:XCode.Cache.SingleEntityCache`2.GetSlaveKeyMethod">
            <summary>获取缓存从键的方法，默认为空</summary>
        </member>
        <member name="M:XCode.Cache.SingleEntityCache`2.#ctor">
            <summary>实例化一个实体缓存</summary>
        </member>
        <member name="M:XCode.Cache.SingleEntityCache`2.Dispose(System.Boolean)">
            <summary>子类重载实现资源释放逻辑时必须首先调用基类方法</summary>
            <param name="disposing">从Dispose调用（释放所有资源）还是析构函数调用（释放非托管资源）。
            因为该方法只会被调用一次，所以该参数的意义不太大。</param>
        </member>
        <member name="T:XCode.Cache.SingleEntityCache`2.CacheItem">
            <summary>缓存对象</summary>
        </member>
        <member name="P:XCode.Cache.SingleEntityCache`2.CacheItem.Key">
            <summary>键</summary>
        </member>
        <member name="P:XCode.Cache.SingleEntityCache`2.CacheItem.SlaveKey">
            <summary>从键</summary>
        </member>
        <member name="P:XCode.Cache.SingleEntityCache`2.CacheItem.Entity">
            <summary>实体</summary>
        </member>
        <member name="P:XCode.Cache.SingleEntityCache`2.CacheItem.VisitTime">
            <summary>访问时间</summary>
        </member>
        <member name="P:XCode.Cache.SingleEntityCache`2.CacheItem.ExpireTime">
            <summary>缓存过期时间</summary>
        </member>
        <member name="M:XCode.Cache.SingleEntityCache`2.CacheItem.GetExpired">
            <summary>获取已过期时间</summary>
            <returns></returns>
        </member>
        <member name="F:XCode.Cache.SingleEntityCache`2._Count">
            <summary>缓存个数</summary>
        </member>
        <member name="F:XCode.Cache.SingleEntityCache`2.Entities">
            <summary>单对象缓存</summary>
        </member>
        <member name="P:XCode.Cache.SingleEntityCache`2.SlaveEntities">
            <summary>单对象缓存，从键查询使用</summary>
        </member>
        <member name="F:XCode.Cache.SingleEntityCache`2.Total">
            <summary>总次数</summary>
        </member>
        <member name="F:XCode.Cache.SingleEntityCache`2.Success">
            <summary>命中</summary>
        </member>
        <member name="M:XCode.Cache.SingleEntityCache`2.ShowStatics">
            <summary>显示统计信息</summary>
        </member>
        <member name="P:XCode.Cache.SingleEntityCache`2.Item(`0)">
            <summary>根据主键获取实体数据</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Cache.SingleEntityCache`2.AddItem(`0,`1)">
            <summary>向两个字典加入数据</summary>
            <param name="key"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Cache.SingleEntityCache`2.GetItemWithSlaveKey(System.String)">
            <summary>根据从键获取实体数据</summary>
            <param name="slaveKey"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Cache.SingleEntityCache`2.ContainsKey(`0)">
            <summary>是否包含指定键</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Cache.SingleEntityCache`2.ContainsSlaveKey(System.String)">
            <summary>是否包含指定从键</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Cache.SingleEntityCache`2.Add(`0,`1)">
            <summary>向单对象缓存添加项</summary>
            <param name="key"></param>
            <param name="entity">数值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Cache.SingleEntityCache`2.RemoveKey(`0)">
            <summary>移除指定项</summary>
            <param name="key">键值</param>
        </member>
        <member name="M:XCode.Cache.SingleEntityCache`2.Remove(`1)">
            <summary>根据主键移除指定项</summary>
            <param name="entity"></param>
        </member>
        <member name="M:XCode.Cache.SingleEntityCache`2.Clear(System.String)">
            <summary>清除所有数据</summary>
            <param name="reason">清除缓存原因</param>
        </member>
        <member name="P:XCode.Cache.SingleEntityCache`2.XCode#Cache#ISingleEntityCache#Item(System.Object)">
            <summary>获取数据</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Cache.SingleEntityCache`2.XCode#Cache#ISingleEntityCache#GetItemWithSlaveKey(System.String)">
            <summary>根据从键获取实体数据</summary>
            <param name="slaveKey"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Cache.SingleEntityCache`2.XCode#Cache#ISingleEntityCache#ContainsKey(System.Object)">
            <summary>是否包含指定主键</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Cache.SingleEntityCache`2.XCode#Cache#ISingleEntityCache#Remove(XCode.IEntity)">
            <summary>移除指定项</summary>
            <param name="entity"></param>
        </member>
        <member name="M:XCode.Cache.SingleEntityCache`2.XCode#Cache#ISingleEntityCache#Add(XCode.IEntity)">
            <summary>向单对象缓存添加项</summary>
            <param name="value">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Cache.SingleEntityCache`2.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="T:XCode.Code.BuilderOption">
            <summary>生成器选项</summary>
        </member>
        <member name="P:XCode.Code.BuilderOption.ClassNameTemplate">
            <summary>类名模板。其中{name}替换为Table.Name，如{name}Model/I{name}Dto等</summary>
        </member>
        <member name="P:XCode.Code.BuilderOption.DisplayNameTemplate">
            <summary>显示名模板。其中{displayName}替换为Table.DisplayName</summary>
        </member>
        <member name="P:XCode.Code.BuilderOption.BaseClass">
            <summary>基类。可能包含基类和接口，其中{name}替换为Table.Name</summary>
        </member>
        <member name="P:XCode.Code.BuilderOption.Namespace">
            <summary>命名空间</summary>
        </member>
        <member name="P:XCode.Code.BuilderOption.Output">
            <summary>输出目录</summary>
        </member>
        <member name="P:XCode.Code.BuilderOption.ChineseFileName">
            <summary>是否使用中文文件名。默认false</summary>
        </member>
        <member name="P:XCode.Code.BuilderOption.ModelNameForCopy">
            <summary>用于生成Copy函数的参数类型。例如{name}或I{name}</summary>
        </member>
        <member name="P:XCode.Code.BuilderOption.HasIModel">
            <summary>带有索引器。实现IModel接口</summary>
        </member>
        <member name="P:XCode.Code.BuilderOption.Nullable">
            <summary>可为null上下文。生成String?等</summary>
        </member>
        <member name="P:XCode.Code.BuilderOption.Usings">
            <summary>引用命名空间。区分大小写</summary>
        </member>
        <member name="P:XCode.Code.BuilderOption.Excludes">
            <summary>排除项。要排除的表或者字段，不区分大小写</summary>
        </member>
        <member name="P:XCode.Code.BuilderOption.Items">
            <summary>扩展数据</summary>
        </member>
        <member name="M:XCode.Code.BuilderOption.#ctor">
            <summary>实例化</summary>
        </member>
        <member name="M:XCode.Code.BuilderOption.Clone">
            <summary>克隆</summary>
            <returns></returns>
        </member>
        <member name="T:XCode.Code.ClassBuilder">
            <summary>类代码生成器</summary>
        </member>
        <member name="P:XCode.Code.ClassBuilder.Writer">
            <summary>写入器</summary>
        </member>
        <member name="P:XCode.Code.ClassBuilder.Table">
            <summary>数据表</summary>
        </member>
        <member name="P:XCode.Code.ClassBuilder.ClassName">
            <summary>类名。默认Table.Name</summary>
        </member>
        <member name="P:XCode.Code.ClassBuilder.Option">
            <summary>生成器选项</summary>
        </member>
        <member name="M:XCode.Code.ClassBuilder.LoadModels(System.String,XCode.Code.BuilderOption,System.Collections.Generic.IDictionary{System.String,System.String}@,NewLife.Log.ILog)">
            <summary>加载模型文件</summary>
            <param name="xmlFile">Xml模型文件</param>
            <param name="option">生成可选项</param>
            <param name="atts">扩展属性字典</param>
            <param name="log"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Code.ClassBuilder.Load(XCode.DataAccessLayer.IDataTable)">
            <summary>加载数据表</summary>
            <param name="table"></param>
        </member>
        <member name="M:XCode.Code.ClassBuilder.Execute">
            <summary>执行生成</summary>
        </member>
        <member name="M:XCode.Code.ClassBuilder.Prepare">
            <summary>生成前的准备工作。计算类型以及命名空间等</summary>
        </member>
        <member name="M:XCode.Code.ClassBuilder.OnExecuting">
            <summary>生成头部</summary>
        </member>
        <member name="M:XCode.Code.ClassBuilder.BuildClassHeader">
            <summary>实体类头部</summary>
        </member>
        <member name="M:XCode.Code.ClassBuilder.GetBaseClass">
            <summary>获取基类</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Code.ClassBuilder.BuildAttribute">
            <summary>实体类头部</summary>
        </member>
        <member name="M:XCode.Code.ClassBuilder.OnExecuted">
            <summary>生成尾部</summary>
        </member>
        <member name="M:XCode.Code.ClassBuilder.BuildItems">
            <summary>生成主体</summary>
        </member>
        <member name="M:XCode.Code.ClassBuilder.BuildItem(XCode.DataAccessLayer.IDataColumn)">
            <summary>生成每一项</summary>
        </member>
        <member name="M:XCode.Code.ClassBuilder.BuildIndexItems">
            <summary>生成索引访问器</summary>
        </member>
        <member name="M:XCode.Code.ClassBuilder.BuildCopy(System.String)">
            <summary>生成拷贝函数</summary>
            <param name="model">模型类</param>
        </member>
        <member name="M:XCode.Code.ClassBuilder.BuildToModel(System.String,System.String)">
            <summary>生成实体转模型函数</summary>
            <param name="modelClass"></param>
            <param name="modelInterface"></param>
        </member>
        <member name="M:XCode.Code.ClassBuilder.SetIndent(System.Boolean)">
            <summary>设置缩进</summary>
            <param name="add"></param>
        </member>
        <member name="M:XCode.Code.ClassBuilder.WriteLine(System.String)">
            <summary>写入</summary>
            <param name="value"></param>
        </member>
        <member name="M:XCode.Code.ClassBuilder.WriteLine(System.String,System.Object[])">
            <summary>写入</summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:XCode.Code.ClassBuilder.Clear">
            <summary>清空，重新生成</summary>
        </member>
        <member name="M:XCode.Code.ClassBuilder.ToString">
            <summary>输出结果</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Code.ClassBuilder.GetFileName(System.String,System.Boolean)">
            <summary>获取文件名</summary>
            <param name="ext"></param>
            <param name="chineseFileName"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Code.ClassBuilder.Save(System.String,System.Boolean,System.Boolean)">
            <summary>保存文件，返回文件路径</summary>
            <param name="ext">扩展名，默认.cs</param>
            <param name="overwrite">是否覆盖目标文件</param>
            <param name="chineseFileName">是否使用中文名</param>
        </member>
        <member name="M:XCode.Code.ClassBuilder.ValidColumn(XCode.DataAccessLayer.IDataColumn,System.Boolean)">
            <summary>验证字段是否可用于生成</summary>
            <param name="column"></param>
            <param name="validModel"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.Code.ClassBuilder.CSharp">
            <summary>C#版本</summary>
        </member>
        <member name="M:XCode.Code.ClassBuilder.NameOf(System.String)">
            <summary>nameof</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Code.ClassBuilder.GetCamelCase(System.String)">
            <summary>驼峰命名，首字母小写</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.Code.ClassBuilder.Log">
            <summary>日志</summary>
        </member>
        <member name="M:XCode.Code.ClassBuilder.WriteLog(System.String,System.Object[])">
            <summary>写日志</summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="T:XCode.Code.EntityBuilder">
            <summary>实体类生成器</summary>
        </member>
        <member name="P:XCode.Code.EntityBuilder.Business">
            <summary>业务类</summary>
        </member>
        <member name="P:XCode.Code.EntityBuilder.MergeBusiness">
            <summary>合并业务类，当业务类已存在时。默认true</summary>
        </member>
        <member name="P:XCode.Code.EntityBuilder.AllTables">
            <summary>所有表类型名。用于扩展属性</summary>
        </member>
        <member name="P:XCode.Code.EntityBuilder.EntityOption">
            <summary>实体类生成选型</summary>
        </member>
        <member name="M:XCode.Code.EntityBuilder.FixModelFile(System.String,XCode.Code.BuilderOption,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IList{XCode.DataAccessLayer.IDataTable},NewLife.Log.ILog)">
            <summary>修正模型文件</summary>
            <param name="xmlFile"></param>
            <param name="option"></param>
            <param name="atts"></param>
            <param name="tables"></param>
            <param name="log"></param>
        </member>
        <member name="M:XCode.Code.EntityBuilder.BuildTables(System.Collections.Generic.IList{XCode.DataAccessLayer.IDataTable},XCode.Code.EntityBuilderOption,NewLife.Log.ILog)">
            <summary>为Xml模型文件生成实体类</summary>
            <param name="tables">模型文件</param>
            <param name="option">生成可选项</param>
            <param name="log"></param>
        </member>
        <member name="M:XCode.Code.EntityBuilder.Load(XCode.DataAccessLayer.IDataTable)">
            <summary>加载数据表</summary>
            <param name="table"></param>
        </member>
        <member name="M:XCode.Code.EntityBuilder.Prepare">
            <summary>生成前的准备工作。计算类型以及命名空间等</summary>
        </member>
        <member name="M:XCode.Code.EntityBuilder.AddNameSpace">
            <summary>增加常用命名空间</summary>
        </member>
        <member name="M:XCode.Code.EntityBuilder.GetBaseClass">
            <summary>获取基类</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Code.EntityBuilder.Save(System.String,System.Boolean,System.Boolean)">
            <summary>保存</summary>
            <param name="ext"></param>
            <param name="overwrite"></param>
            <param name="chineseFileName"></param>
        </member>
        <member name="M:XCode.Code.EntityBuilder.Merge(System.String)">
            <summary>合并当前生成内容到旧文件中</summary>
            <param name="fileName"></param>
        </member>
        <member name="M:XCode.Code.EntityBuilder.OnExecuted">
            <summary>生成尾部</summary>
        </member>
        <member name="M:XCode.Code.EntityBuilder.BuildItems">
            <summary>生成主体</summary>
        </member>
        <member name="M:XCode.Code.EntityBuilder.BuildAttribute">
            <summary>实体类头部</summary>
        </member>
        <member name="M:XCode.Code.EntityBuilder.BuildItem(XCode.DataAccessLayer.IDataColumn)">
            <summary>生成每一项</summary>
        </member>
        <member name="M:XCode.Code.EntityBuilder.BuildIndexItems">
            <summary>生成索引访问器</summary>
        </member>
        <member name="M:XCode.Code.EntityBuilder.BuildMap">
            <summary>扩展属性</summary>
        </member>
        <member name="M:XCode.Code.EntityBuilder.BuildAction">
            <summary>对象操作</summary>
        </member>
        <member name="M:XCode.Code.EntityBuilder.BuildCctor">
            <summary>生成静态构造函数</summary>
        </member>
        <member name="M:XCode.Code.EntityBuilder.BuildValid">
            <summary>数据验证</summary>
        </member>
        <member name="M:XCode.Code.EntityBuilder.BuildInitData">
            <summary>初始化数据</summary>
        </member>
        <member name="M:XCode.Code.EntityBuilder.BuildOverride">
            <summary>重写添删改</summary>
        </member>
        <member name="M:XCode.Code.EntityBuilder.BuildHistory">
            <summary>添删改添加历史记录</summary>
        </member>
        <member name="M:XCode.Code.EntityBuilder.BuildExtendProperty">
            <summary>扩展属性</summary>
        </member>
        <member name="M:XCode.Code.EntityBuilder.BuildExtendSearch">
            <summary>扩展查询</summary>
        </member>
        <member name="M:XCode.Code.EntityBuilder.BuildSearch">
            <summary>高级查询</summary>
        </member>
        <member name="M:XCode.Code.EntityBuilder.BuildBusiness">
            <summary>业务操作</summary>
        </member>
        <member name="T:XCode.Code.EntityBuilderOption">
            <summary>实体类代码生成选项</summary>
        </member>
        <member name="P:XCode.Code.EntityBuilderOption.ConnName">
            <summary>数据库连接名</summary>
        </member>
        <member name="P:XCode.Code.EntityBuilderOption.ModelClass">
            <summary>模型类模版。设置后生成模型类，用于接口数据传输，例如{name}Model</summary>
        </member>
        <member name="P:XCode.Code.EntityBuilderOption.ModelsOutput">
            <summary>模型类输出目录。默认当前目录的Models子目录</summary>
        </member>
        <member name="P:XCode.Code.EntityBuilderOption.ModelInterface">
            <summary>模型接口模版。设置后生成模型接口，用于约束模型类和实体类，例如I{name}</summary>
        </member>
        <member name="P:XCode.Code.EntityBuilderOption.InterfacesOutput">
            <summary>模型接口输出目录。默认当前目录的Interfaces子目录</summary>
        </member>
        <member name="P:XCode.Code.EntityBuilderOption.ModelNameForToModel">
            <summary>用户实体转为模型类的模型类。例如{name}或{name}DTO</summary>
        </member>
        <member name="P:XCode.Code.EntityBuilderOption.NameFormat">
            <summary>命名格式。Default/Upper/Lower/Underline</summary>
        </member>
        <member name="M:XCode.Code.EntityBuilderOption.Clone">
            <summary>克隆</summary>
            <returns></returns>
        </member>
        <member name="T:XCode.Code.HtmlBuilder">
            <summary>Html数据字典生成器</summary>
        </member>
        <member name="P:XCode.Code.HtmlBuilder.Style">
            <summary>样式</summary>
        </member>
        <member name="M:XCode.Code.HtmlBuilder.BuildDataDictionary(System.Collections.Generic.IList{XCode.DataAccessLayer.IDataTable},XCode.Code.BuilderOption,NewLife.Log.ILog)">
            <summary>生成数据字典</summary>
            <param name="tables">表集合</param>
            <param name="option">可选项</param>
            <param name="log"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Code.HtmlBuilder.OnExecuting">
            <summary>生成前</summary>
        </member>
        <member name="M:XCode.Code.HtmlBuilder.OnExecuted">
            <summary>生成后</summary>
        </member>
        <member name="M:XCode.Code.HtmlBuilder.BuildItems">
            <summary>生成主体</summary>
        </member>
        <member name="M:XCode.Code.HtmlBuilder.BuildItem(XCode.DataAccessLayer.IDataColumn)">
            <summary>生成项</summary>
            <param name="column"></param>
        </member>
        <member name="M:XCode.Code.HtmlBuilder.WriteLine(System.String)">
            <summary>写入</summary>
            <param name="value"></param>
        </member>
        <member name="T:XCode.Code.InterfaceBuilder">
            <summary>接口生成器</summary>
        </member>
        <member name="M:XCode.Code.InterfaceBuilder.BuildInterfaces(System.Collections.Generic.IList{XCode.DataAccessLayer.IDataTable},XCode.Code.BuilderOption,NewLife.Log.ILog)">
            <summary>生成简易版实体接口</summary>
            <param name="tables">表集合</param>
            <param name="option">可选项</param>
            <param name="log"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Code.InterfaceBuilder.Prepare">
            <summary>生成前的准备工作。计算类型以及命名空间等</summary>
        </member>
        <member name="M:XCode.Code.InterfaceBuilder.BuildClassHeader">
            <summary>实体类头部</summary>
        </member>
        <member name="M:XCode.Code.InterfaceBuilder.BuildItem(XCode.DataAccessLayer.IDataColumn)">
            <summary>生成每一项</summary>
        </member>
        <member name="M:XCode.Code.InterfaceBuilder.ValidColumn(XCode.DataAccessLayer.IDataColumn,System.Boolean)">
            <summary>验证字段是否可用于生成</summary>
            <param name="column"></param>
            <param name="validModel"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Code.InterfaceBuilder.GetFileName(System.String,System.Boolean)">
            <summary>获取文件名</summary>
            <param name="ext"></param>
            <param name="chineseFileName"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.Code.MemberSection">
            <summary>成员段。一个属性或方法的代码段</summary>
        </member>
        <member name="P:XCode.Code.MemberSection.Name">
            <summary>名称。成员名或方法签名</summary>
        </member>
        <member name="P:XCode.Code.MemberSection.FullName">
            <summary>全名</summary>
        </member>
        <member name="P:XCode.Code.MemberSection.StartLine">
            <summary>开始行行号</summary>
        </member>
        <member name="P:XCode.Code.MemberSection.Lines">
            <summary>代码行</summary>
        </member>
        <member name="M:XCode.Code.MemberSection.Parse(System.Collections.Generic.IList{System.String})">
            <summary>从来源分解出多个成员段</summary>
            <param name="lines"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Code.MemberSection.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="T:XCode.Code.ModelBuilder">
            <summary>模型类生成器</summary>
        </member>
        <member name="P:XCode.Code.ModelBuilder.Pure">
            <summary>纯净类。去除属性上的Description等特性</summary>
        </member>
        <member name="M:XCode.Code.ModelBuilder.BuildModels(System.Collections.Generic.IList{XCode.DataAccessLayer.IDataTable},XCode.Code.BuilderOption,NewLife.Log.ILog)">
            <summary>生成简易版模型</summary>
            <param name="tables">表集合</param>
            <param name="option">可选项</param>
            <param name="log"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Code.ModelBuilder.Prepare">
            <summary>生成前的准备工作。计算类型以及命名空间等</summary>
        </member>
        <member name="M:XCode.Code.ModelBuilder.GetBaseClass">
            <summary>获取基类</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Code.ModelBuilder.BuildAttribute">
            <summary>实体类头部</summary>
        </member>
        <member name="M:XCode.Code.ModelBuilder.BuildItems">
            <summary>生成主体</summary>
        </member>
        <member name="M:XCode.Code.ModelBuilder.BuildItem(XCode.DataAccessLayer.IDataColumn)">
            <summary>生成每一项</summary>
        </member>
        <member name="M:XCode.Code.ModelBuilder.ValidColumn(XCode.DataAccessLayer.IDataColumn,System.Boolean)">
            <summary>验证字段是否可用于生成</summary>
            <param name="column"></param>
            <param name="validModel"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.Common.DataConversion">
            <summary>数据转换</summary>
        </member>
        <member name="M:XCode.Common.DataConversion.CopyProperty(System.Object,System.Object,System.Collections.Generic.List{System.String})">
            <summary>拷贝</summary>
            <param name="objSource"></param>
            <param name="objTarjet"></param>
            <param name="ignoreTarjetProperties"></param>
        </member>
        <member name="M:XCode.Common.DataConversion.GetProperties(System.Object,System.Boolean)">
            <summary>获取属性</summary>
            <param name="obj"></param>
            <param name="withBindingFlags"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.Common.DataSimulation`1">
            <summary>数据模拟</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XCode.Common.DataSimulation`1.#ctor">
            <summary>实例化</summary>
        </member>
        <member name="T:XCode.Common.DataSimulation">
            <summary>数据模拟</summary>
        </member>
        <member name="P:XCode.Common.DataSimulation.Factory">
            <summary>实体工厂</summary>
        </member>
        <member name="P:XCode.Common.DataSimulation.BatchSize">
            <summary>事务提交的批大小</summary>
        </member>
        <member name="P:XCode.Common.DataSimulation.Threads">
            <summary>并发线程数</summary>
        </member>
        <member name="P:XCode.Common.DataSimulation.UseSql">
            <summary>直接执行SQL</summary>
        </member>
        <member name="P:XCode.Common.DataSimulation.Score">
            <summary>分数</summary>
        </member>
        <member name="M:XCode.Common.DataSimulation.#ctor">
            <summary>实例化</summary>
        </member>
        <member name="M:XCode.Common.DataSimulation.Run(System.Int32)">
            <summary>开始执行</summary>
            <param name="count"></param>
        </member>
        <member name="P:XCode.Common.DataSimulation.Log">
            <summary>日志</summary>
        </member>
        <member name="M:XCode.Common.DataSimulation.WriteLog(System.String,System.Object[])">
            <summary>写日志</summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="T:XCode.Common.Helper">
            <summary>助手类</summary>
        </member>
        <member name="M:XCode.Common.Helper.IsNullKey(System.Object,System.Type)">
            <summary>指定键是否为空。一般业务系统设计不允许主键为空，包括自增的0和字符串的空</summary>
            <param name="key">键值</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Common.Helper.IsEntityNullKey(XCode.IEntity)">
            <summary>是否空主键的实体</summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.Configuration.DbConfigProvider">
            <summary>数据库参数表文件提供者</summary>
        </member>
        <member name="P:XCode.Configuration.DbConfigProvider.UserId">
            <summary>要加载配置的用户。默认0表示全局</summary>
        </member>
        <member name="P:XCode.Configuration.DbConfigProvider.Category">
            <summary>分类</summary>
        </member>
        <member name="P:XCode.Configuration.DbConfigProvider.CacheLevel">
            <summary>本地缓存配置数据。即使网络断开，仍然能够加载使用本地数据，默认 Json</summary>
        </member>
        <member name="P:XCode.Configuration.DbConfigProvider.Period">
            <summary>更新周期。默认15秒，0秒表示不做自动更新</summary>
        </member>
        <member name="M:XCode.Configuration.DbConfigProvider.Init(System.String)">
            <summary>初始化提供者，如有必要，此时加载缓存文件</summary>
            <param name="value"></param>
        </member>
        <member name="M:XCode.Configuration.DbConfigProvider.GetAll">
            <summary>获取所有配置</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.DbConfigProvider.Build(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>加载配置字典为配置树</summary>
            <param name="configs"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.DbConfigProvider.LoadAll">
            <summary>加载配置</summary>
        </member>
        <member name="M:XCode.Configuration.DbConfigProvider.SaveAll">
            <summary>保存配置树到数据源</summary>
        </member>
        <member name="M:XCode.Configuration.DbConfigProvider.Bind``1(``0,System.Boolean,System.String)">
            <summary>绑定模型，使能热更新，配置存储数据改变时同步修改模型属性</summary>
            <typeparam name="T">模型</typeparam>
            <param name="model">模型实例</param>
            <param name="autoReload">是否自动更新。默认true</param>
            <param name="path">路径。配置树位置，配置中心等多对象混合使用时</param>
        </member>
        <member name="F:XCode.Configuration.DbConfigProvider._timer">
            <summary>定时器</summary>
        </member>
        <member name="M:XCode.Configuration.DbConfigProvider.DoRefresh(System.Object)">
            <summary>定时刷新配置</summary>
            <param name="state"></param>
        </member>
        <member name="T:XCode.Configuration.FieldItem">
            <summary>数据属性元数据以及特性</summary>
        </member>
        <member name="F:XCode.Configuration.FieldItem._Property">
            <summary>属性元数据</summary>
        </member>
        <member name="P:XCode.Configuration.FieldItem.Property">
            <summary>属性元数据</summary>
        </member>
        <member name="P:XCode.Configuration.FieldItem.Column">
            <summary>绑定列特性</summary>
        </member>
        <member name="P:XCode.Configuration.FieldItem.DataObject">
            <summary>数据字段特性</summary>
        </member>
        <member name="P:XCode.Configuration.FieldItem.Description">
            <summary>备注</summary>
        </member>
        <member name="P:XCode.Configuration.FieldItem.DisplayName">
            <summary>说明</summary>
        </member>
        <member name="P:XCode.Configuration.FieldItem.Category">
            <summary>分类</summary>
        </member>
        <member name="P:XCode.Configuration.FieldItem.Name">
            <summary>属性名</summary>
        </member>
        <member name="P:XCode.Configuration.FieldItem.Type">
            <summary>属性类型</summary>
        </member>
        <member name="P:XCode.Configuration.FieldItem.DeclaringType">
            <summary>声明类型</summary>
        </member>
        <member name="P:XCode.Configuration.FieldItem.IsIdentity">
            <summary>是否标识列</summary>
        </member>
        <member name="P:XCode.Configuration.FieldItem.PrimaryKey">
            <summary>是否主键</summary>
        </member>
        <member name="P:XCode.Configuration.FieldItem.Master">
            <summary>是否主字段。主字段作为业务主要字段，代表当前数据行意义</summary>
        </member>
        <member name="P:XCode.Configuration.FieldItem.IsNullable">
            <summary>是否允许空</summary>
        </member>
        <member name="P:XCode.Configuration.FieldItem.Length">
            <summary>长度</summary>
        </member>
        <member name="P:XCode.Configuration.FieldItem.IsDataObjectField">
            <summary>是否数据绑定列</summary>
        </member>
        <member name="P:XCode.Configuration.FieldItem.IsDynamic">
            <summary>是否动态字段</summary>
        </member>
        <member name="F:XCode.Configuration.FieldItem.COLUMNNAME_FLAG">
            <summary>字段名要过滤掉的标识符，考虑MSSQL、MySql、SQLite、Oracle等</summary>
        </member>
        <member name="P:XCode.Configuration.FieldItem.ColumnName">
            <summary>用于数据绑定的字段名</summary>
            <remarks>
            默认使用BindColumn特性中指定的字段名，如果没有指定，则使用属性名。
            字段名可能两边带有方括号等标识符
            </remarks>
        </member>
        <member name="P:XCode.Configuration.FieldItem.ReadOnly">
            <summary>是否只读</summary>
            <remarks>set { _ReadOnly = value; } 放出只读属性的设置，比如在编辑页面的时候，有的字段不能修改 如修改用户时  不能修改用户名</remarks>
        </member>
        <member name="P:XCode.Configuration.FieldItem.Table">
            <summary>表</summary>
        </member>
        <member name="P:XCode.Configuration.FieldItem.Field">
            <summary>字段</summary>
        </member>
        <member name="P:XCode.Configuration.FieldItem.Factory">
            <summary>实体操作者</summary>
        </member>
        <member name="P:XCode.Configuration.FieldItem.FormatedName">
            <summary>已格式化的字段名，可字节用于SQL中。主要用于处理关键字，比如MSSQL里面的[User]</summary>
        </member>
        <member name="P:XCode.Configuration.FieldItem.OriField">
            <summary>跟当前字段有关系的原始字段</summary>
        </member>
        <member name="P:XCode.Configuration.FieldItem.Map">
            <summary>获取映射特性</summary>
        </member>
        <member name="M:XCode.Configuration.FieldItem.#ctor(XCode.Configuration.TableItem,System.Reflection.PropertyInfo)">
            <summary>构造函数</summary>
            <param name="table"></param>
            <param name="property">属性</param>
        </member>
        <member name="M:XCode.Configuration.FieldItem.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.FieldItem.Fill(XCode.DataAccessLayer.IDataColumn)">
            <summary>填充到XField中去</summary>
            <param name="field">字段</param>
        </member>
        <member name="M:XCode.Configuration.FieldItem.CreateFormat(System.String,System.Object)">
            <summary>建立表达式</summary>
            <param name="format"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.FieldItem.Equal(System.Object)">
            <summary>等于</summary>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.FieldItem.NotEqual(System.Object)">
            <summary>不等于</summary>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.FieldItem.StartsWith(System.String)">
            <summary>以某个字符串开始,{0}%操作</summary>
            <remarks>空参数不参与表达式操作，不生成该部分SQL拼接</remarks>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.FieldItem.EndsWith(System.String)">
            <summary>以某个字符串结束，%{0}操作</summary>
            <remarks>空参数不参与表达式操作，不生成该部分SQL拼接</remarks>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.FieldItem.Contains(System.String)">
            <summary>包含某个字符串，%{0}%操作</summary>
            <remarks>空参数不参与表达式操作，不生成该部分SQL拼接</remarks>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.FieldItem.NotContains(System.String)">
            <summary>不包含某个字符串，%{0}%操作</summary>
            <remarks>空参数不参与表达式操作，不生成该部分SQL拼接</remarks>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.FieldItem.In(System.Collections.IEnumerable)">
            <summary>In操作</summary>
            <remarks>空参数不参与表达式操作，不生成该部分SQL拼接。只有一项时转为等于</remarks>
            <param name="value">枚举数据，会转化为字符串</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.FieldItem.NotIn(System.Collections.IEnumerable)">
            <summary>NotIn操作</summary>
            <remarks>空参数不参与表达式操作，不生成该部分SQL拼接。只有一项时修改为不等于</remarks>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.FieldItem.In(System.String)">
            <summary>In操作。直接使用字符串可能有注入风险</summary>
            <remarks>空参数不参与表达式操作，不生成该部分SQL拼接</remarks>
            <param name="child">逗号分割的数据。可能有注入风险</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.FieldItem.NotIn(System.String)">
            <summary>NotIn操作。直接使用字符串可能有注入风险</summary>
            <remarks>空参数不参与表达式操作，不生成该部分SQL拼接</remarks>
            <param name="child">数值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.FieldItem.In(XCode.DataAccessLayer.SelectBuilder)">
            <summary>In操作。直接使用字符串可能有注入风险</summary>
            <remarks>空参数不参与表达式操作，不生成该部分SQL拼接</remarks>
            <param name="builder">逗号分割的数据。可能有注入风险</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.FieldItem.NotIn(XCode.DataAccessLayer.SelectBuilder)">
            <summary>NotIn操作。直接使用字符串可能有注入风险</summary>
            <remarks>空参数不参与表达式操作，不生成该部分SQL拼接</remarks>
            <param name="builder">数值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.FieldItem.IsNull">
            <summary>IsNull操作，不为空，一般用于字符串，但不匹配0长度字符串</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.FieldItem.NotIsNull">
            <summary>NotIsNull操作</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.FieldItem.IsNullOrEmpty">
            <summary>IsNullOrEmpty操作，用于空或者0长度字符串</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.FieldItem.NotIsNullOrEmpty">
            <summary>NotIsNullOrEmpty操作</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.FieldItem.IsTrue(System.Nullable{System.Boolean})">
            <summary>是否True或者False/Null，参数决定两组之一</summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.FieldItem.IsFalse(System.Nullable{System.Boolean})">
            <summary>是否False或者True/Null，参数决定两组之一</summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.FieldItem.op_GreaterThan(XCode.Configuration.FieldItem,System.Object)">
            <summary>大于</summary>
            <param name="field">字段</param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.FieldItem.op_LessThan(XCode.Configuration.FieldItem,System.Object)">
            <summary>小于</summary>
            <param name="field">字段</param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.FieldItem.op_GreaterThanOrEqual(XCode.Configuration.FieldItem,System.Object)">
            <summary>大于等于</summary>
            <param name="field">字段</param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.FieldItem.op_LessThanOrEqual(XCode.Configuration.FieldItem,System.Object)">
            <summary>小于等于</summary>
            <param name="field">字段</param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.FieldItem.op_Implicit(XCode.Configuration.FieldItem)~System.String">
            <summary>类型转换</summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.Configuration.Field">
            <summary>继承FieldItem，仅仅为了重载==和!=运算符</summary>
        </member>
        <member name="M:XCode.Configuration.Field.#ctor(XCode.Configuration.TableItem,System.Reflection.PropertyInfo)">
            <summary>构造函数</summary>
            <param name="table"></param>
            <param name="property">属性</param>
        </member>
        <member name="M:XCode.Configuration.Field.op_Equality(XCode.Configuration.Field,System.Object)">
            <summary>等于</summary>
            <param name="field">字段</param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.Field.op_Inequality(XCode.Configuration.Field,System.Object)">
            <summary>不等于</summary>
            <param name="field">字段</param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.Field.GetHashCode">
            <summary>重写一下</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.Field.Equals(System.Object)">
            <summary>重写一下</summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.Field.op_Implicit(XCode.Configuration.Field)~System.String">
            <summary>类型转换</summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.Configuration.FieldOption">
            <summary>字段选项</summary>
        </member>
        <member name="P:XCode.Configuration.FieldOption.AllFields">
            <summary>是否使用所有字段。默认true，除了基础数据字段外，包括使用扩展属性</summary>
        </member>
        <member name="P:XCode.Configuration.FieldOption.DisplayName">
            <summary>是否使用显示名。默认false，使用英文名，否则使用中文显示名</summary>
        </member>
        <member name="T:XCode.Configuration.SqlTemplate">
            <summary>Sql模版，包含一个Sql语句在不同数据库下的多种写法</summary>
        </member>
        <member name="P:XCode.Configuration.SqlTemplate.Name">
            <summary>名称</summary>
        </member>
        <member name="P:XCode.Configuration.SqlTemplate.Sql">
            <summary>默认Sql语句</summary>
        </member>
        <member name="P:XCode.Configuration.SqlTemplate.Sqls">
            <summary>特定数据库语句</summary>
        </member>
        <member name="M:XCode.Configuration.SqlTemplate.Parse(System.String)">
            <summary>分析字符串</summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.SqlTemplate.Parse(System.IO.Stream)">
            <summary>分析数据流</summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.SqlTemplate.Parse(System.IO.TextReader)">
            <summary>从文本读写器中解析</summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.SqlTemplate.ParseEmbedded(System.Reflection.Assembly,System.String,System.String)">
            <summary>分析嵌入资源</summary>
            <param name="assembly"></param>
            <param name="nameSpace"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.SqlTemplate.GetSql(XCode.DataAccessLayer.DatabaseType)">
            <summary>获取指定数据库的Sql，如果未指定，则返回默认</summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.Configuration.TableItem">
            <summary>数据表元数据</summary>
        </member>
        <member name="P:XCode.Configuration.TableItem.EntityType">
            <summary>实体类型</summary>
        </member>
        <member name="F:XCode.Configuration.TableItem._Table">
            <summary>绑定表特性</summary>
        </member>
        <member name="F:XCode.Configuration.TableItem._Indexes">
            <summary>绑定索引特性</summary>
        </member>
        <member name="P:XCode.Configuration.TableItem.Description">
            <summary>说明</summary>
        </member>
        <member name="P:XCode.Configuration.TableItem.TableName">
            <summary>表名</summary>
        </member>
        <member name="P:XCode.Configuration.TableItem.ConnName">
            <summary>连接名</summary>
        </member>
        <member name="P:XCode.Configuration.TableItem.Fields">
            <summary>数据字段</summary>
        </member>
        <member name="P:XCode.Configuration.TableItem.AllFields">
            <summary>所有字段</summary>
        </member>
        <member name="P:XCode.Configuration.TableItem.Identity">
            <summary>标识列</summary>
        </member>
        <member name="P:XCode.Configuration.TableItem.PrimaryKeys">
            <summary>主键。不会返回null</summary>
        </member>
        <member name="P:XCode.Configuration.TableItem.Master">
            <summary>主字段。主字段作为业务主要字段，代表当前数据行意义</summary>
        </member>
        <member name="P:XCode.Configuration.TableItem.FieldNames">
            <summary>字段名集合，不区分大小写的哈希表存储，外部不要修改元素数据</summary>
        </member>
        <member name="P:XCode.Configuration.TableItem.ExtendFieldNames">
            <summary>扩展属性集合，不区分大小写的哈希表存储，外部不要修改元素数据</summary>
        </member>
        <member name="P:XCode.Configuration.TableItem.DataTable">
            <summary>数据表架构</summary>
        </member>
        <member name="P:XCode.Configuration.TableItem.ModelCheckMode">
            <summary>模型检查模式</summary>
        </member>
        <member name="M:XCode.Configuration.TableItem.Create(System.Type)">
            <summary>创建</summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.TableItem.GetFields(System.Type)">
            <summary>获取属性，保证基类属性在前</summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.TableItem.FindByName(System.String)">
            <summary>根据名称查找</summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.TableItem.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.TableItem.Add(System.String,System.Type,System.String,System.Int32)">
            <summary>动态增加字段</summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="description"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.FieldExtension">
            <summary>字段扩展</summary>
        </member>
        <member name="M:XCode.FieldExtension.Between(XCode.Configuration.FieldItem,System.DateTime,System.DateTime)">
            <summary>时间专用区间函数，左闭合右开放，开始结束都是日期时包含结束日期（也即结束日期加一天）</summary>
            <param name="fi"></param>
            <param name="start">起始时间，大于等于</param>
            <param name="end">结束时间，小于。如果是日期，则加一天</param>
            <returns></returns>
        </member>
        <member name="M:XCode.FieldExtension.Between(XCode.Configuration.FieldItem,System.DateTime,System.DateTime,NewLife.Data.Snowflake)">
            <summary>时间专用区间函数，左闭合右开放，开始结束都是日期时包含结束日期（也即结束日期加一天）</summary>
            <param name="fi"></param>
            <param name="start">起始时间，大于等于</param>
            <param name="end">结束时间，小于。如果是日期，则加一天</param>
            <param name="snow"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.FieldExtension.Today(XCode.Configuration.FieldItem)">
            <summary>当天范围</summary>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:XCode.FieldExtension.Yesterday(XCode.Configuration.FieldItem)">
            <summary>昨天范围</summary>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:XCode.FieldExtension.Tomorrow(XCode.Configuration.FieldItem)">
            <summary>明天范围</summary>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:XCode.FieldExtension.LastDays(XCode.Configuration.FieldItem,System.Int32)">
            <summary>过去天数范围</summary>
            <param name="field">字段</param>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.FieldExtension.NextDays(XCode.Configuration.FieldItem,System.Int32)">
            <summary>未来天数范围</summary>
            <param name="field">字段</param>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.FieldExtension.ThisWeek(XCode.Configuration.FieldItem)">
            <summary>本周范围</summary>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:XCode.FieldExtension.LastWeek(XCode.Configuration.FieldItem)">
            <summary>上周范围</summary>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:XCode.FieldExtension.NextWeek(XCode.Configuration.FieldItem)">
            <summary>下周范围</summary>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:XCode.FieldExtension.ThisMonth(XCode.Configuration.FieldItem)">
            <summary>本月范围</summary>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:XCode.FieldExtension.LastMonth(XCode.Configuration.FieldItem)">
            <summary>上月范围</summary>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:XCode.FieldExtension.NextMonth(XCode.Configuration.FieldItem)">
            <summary>下月范围</summary>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:XCode.FieldExtension.ThisQuarter(XCode.Configuration.FieldItem)">
            <summary>本季度范围</summary>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:XCode.FieldExtension.LastQuarter(XCode.Configuration.FieldItem)">
            <summary>上季度范围</summary>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:XCode.FieldExtension.NextQuarter(XCode.Configuration.FieldItem)">
            <summary>下季度范围</summary>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:XCode.FieldExtension.ContainsAll(XCode.Configuration.FieldItem,System.String)">
            <summary>包含所有关键字</summary>
            <param name="field"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.FieldExtension.ContainsAny(XCode.Configuration.FieldItem,System.String)">
            <summary>包含任意关键字</summary>
            <param name="field"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.FieldExtension.Asc(XCode.Configuration.FieldItem)">
            <summary>升序</summary>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:XCode.FieldExtension.Desc(XCode.Configuration.FieldItem)">
            <summary>降序</summary>
            <param name="field">字段</param>
            <remarks>感谢 树懒（303409914）发现这里的错误</remarks>
            <returns></returns>
        </member>
        <member name="M:XCode.FieldExtension.Sort(XCode.Configuration.FieldItem,System.Boolean)">
            <summary>通过参数置顶升序降序</summary>
            <param name="field">字段</param>
            <param name="isdesc">是否降序</param>
            <returns></returns>
        </member>
        <member name="M:XCode.FieldExtension.GroupBy(XCode.Configuration.FieldItem)">
            <summary>分组。有条件的分组请使用WhereExpression.GroupBy</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.FieldExtension.GroupBy(XCode.WhereExpression,XCode.Configuration.FieldItem[])">
            <summary>按照指定若干个字段分组。没有条件时使用分组请用FieldItem的GroupBy</summary>
            <param name="where"></param>
            <param name="fields"></param>
            <returns>将需要分组的字段作为ConcatExpression类型添加到whereExpression尾部</returns>
        </member>
        <member name="M:XCode.FieldExtension.Aggregate(XCode.Configuration.FieldItem,System.String,System.String)">
            <summary>聚合</summary>
            <param name="field">字段</param>
            <param name="action"></param>
            <param name="newName"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.FieldExtension.As(XCode.Configuration.FieldItem,System.String)">
            <summary>作为新的列</summary>
            <param name="field"></param>
            <param name="newName"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.FieldExtension.Count(XCode.Configuration.FieldItem,System.String)">
            <summary>计数</summary>
            <param name="field">字段</param>
            <param name="newName">聚合后as的新名称，默认空，表示跟前面字段名一致</param>
            <returns></returns>
        </member>
        <member name="M:XCode.FieldExtension.CountDistinct(XCode.Configuration.FieldItem,System.String)">
            <summary>计数（唯一）</summary>
            <param name="field">字段</param>
            <param name="newName">聚合后as的新名称，默认空，表示跟前面字段名一致</param>
            <returns></returns>
        </member>
        <member name="M:XCode.FieldExtension.Sum(XCode.Configuration.FieldItem,System.String)">
            <summary>求和</summary>
            <param name="field">字段</param>
            <param name="newName">聚合后as的新名称，默认空，表示跟前面字段名一致</param>
            <returns></returns>
        </member>
        <member name="M:XCode.FieldExtension.Min(XCode.Configuration.FieldItem,System.String)">
            <summary>最小值</summary>
            <param name="field">字段</param>
            <param name="newName">聚合后as的新名称，默认空，表示跟前面字段名一致</param>
            <returns></returns>
        </member>
        <member name="M:XCode.FieldExtension.Max(XCode.Configuration.FieldItem,System.String)">
            <summary>最大值</summary>
            <param name="field">字段</param>
            <param name="newName">聚合后as的新名称，默认空，表示跟前面字段名一致</param>
            <returns></returns>
        </member>
        <member name="M:XCode.FieldExtension.Avg(XCode.Configuration.FieldItem,System.String)">
            <summary>平均值</summary>
            <param name="field">字段</param>
            <param name="newName">聚合后as的新名称，默认空，表示跟前面字段名一致</param>
            <returns></returns>
        </member>
        <member name="M:XCode.FieldExtension.SumCase(XCode.Configuration.FieldItem,System.Object,System.String)">
            <summary>sumCase子句，计算等于某个值的数量</summary>
            <param name="field">字段</param>
            <param name="value">值</param>
            <param name="newName">聚合后as的新名称</param>
            <returns></returns>
        </member>
        <member name="M:XCode.FieldExtension.SumLarge(XCode.Configuration.FieldItem,System.Object,System.String)">
            <summary>sumCase子句，计算大于某个值的数量</summary>
            <param name="field">字段</param>
            <param name="value">值</param>
            <param name="newName">聚合后as的新名称</param>
            <returns></returns>
        </member>
        <member name="M:XCode.FieldExtension.SumLargeEqual(XCode.Configuration.FieldItem,System.Object,System.String)">
            <summary>sumCase子句，计算大于等于某个值的数量</summary>
            <param name="field">字段</param>
            <param name="value">值</param>
            <param name="newName">聚合后as的新名称</param>
            <returns></returns>
        </member>
        <member name="M:XCode.FieldExtension.SumLess(XCode.Configuration.FieldItem,System.Object,System.String)">
            <summary>sumCase子句，计算小于某个值的数量</summary>
            <param name="field">字段</param>
            <param name="value">值</param>
            <param name="newName">聚合后as的新名称</param>
            <returns></returns>
        </member>
        <member name="M:XCode.FieldExtension.SumLessEqual(XCode.Configuration.FieldItem,System.Object,System.String)">
            <summary>sumCase子句，计算小于等于某个值的数量</summary>
            <param name="field">字段</param>
            <param name="value">值</param>
            <param name="newName">聚合后as的新名称</param>
            <returns></returns>
        </member>
        <member name="T:XCode.DataAccessLayer.DatabaseType">
            <summary>数据库类型</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DatabaseType.None">
            <summary>无效值</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DatabaseType.Access">
            <summary>MS的Access文件数据库</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DatabaseType.SqlServer">
            <summary>MS的SqlServer数据库</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DatabaseType.Oracle">
            <summary>Oracle数据库</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DatabaseType.MySql">
            <summary>MySql数据库</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DatabaseType.SqlCe">
            <summary>SqlCe数据库</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DatabaseType.SQLite">
            <summary>SQLite数据库</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DatabaseType.PostgreSQL">
            <summary>SqlCe数据库</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DatabaseType.DaMeng">
            <summary>达梦数据库</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DatabaseType.DB2">
            <summary>DB2数据库</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DatabaseType.TDengine">
            <summary>TDengine数据库</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DatabaseType.Hana">
            <summary>Hana数据库</summary>
        </member>
        <member name="T:XCode.DataAccessLayer.DbBase">
            <summary>数据库基类</summary>
            <remarks>
            数据库类的职责是抽象不同数据库的共同点，理应最小化，保证原汁原味，因此不做缓存等实现。
            对于每一个连接字符串配置，都有一个数据库实例，而不是每个数据库类型一个实例，因为同类型数据库不同版本行为不同。
            </remarks>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.#ctor">
            <summary>实例化</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.Dispose(System.Boolean)">
            <summary>销毁资源时，回滚未提交事务，并关闭数据库连接</summary>
            <param name="disposing"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.ReleaseSession">
            <summary>释放所有会话</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbBase.Type">
            <summary>返回数据库类型。外部DAL数据库类请使用Other</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DbBase._providerFactory">
            <summary>提供者工厂</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbBase.Factory">
            <summary>数据库提供者工厂。支持外部修改</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.CreateFactory">
            <summary>创建工厂</summary>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.DbBase.ConnName">
            <summary>连接名</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbBase.ConnectionString">
            <summary>链接字符串</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbBase.Provider">
            <summary>数据库提供者。用于选择驱动</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.OnSetConnectionString(XCode.DataAccessLayer.ConnectionStringBuilder)">
            <summary>设置连接字符串时允许从中取值或修改，基类用于读取拥有者Owner，子类重写时应调用基类</summary>
            <param name="builder"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.OnGetConnectionString(XCode.DataAccessLayer.ConnectionStringBuilder)">
            <summary>获取连接字符串时取值或修改</summary>
            <remarks>此时Factory已就绪，可根据驱动调整连接字符串参数</remarks>
            <param name="builder"></param>
        </member>
        <member name="P:XCode.DataAccessLayer.DbBase.Owner">
            <summary>拥有者</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbBase.DatabaseName">
            <summary>数据库名</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbBase.ServerVersion">
            <summary>数据库服务器版本</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbBase.Migration">
            <summary>反向工程。Off 关闭；ReadOnly 只读不执行；On 打开，新建；Full 完全，修改删除</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbBase.TraceSQLTime">
            <summary>跟踪SQL执行时间，大于该阀值将输出日志</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbBase.Readonly">
            <summary>本连接数据只读</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbBase.RetryOnFailure">
            <summary>失败重试。执行命令超时后的重试次数，默认0不重试</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbBase.DataCache">
            <summary>数据层缓存有效期。单位秒</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbBase.TablePrefix">
            <summary>表前缀。所有在该连接上的表名都自动增加该前缀</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbBase.NameFormat">
            <summary>反向工程表名、字段名大小写设置</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbBase.BatchSize">
            <summary>批大小。用于批量操作数据，抽取、删除、备份、恢复</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbBase.CommandTimeout">
            <summary>命令超时。查询执行超时时间，默认0秒不限制</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbBase.Tracer">
            <summary>性能追踪器</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.CreateSession">
            <summary>创建数据库会话，数据库在每一个线程都有唯一的一个实例</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.CreateSessionForAsync">
            <summary>为异步操作创建数据库会话，数据库在每一个异步上下文都有唯一的一个实例</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.OnCreateSession">
            <summary>创建数据库会话</summary>
            <returns></returns>
        </member>
        <member name="F:XCode.DataAccessLayer.DbBase._metadata">
            <summary>唯一实例</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.CreateMetaData">
            <summary>创建元数据对象，唯一实例</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.OnCreateMetaData">
            <summary>创建元数据对象</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.OpenConnection">
            <summary>打开连接</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.OpenConnectionAsync">
            <summary>打开连接</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.Support(System.String)">
            <summary>是否支持该提供者所描述的数据库</summary>
            <param name="providerName">提供者</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.GetProviderFactory(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>获取提供者工厂</summary>
            <param name="name"></param>
            <param name="assemblyFile"></param>
            <param name="className"></param>
            <param name="strict"></param>
            <param name="ignoreError"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.GetProviderFactory(System.Type)">
            <summary>
            从类型加载驱动
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.PageSplit(System.String,System.Int64,System.Int64,System.String)">
            <summary>构造分页SQL，优先选择max/min，然后选择not in</summary>
            <remarks>
            两个构造分页SQL的方法，区别就在于查询生成器能够构造出来更好的分页语句，尽可能的避免子查询。
            MS体系的分页精髓就在于唯一键，当唯一键带有Asc/Desc/Unkown等排序结尾时，就采用最大最小值分页，否则使用较次的TopNotIn分页。
            TopNotIn分页和MaxMin分页的弊端就在于无法完美的支持GroupBy查询分页，只能查到第一页，往后分页就不行了，因为没有主键。
            </remarks>
            <param name="sql">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">唯一键。用于not in分页</param>
            <returns>分页SQL</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.CheckSimpleSQL(System.String)">
            <summary>检查简单SQL语句，比如Select * From table</summary>
            <param name="sql">待检查SQL语句</param>
            <returns>如果是简单SQL语句则返回表名，否则返回子查询(sql) XCode_Temp_a</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.CheckOrderClause(System.String@)">
            <summary>检查是否以Order子句结尾，如果是，分割sql为前后两部分</summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.PageSplit(XCode.DataAccessLayer.SelectBuilder,System.Int64,System.Int64)">
            <summary>构造分页SQL</summary>
            <remarks>
            两个构造分页SQL的方法，区别就在于查询生成器能够构造出来更好的分页语句，尽可能的避免子查询。
            MS体系的分页精髓就在于唯一键，当唯一键带有Asc/Desc/Unkown等排序结尾时，就采用最大最小值分页，否则使用较次的TopNotIn分页。
            TopNotIn分页和MaxMin分页的弊端就在于无法完美的支持GroupBy查询分页，只能查到第一页，往后分页就不行了，因为没有主键。
            </remarks>
            <param name="builder">查询生成器</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>分页SQL</returns>
        </member>
        <member name="P:XCode.DataAccessLayer.DbBase.LongTextLength">
            <summary>长文本长度</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbBase.ReservedWordsStr">
            <summary>
            保留字字符串，其实可以在首次使用时动态从Schema中加载
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbBase.ReservedWords">
            <summary>
            保留字
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.IsReservedWord(System.String)">
            <summary>是否保留字</summary>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.FormatDateTime(System.DateTime)">
            <summary>格式化时间为SQL字符串</summary>
            <remarks>
            优化DateTime转为全字符串，平均耗时从25.76ns降为15.07。
            调用非常频繁，每分钟都有数百万次调用。
            </remarks>
            <param name="dateTime">时间值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.FormatKeyWord(System.String)">
            <summary>格式化关键字</summary>
            <param name="keyWord">表名</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.FormatName(System.String)">
            <summary>格式化名称，如果是关键字，则格式化后返回，否则原样返回</summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.FormatName(XCode.DataAccessLayer.IDataTable)">
            <summary>格式化表名，考虑表前缀和Owner</summary>
            <param name="table">表</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.FormatName(XCode.DataAccessLayer.IDataTable,System.Boolean)">
            <summary>格式化表名，考虑表前缀和Owner</summary>
            <param name="table">表</param>
            <param name="formatKeyword">是否格式化关键字</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.FormatName(XCode.DataAccessLayer.IDataColumn)">
            <summary>格式化字段名，考虑大小写</summary>
            <param name="column">字段</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.ChangeUnderline(System.String)">
            <summary>把驼峰命名转为下划线</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.FormatValue(XCode.DataAccessLayer.IDataColumn,System.Object)">
            <summary>格式化数据为SQL数据</summary>
            <param name="column">字段</param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.FormatLike(XCode.DataAccessLayer.IDataColumn,System.String,System.String)">
            <summary>格式化模糊搜索的字符串。处理转义字符</summary>
            <param name="column">字段</param>
            <param name="format">格式化字符串</param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.FormatParameterName(System.String)">
            <summary>格式化参数名</summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.StringConcat(System.String,System.String)">
            <summary>字符串相加</summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.CreateParameter(System.String,System.Object,XCode.DataAccessLayer.IDataColumn)">
            <summary>创建参数</summary>
            <param name="name">名称</param>
            <param name="value">值</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.CreateParameter(System.String,System.Object,System.Type)">
            <summary>创建参数</summary>
            <param name="name">名称</param>
            <param name="value">值</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.CreateParameters(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>创建参数数组</summary>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.CreateParameters(System.Object)">
            <summary>根据对象成员创建参数数组</summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.DbBase.SupportSchema">
            <summary>是否支持Schema。默认true</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.DbBase.ShowSQL">
            <summary>是否输出SQL语句，默认为XCode调试开关XCode.Debug</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbBase.SQLMaxLength">
            <summary>SQL最大长度，输出日志时的SQL最大长度，超长截断，默认4096，不截断用0</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbBase.UseParameter">
            <summary>参数化添删改查。默认关闭</summary>
        </member>
        <member name="T:XCode.DataAccessLayer.DbFactory">
            <summary>数据库工厂</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DbFactory.Register``1(XCode.DataAccessLayer.DatabaseType)">
            <summary>注册数据库提供者</summary>
            <typeparam name="T"></typeparam>
            <param name="dbType"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.DbFactory.Create(XCode.DataAccessLayer.DatabaseType)">
            <summary>根据数据库类型创建提供者</summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbFactory.GetDefault(System.Type)">
            <summary>根据名称获取默认提供者</summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbFactory.GetProviderType(System.String,System.String)">
            <summary>从提供者和连接字符串猜测数据库处理器</summary>
            <param name="connStr"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.DataAccessLayer.DbSession">
            <summary>数据库会话基类</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.Dispose(System.Boolean)">
            <summary>销毁资源时，回滚未提交事务，并关闭数据库连接</summary>
            <param name="disposing"></param>
        </member>
        <member name="P:XCode.DataAccessLayer.DbSession.Database">
            <summary>数据库</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbSession.Tracer">
            <summary>链路追踪</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.OnException(System.Exception)">
            <summary>当异常发生时触发。关闭数据库连接，或者返还连接到连接池。</summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.OnException(System.Exception,System.Data.Common.DbCommand,System.String)">
            <summary>当异常发生时触发。关闭数据库连接，或者返还连接到连接池。</summary>
            <param name="ex"></param>
            <param name="cmd"></param>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.Process``1(System.Func{System.Data.Common.DbConnection,``0})">
            <summary>打开连接并执行操作</summary>
            <typeparam name="TResult"></typeparam>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.Process``1(System.Func{``0})">
            <summary>打开连接并执行操作</summary>
            <typeparam name="TResult"></typeparam>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.ProcessAsync``1(System.Func{System.Data.Common.DbConnection,System.Threading.Tasks.Task{``0}})">
            <summary>打开连接并执行操作</summary>
            <typeparam name="TResult"></typeparam>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.ProcessAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>打开连接并执行操作</summary>
            <typeparam name="TResult"></typeparam>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.ShouldRetryOn(System.Exception)">
            <summary>是否应该在该异常上重试</summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.DbSession.Transaction">
            <summary>数据库事务。不是线程安全，不支持多线程共用</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.BeginTransaction(System.Data.IsolationLevel)">
            <summary>开始事务</summary>
            <remarks>
            Read Uncommitted: 允许读取脏数据，一个事务能看到另一个事务还没有提交的数据。（不会阻止其它操作）
            Read Committed: 确保事务读取的数据都必须是已经提交的数据。它限制了读取中间的，没有提交的，脏的数据。
            但是它不能确保当事务重新去读取的时候，读的数据跟上次读的数据是一样的，也就是说当事务第一次读取完数据后，
            该数据是可能被其他事务修改的，当它再去读取的时候，数据可能是不一样的。（数据隐藏，不阻止）
            Repeatable Read: 是一个更高级别的隔离级别，如果事务再去读取同样的数据，先前的数据是没有被修改过的。（阻止其它修改）
            Serializable: 它做出了最有力的保证，除了每次读取的数据是一样的，它还确保每次读取没有新的数据。（阻止其它添删改）
            </remarks>
            <param name="level">事务隔离等级</param>
            <returns>剩下的事务计数</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.Commit">
            <summary>提交事务</summary>
            <returns>剩下的事务计数</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.Rollback(System.Boolean)">
            <summary>回滚事务</summary>
            <param name="ignoreException">是否忽略异常</param>
            <returns>剩下的事务计数</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.Query(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行SQL查询，返回记录集</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.Query(System.Data.Common.DbCommand)">
            <summary>执行DbCommand，返回记录集</summary>
            <param name="cmd">DbCommand</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.Query(XCode.DataAccessLayer.SelectBuilder)">
            <summary>执行SQL查询，返回记录集</summary>
            <param name="builder">查询生成器</param>
            <returns>总记录数</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.Query(System.String,System.Data.IDataParameter[])">
            <summary>执行SQL查询，返回记录集</summary>
            <param name="sql">SQL语句</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.QueryCount(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行SQL查询，返回总记录数</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.QueryCount(XCode.DataAccessLayer.SelectBuilder)">
            <summary>执行SQL查询，返回总记录数</summary>
            <param name="builder">查询生成器</param>
            <returns>总记录数</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.QueryCountFast(System.String)">
            <summary>快速查询单表记录数，稍有偏差</summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.Execute(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行SQL语句，返回受影响的行数</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.Execute(System.Data.Common.DbCommand)">
            <summary>执行DbCommand，返回受影响的行数</summary>
            <param name="cmd">DbCommand</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.InsertAndGetIdentity(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.ExecuteScalar``1(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行SQL语句，返回结果中的第一行第一列</summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.CreateCommand(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>获取一个DbCommand。</summary>
            <remark>
            配置了连接，并关联了事务。
            连接已打开。
            </remark>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.OnCreateCommand(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>获取一个DbCommand。</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.QueryAsync(System.String,System.Data.IDataParameter[])">
            <summary>执行SQL查询，返回记录集</summary>
            <param name="sql">SQL语句</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.QueryCountAsync(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行SQL查询，返回总记录数</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.QueryCountAsync(XCode.DataAccessLayer.SelectBuilder)">
            <summary>执行SQL查询，返回总记录数</summary>
            <param name="builder">查询生成器</param>
            <returns>总记录数</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.QueryCountFastAsync(System.String)">
            <summary>快速查询单表记录数，稍有偏差</summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.ExecuteAsync(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行SQL语句，返回受影响的行数</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.ExecuteAsync(System.Data.Common.DbCommand)">
            <summary>执行DbCommand，返回受影响的行数</summary>
            <param name="cmd">DbCommand</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.InsertAndGetIdentityAsync(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.ExecuteScalarAsync``1(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行SQL语句，返回结果中的第一行第一列</summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.Insert(XCode.DataAccessLayer.IDataTable,XCode.DataAccessLayer.IDataColumn[],System.Collections.Generic.IEnumerable{NewLife.Data.IModel})">
            <summary>批量插入</summary>
            <param name="table">数据表</param>
            <param name="columns">要插入的字段，默认所有字段</param>
            <param name="list">实体列表</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.InsertIgnore(XCode.DataAccessLayer.IDataTable,XCode.DataAccessLayer.IDataColumn[],System.Collections.Generic.IEnumerable{NewLife.Data.IModel})">
            <summary>批量忽略插入</summary>
            <param name="table">数据表</param>
            <param name="columns">要插入的字段，默认所有字段</param>
            <param name="list">实体列表</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.Replace(XCode.DataAccessLayer.IDataTable,XCode.DataAccessLayer.IDataColumn[],System.Collections.Generic.IEnumerable{NewLife.Data.IModel})">
            <summary>批量替换</summary>
            <param name="table">数据表</param>
            <param name="columns">要插入的字段，默认所有字段</param>
            <param name="list">实体列表</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.Update(XCode.DataAccessLayer.IDataTable,XCode.DataAccessLayer.IDataColumn[],System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String},System.Collections.Generic.IEnumerable{NewLife.Data.IModel})">
            <summary>批量更新</summary>
            <param name="table">数据表</param>
            <param name="columns">要更新的字段，默认所有字段</param>
            <param name="updateColumns">要更新的字段，默认脏数据</param>
            <param name="addColumns">要累加更新的字段，默认累加</param>
            <param name="list">实体列表</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.Upsert(XCode.DataAccessLayer.IDataTable,XCode.DataAccessLayer.IDataColumn[],System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String},System.Collections.Generic.IEnumerable{NewLife.Data.IModel})">
            <summary>批量插入或更新</summary>
            <param name="table">数据表</param>
            <param name="columns">要插入的字段，默认所有字段</param>
            <param name="updateColumns">主键已存在时，要更新的字段</param>
            <param name="addColumns">主键已存在时，要累加更新的字段</param>
            <param name="list">实体列表</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.Truncate(System.String)">
            <summary>清空数据表，标识归零</summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.GetSchema(System.Data.Common.DbConnection,System.String,System.String[])">
            <summary>返回数据源的架构信息。缓存10分钟</summary>
            <param name="conn">连接</param>
            <param name="collectionName">指定要返回的架构的名称。</param>
            <param name="restrictionValues">为请求的架构指定一组限制值。</param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.DbSession.ShowSQL">
            <summary>是否输出SQL语句，默认为XCode调试开关XCode.Debug</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbSession.Log">
            <summary>日志</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.WriteSQL(System.String)">
            <summary>写入SQL到文本中</summary>
            <param name="sql"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.SetShowSql(System.Boolean)">
            <summary>设置是否显示SQL，退出作用域后恢复</summary>
            <param name="showSql"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.DataAccessLayer.FileDbBase">
            <summary>文件型数据库</summary>
        </member>
        <member name="T:XCode.DataAccessLayer.FileDbSession">
            <summary>文件型数据库会话</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.FileDbSession.FileName">
            <summary>文件</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.FileDbSession.Truncate(System.String)">
            <summary>清空数据表，标识归零</summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.DataAccessLayer.FileDbMetaData">
            <summary>文件型数据库元数据</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.FileDbMetaData.FileName">
            <summary>文件</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.FileDbMetaData.SetSchema(XCode.DataAccessLayer.DDLSchema,System.Object[])">
            <summary>设置数据定义模式</summary>
            <param name="schema"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.FileDbMetaData.CreateDatabase">
            <summary>创建数据库</summary>
        </member>
        <member name="T:XCode.DataAccessLayer.IAsyncDbSession">
            <summary>数据库会话异步接口</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.IAsyncDbSession.QueryAsync(System.String,System.Data.IDataParameter[])">
            <summary>执行SQL查询，返回记录集</summary>
            <param name="sql">SQL语句</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IAsyncDbSession.QueryCountAsync(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行SQL查询，返回总记录数</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>总记录数</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IAsyncDbSession.QueryCountAsync(XCode.DataAccessLayer.SelectBuilder)">
            <summary>执行SQL查询，返回总记录数</summary>
            <param name="builder">查询生成器</param>
            <returns>总记录数</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IAsyncDbSession.QueryCountFastAsync(System.String)">
            <summary>快速查询单表记录数，稍有偏差</summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IAsyncDbSession.ExecuteAsync(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行SQL语句，返回受影响的行数</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IAsyncDbSession.ExecuteAsync(System.Data.Common.DbCommand)">
            <summary>执行DbCommand，返回受影响的行数</summary>
            <param name="cmd">DbCommand</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IAsyncDbSession.InsertAndGetIdentityAsync(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IAsyncDbSession.ExecuteScalarAsync``1(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行SQL语句，返回结果中的第一行第一列</summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="T:XCode.DataAccessLayer.Migration">
            <summary>反向工程</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.Migration.Off">
            <summary>关闭</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.Migration.ReadOnly">
            <summary>只读。异步检查差异，不执行</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.Migration.On">
            <summary>默认。新建表结构</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.Migration.Full">
            <summary>完全。新建、修改、删除</summary>
        </member>
        <member name="T:XCode.DataAccessLayer.NameFormats">
            <summary>名称格式化</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.NameFormats.Default">
            <summary>原样</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.NameFormats.Upper">
            <summary>全大写</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.NameFormats.Lower">
            <summary>全小写</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.NameFormats.Underline">
            <summary>下划线</summary>
        </member>
        <member name="T:XCode.DataAccessLayer.IDatabase">
            <summary>数据库接口</summary>
            <remarks>
            抽象数据库的功能特点。
            对于每一个连接字符串配置，都有一个数据库实例，而不是每个数据库类型一个实例，因为同类型数据库不同版本行为不同。
            </remarks>
        </member>
        <member name="P:XCode.DataAccessLayer.IDatabase.Type">
            <summary>数据库类型</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDatabase.Factory">
            <summary>数据库提供者工厂。支持外部修改</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDatabase.ConnName">
            <summary>链接名</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDatabase.ConnectionString">
            <summary>链接字符串</summary>
            <remarks>内部密码字段已解密</remarks>
        </member>
        <member name="P:XCode.DataAccessLayer.IDatabase.Provider">
            <summary>数据库提供者。用于选择驱动</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDatabase.Owner">
            <summary>拥有者</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDatabase.DatabaseName">
            <summary>数据库名</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDatabase.ServerVersion">
            <summary>数据库服务器版本</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDatabase.ShowSQL">
            <summary>是否输出SQL</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDatabase.UseParameter">
            <summary>参数化添删改查。默认关闭</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDatabase.RetryOnFailure">
            <summary>失败重试。执行命令超时后的重试次数，默认0不重试</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDatabase.Migration">
            <summary>反向工程。Off 关闭；ReadOnly 只读不执行；On 打开，新建；Full 完全，修改删除</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDatabase.NameFormat">
            <summary>表名、字段名大小写设置。（No 保持原样输出、Upper 全大写、Lower全小写）</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDatabase.BatchSize">
            <summary>批大小。用于批量操作数据，默认5000</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDatabase.CommandTimeout">
            <summary>命令超时。查询执行超时时间，默认0秒不限制</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.IDatabase.CreateSession">
            <summary>创建数据库会话</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDatabase.CreateMetaData">
            <summary>创建元数据对象</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDatabase.OpenConnection">
            <summary>创建连接</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDatabase.OpenConnectionAsync">
            <summary>打开连接</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDatabase.Support(System.String)">
            <summary>是否支持该提供者所描述的数据库</summary>
            <param name="providerName">提供者</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDatabase.PageSplit(System.String,System.Int64,System.Int64,System.String)">
            <summary>构造分页SQL</summary>
            <remarks>
            两个构造分页SQL的方法，区别就在于查询生成器能够构造出来更好的分页语句，尽可能的避免子查询。
            MS体系的分页精髓就在于唯一键，当唯一键带有Asc/Desc/Unkown等排序结尾时，就采用最大最小值分页，否则使用较次的TopNotIn分页。
            TopNotIn分页和MaxMin分页的弊端就在于无法完美的支持GroupBy查询分页，只能查到第一页，往后分页就不行了，因为没有主键。
            </remarks>
            <param name="sql">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">唯一键。用于not in分页</param>
            <returns>分页SQL</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDatabase.PageSplit(XCode.DataAccessLayer.SelectBuilder,System.Int64,System.Int64)">
            <summary>构造分页SQL</summary>
            <remarks>
            两个构造分页SQL的方法，区别就在于查询生成器能够构造出来更好的分页语句，尽可能的避免子查询。
            MS体系的分页精髓就在于唯一键，当唯一键带有Asc/Desc/Unkown等排序结尾时，就采用最大最小值分页，否则使用较次的TopNotIn分页。
            TopNotIn分页和MaxMin分页的弊端就在于无法完美的支持GroupBy查询分页，只能查到第一页，往后分页就不行了，因为没有主键。
            </remarks>
            <param name="builder">查询生成器</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>分页SQL</returns>
        </member>
        <member name="P:XCode.DataAccessLayer.IDatabase.LongTextLength">
            <summary>长文本长度</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.IDatabase.FormatDateTime(System.DateTime)">
            <summary>格式化时间为SQL字符串</summary>
            <param name="dateTime">时间值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDatabase.FormatName(System.String)">
            <summary>格式化名称，如果不是关键字，则原样返回</summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDatabase.FormatName(XCode.DataAccessLayer.IDataTable,System.Boolean)">
            <summary>格式化表名，考虑表前缀和Owner</summary>
            <param name="table">表</param>
            <param name="formatKeyword">是否格式化关键字</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDatabase.FormatName(XCode.DataAccessLayer.IDataColumn)">
            <summary>格式化字段名，考虑大小写</summary>
            <param name="column">字段</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDatabase.FormatValue(XCode.DataAccessLayer.IDataColumn,System.Object)">
            <summary>格式化数据为SQL数据</summary>
            <param name="column">字段</param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDatabase.FormatLike(XCode.DataAccessLayer.IDataColumn,System.String,System.String)">
            <summary>格式化模糊搜索的字符串。处理转义字符</summary>
            <param name="column">字段</param>
            <param name="format">格式化字符串</param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDatabase.FormatParameterName(System.String)">
            <summary>格式化参数名</summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDatabase.StringConcat(System.String,System.String)">
            <summary>字符串相加</summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDatabase.CreateParameter(System.String,System.Object,XCode.DataAccessLayer.IDataColumn)">
            <summary>创建参数</summary>
            <param name="name">名称</param>
            <param name="value">值</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDatabase.CreateParameter(System.String,System.Object,System.Type)">
            <summary>创建参数</summary>
            <param name="name">名称</param>
            <param name="value">值</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDatabase.CreateParameters(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>创建参数数组</summary>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDatabase.CreateParameters(System.Object)">
            <summary>根据对象成员创建参数数组</summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.IDatabase.Readonly">
            <summary>本连接数据只读</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDatabase.DataCache">
            <summary>数据层缓存有效期。单位秒</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDatabase.TablePrefix">
            <summary>表前缀。所有在该连接上的表名都自动增加该前缀</summary>
        </member>
        <member name="T:XCode.DataAccessLayer.IDbSession">
            <summary>
            数据库会话接口。
            对应于与数据库的一次会话连接。
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDbSession.Database">
            <summary>数据库</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDbSession.Transaction">
            <summary>数据库事务</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDbSession.ShowSQL">
            <summary>是否输出SQL</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.Process``1(System.Func{System.Data.Common.DbConnection,``0})">
            <summary>打开连接并执行操作</summary>
            <typeparam name="TResult"></typeparam>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.ProcessAsync``1(System.Func{System.Data.Common.DbConnection,System.Threading.Tasks.Task{``0}})">
            <summary>打开连接并执行操作</summary>
            <typeparam name="TResult"></typeparam>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.SetShowSql(System.Boolean)">
            <summary>设置是否显示SQL，退出作用域后恢复</summary>
            <param name="showSql"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.BeginTransaction(System.Data.IsolationLevel)">
            <summary>开始事务</summary>
            <remarks>
            Read Uncommitted: 允许读取脏数据，一个事务能看到另一个事务还没有提交的数据。（不会阻止其它操作）
            Read Committed: 确保事务读取的数据都必须是已经提交的数据。它限制了读取中间的，没有提交的，脏的数据。
            但是它不能确保当事务重新去读取的时候，读的数据跟上次读的数据是一样的，也就是说当事务第一次读取完数据后，
            该数据是可能被其他事务修改的，当它再去读取的时候，数据可能是不一样的。（数据隐藏，不阻止）
            Repeatable Read: 是一个更高级别的隔离级别，如果事务再去读取同样的数据，先前的数据是没有被修改过的。（阻止其它修改）
            Serializable: 它做出了最有力的保证，除了每次读取的数据是一样的，它还确保每次读取没有新的数据。（阻止其它添删改）
            </remarks>
            <param name="level">事务隔离等级</param>
            <returns>剩下的事务计数</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.Commit">
            <summary>提交事务</summary>
            <returns>剩下的事务计数</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.Rollback(System.Boolean)">
            <summary>回滚事务</summary>
            <param name="ignoreException">是否忽略异常</param>
            <returns>剩下的事务计数</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.Query(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行SQL查询，返回记录集</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>记录集</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.Query(System.Data.Common.DbCommand)">
            <summary>执行DbCommand，返回记录集</summary>
            <param name="cmd">DbCommand</param>
            <returns>记录集</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.Query(XCode.DataAccessLayer.SelectBuilder)">
            <summary>执行SQL查询，返回记录集</summary>
            <param name="builder">查询生成器</param>
            <returns>总记录数</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.Query(System.String,System.Data.IDataParameter[])">
            <summary>执行SQL查询，返回记录集</summary>
            <param name="sql">SQL语句</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.QueryCount(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行SQL查询，返回总记录数</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>总记录数</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.QueryCount(XCode.DataAccessLayer.SelectBuilder)">
            <summary>执行SQL查询，返回总记录数</summary>
            <param name="builder">查询生成器</param>
            <returns>总记录数</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.QueryCountFast(System.String)">
            <summary>快速查询单表记录数，稍有偏差</summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.Execute(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行SQL语句，返回受影响的行数</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.Execute(System.Data.Common.DbCommand)">
            <summary>执行DbCommand，返回受影响的行数</summary>
            <param name="cmd">DbCommand</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.InsertAndGetIdentity(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.ExecuteScalar``1(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行SQL语句，返回结果中的第一行第一列</summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.CreateCommand(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>创建DbCommand</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.Insert(XCode.DataAccessLayer.IDataTable,XCode.DataAccessLayer.IDataColumn[],System.Collections.Generic.IEnumerable{NewLife.Data.IModel})">
            <summary>批量插入</summary>
            <param name="table">数据表</param>
            <param name="columns">要插入的字段，默认所有字段</param>
            <param name="list">实体列表</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.InsertIgnore(XCode.DataAccessLayer.IDataTable,XCode.DataAccessLayer.IDataColumn[],System.Collections.Generic.IEnumerable{NewLife.Data.IModel})">
            <summary>批量忽略插入</summary>
            <param name="table">数据表</param>
            <param name="columns">要插入的字段，默认所有字段</param>
            <param name="list">实体列表</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.Replace(XCode.DataAccessLayer.IDataTable,XCode.DataAccessLayer.IDataColumn[],System.Collections.Generic.IEnumerable{NewLife.Data.IModel})">
            <summary>批量替换</summary>
            <param name="table">数据表</param>
            <param name="columns">要插入的字段，默认所有字段</param>
            <param name="list">实体列表</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.Update(XCode.DataAccessLayer.IDataTable,XCode.DataAccessLayer.IDataColumn[],System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String},System.Collections.Generic.IEnumerable{NewLife.Data.IModel})">
            <summary>批量更新</summary>
            <param name="table">数据表</param>
            <param name="columns">要更新的字段，默认所有字段</param>
            <param name="updateColumns">要更新的字段，默认脏数据</param>
            <param name="addColumns">要累加更新的字段，默认累加</param>
            <param name="list">实体列表</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.Upsert(XCode.DataAccessLayer.IDataTable,XCode.DataAccessLayer.IDataColumn[],System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String},System.Collections.Generic.IEnumerable{NewLife.Data.IModel})">
            <summary>批量插入或更新</summary>
            <param name="table">数据表</param>
            <param name="columns">要插入的字段，默认所有字段</param>
            <param name="updateColumns">主键已存在时，要更新的字段</param>
            <param name="addColumns">主键已存在时，要累加更新的字段</param>
            <param name="list">实体列表</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.Truncate(System.String)">
            <summary>清空数据表，标识归零</summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.GetSchema(System.Data.Common.DbConnection,System.String,System.String[])">
            <summary>返回数据源的架构信息</summary>
            <param name="conn">连接</param>
            <param name="collectionName">指定要返回的架构的名称。</param>
            <param name="restrictionValues">为请求的架构指定一组限制值。</param>
            <returns></returns>
        </member>
        <member name="T:XCode.DataAccessLayer.ITransaction">
            <summary>事务对象</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.ITransaction.Level">
            <summary>事务隔离级别</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.ITransaction.Count">
            <summary>事务计数。当且仅当事务计数等于1时，才提交或回滚。</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.ITransaction.Executes">
            <summary>执行次数。其决定是否更新缓存</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.ITransaction.Tran">
            <summary>数据库事务</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.ITransaction.Check(System.Data.Common.DbCommand,System.Boolean)">
            <summary>获取事务</summary>
            <param name="cmd">命令</param>
            <param name="execute">是否执行增删改</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.ITransaction.Begin">
            <summary>增加事务计数</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.ITransaction.Commit">
            <summary>提交事务</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.ITransaction.Rollback">
            <summary>回滚事务</summary>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.Transaction.Count">
            <summary>事务嵌套层数</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.Transaction.Executes">
            <summary>执行次数。其决定是否更新缓存</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.Transaction.ID">
            <summary>事务唯一编号</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.Transaction.Conn">
            <summary>连接对象</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.Transaction.Tran">
            <summary>数据库事务。首次使用打开事务</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.Transaction.Check(System.Data.Common.DbCommand,System.Boolean)">
            <summary>给命令设置事务和连接</summary>
            <param name="cmd">命令</param>
            <param name="execute">是否执行增删改</param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.Transaction.Tracer">
            <summary>链路追踪</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.Transaction.Log">
            <summary>日志</summary>
        </member>
        <member name="T:XCode.DataAccessLayer.RemoteDb">
            <summary>远程数据库。一般是分为客户端服务器的中大型数据库，该类数据库支持完整的SQL92</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.RemoteDb.SystemDatabaseName">
            <summary>系统数据库名</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.RemoteDb.User">
            <summary>用户名UserID</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.RemoteDb.PageSplit(System.String,System.Int64,System.Int64,System.String)">
            <summary>已重写。获取分页</summary>
            <param name="sql">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">主键列。用于not in分页</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.RemoteDb.PageSplit(XCode.DataAccessLayer.SelectBuilder,System.Int64,System.Int64)">
            <summary>构造分页SQL</summary>
            <param name="builder">查询生成器</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>分页SQL</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.RemoteDb.PageSplitByLimit(System.String,System.Int64,System.Int64)">
            <summary>已重写。获取分页</summary>
            <param name="sql">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.RemoteDb.PageSplitByLimit(XCode.DataAccessLayer.SelectBuilder,System.Int64,System.Int64)">
            <summary>构造分页SQL</summary>
            <param name="builder">查询生成器</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>分页SQL</returns>
        </member>
        <member name="T:XCode.DataAccessLayer.RemoteDbSession">
            <summary>远程数据库会话</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.RemoteDbSession.SystemDatabaseName">
            <summary>系统数据库名</summary>
        </member>
        <member name="T:XCode.DataAccessLayer.RemoteDbMetaData">
            <summary>远程数据库元数据</summary>
        </member>
        <member name="T:XCode.DataAccessLayer.DAL">
            <summary>数据访问层</summary>
            <remarks>
            主要用于选择不同的数据库，不同的数据库的操作有所差别。
            每一个数据库链接字符串，对应唯一的一个DAL实例。
            数据库链接字符串可以写在配置文件中，然后在Create时指定名字；
            也可以直接把链接字符串作为AddConnStr的参数传入。
            </remarks>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.ConnName">
            <summary>连接名</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.ProviderType">
            <summary>实现了IDatabase接口的数据库类型</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.DbType">
            <summary>数据库类型</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.ConnStr">
            <summary>连接字符串</summary>
            <remarks>
            内部密码字段可能处于加密状态。
            修改连接字符串将会清空<see cref="P:XCode.DataAccessLayer.DAL.Db"/>
            </remarks>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.ProtectedKey">
            <summary>数据保护者</summary>
            <remarks>
            用于保护连接字符串中的密码字段，在向IDatabase设置连接字符串前解密。
            默认保护密码可通过环境变量或者配置文件的ProtectedKey项进行设置。
            </remarks>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.Db">
            <summary>数据库。所有数据库操作在此统一管理，强烈建议不要直接使用该属性，在不同版本中IDatabase可能有较大改变</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.Session">
            <summary>数据库会话</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.AsyncSession">
            <summary>数据库会话。为异步操作而准备，将来可能移除</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.#ctor(System.String)">
            <summary>构造函数</summary>
            <param name="connName">配置名</param>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Create(System.String)">
            <summary>创建一个数据访问层对象。</summary>
            <param name="connName">配置名</param>
            <returns>对应于指定链接的全局唯一的数据访问层对象</returns>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.ConnStrs">
            <summary>链接字符串集合</summary>
            <remarks>
            如果需要添加连接字符串，应该使用AddConnStr，MapTo连接字符串除外（可以直接ConnStrs.TryAdd添加）；
            如果需要修改一个DAL的连接字符串，不应该修改这里，而是修改DAL实例的<see cref="P:XCode.DataAccessLayer.DAL.ConnStr"/>属性。
            </remarks>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.AddConnStr(System.String,System.String,System.Type,System.String)">
            <summary>添加连接字符串</summary>
            <param name="connName">连接名</param>
            <param name="connStr">连接字符串</param>
            <param name="type">实现了IDatabase接口的数据库类型</param>
            <param name="provider">数据库提供者，如果没有指定数据库类型，则有提供者判断使用哪一种内置类型</param>
        </member>
        <member name="E:XCode.DataAccessLayer.DAL.OnResolve">
            <summary>找不到连接名时调用。支持用户自定义默认连接</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.GetConfig">
            <summary>获取连接字符串的委托。可以二次包装在连接名前后加上标识，存放在配置中心</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.SetConfig(NewLife.Configuration.IConfigProvider)">
            <summary>设置配置提供者。可对接配置中心，DAL内部自动从内置对象容器中取得星尘配置提供者</summary>
            <param name="configProvider"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.GetFromConfigCenter(System.String)">
            <summary>从配置中心加载连接字符串，并支持定时刷新</summary>
            <param name="connName"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.EncodeConnStr(System.String)">
            <summary>连接字符串编码</summary>
            <remarks>明文=>UTF8字节=>Base64</remarks>
            <param name="connstr"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.DecodeConnStr(System.String)">
            <summary>连接字符串解码</summary>
            <remarks>Base64=>UTF8字节=>明文</remarks>
            <param name="connstr"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.Tables">
            <summary>取得所有表和视图的构架信息（异步缓存延迟1秒）。设为null可清除缓存</summary>
            <remarks>
            如果不存在缓存，则获取后返回；否则使用线程池线程获取，而主线程返回缓存。
            </remarks>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.TableNames">
            <summary>
            获取所有表名，带缓存，不区分大小写
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.GetTableNames">
            <summary>
            快速获取所有表名，无缓存，区分大小写
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Export">
            <summary>导出模型</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Export(System.Collections.Generic.IEnumerable{XCode.DataAccessLayer.IDataTable})">
            <summary>导出模型</summary>
            <param name="tables"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Import(System.String)">
            <summary>导入模型</summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.ImportFrom(System.String)">
            <summary>导入模型文件</summary>
            <param name="xmlFile"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.CheckDatabase">
            <summary>检查数据库，建库建表加字段</summary>
            <remarks>不阻塞，可能第一个线程正在检查表架构，别的线程已经开始使用数据库了</remarks>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.CheckAndAdd(System.String)">
            <summary>检查是否已存在，如果不存在则添加</summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.CheckTables">
            <summary>检查所有数据表，建表加字段</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.SetTables(XCode.DataAccessLayer.IDataTable[])">
            <summary>检查指定数据表，建表加字段</summary>
            <param name="tables"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.GetCreateTableSql(XCode.DataAccessLayer.IDataTable[])">
            <summary>获取建表语句</summary>
            <param name="tables"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Backup(XCode.DataAccessLayer.IDataTable,System.IO.Stream)">
            <summary>备份单表数据</summary>
            <remarks>
            最大支持21亿行
            </remarks>
            <param name="table">数据表</param>
            <param name="stream">目标数据流</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Backup(XCode.DataAccessLayer.IDataTable,System.String)">
            <summary>备份单表数据到文件</summary>
            <param name="table">数据表</param>
            <param name="file">文件。.gz后缀时采用压缩</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.BackupAll(System.Collections.Generic.IList{XCode.DataAccessLayer.IDataTable},System.String,System.Boolean,System.Boolean)">
            <summary>备份一批表到指定压缩文件</summary>
            <param name="tables">数据表集合</param>
            <param name="file">zip压缩文件</param>
            <param name="backupSchema">备份架构</param>
            <param name="ignoreError">忽略错误，继续恢复下一张表</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Restore(System.IO.Stream,XCode.DataAccessLayer.IDataTable)">
            <summary>从数据流恢复数据</summary>
            <param name="stream">数据流</param>
            <param name="table">数据表</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Restore(System.String,XCode.DataAccessLayer.IDataTable,System.Boolean)">
            <summary>从文件恢复数据</summary>
            <param name="file">zip压缩文件</param>
            <param name="table">数据表</param>
            <param name="setSchema">是否设置数据表模型，自动建表</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.RestoreAll(System.String,XCode.DataAccessLayer.IDataTable[],System.Boolean,System.Boolean)">
            <summary>从指定压缩文件恢复一批数据到目标库</summary>
            <param name="file">zip压缩文件</param>
            <param name="tables">数据表。为空时从压缩包读取xml模型文件</param>
            <param name="setSchema">是否设置数据表模型，自动建表</param>
            <param name="ignoreError">忽略错误，继续下一张表</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Sync(XCode.DataAccessLayer.IDataTable,System.String,System.Boolean)">
            <summary>同步单表数据</summary>
            <remarks>
            把数据同一张表同步到另一个库
            </remarks>
            <param name="table">数据表</param>
            <param name="connName">目标连接名</param>
            <param name="syncSchema">同步架构</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.SyncAll(XCode.DataAccessLayer.IDataTable[],System.String,System.Boolean,System.Boolean)">
            <summary>备份一批表到另一个库</summary>
            <param name="tables">表名集合</param>
            <param name="connName">目标连接名</param>
            <param name="syncSchema">同步架构</param>
            <param name="ignoreError">忽略错误，继续下一张表</param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.QueryTimes">
            <summary>查询次数</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.ExecuteTimes">
            <summary>执行次数</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.ReadOnly">
            <summary>只读实例。读写分离时，读取操作分走</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.Strategy">
            <summary>读写分离策略。忽略时间区间和表名</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.PageSplit(XCode.DataAccessLayer.SelectBuilder,System.Int64,System.Int64)">
            <summary>根据条件把普通查询SQL格式化为分页SQL。</summary>
            <param name="builder">查询生成器</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>分页SQL</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Select(System.String)">
            <summary>执行SQL查询，返回记录集</summary>
            <param name="sql">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Select(XCode.DataAccessLayer.SelectBuilder,System.Int64,System.Int64)">
            <summary>执行SQL查询，返回记录集</summary>
            <param name="builder">SQL语句</param> 
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Query(XCode.DataAccessLayer.SelectBuilder,System.Int64,System.Int64)">
            <summary>执行SQL查询，返回记录集</summary>
            <param name="builder">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Query(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>执行SQL查询，返回记录集</summary>
            <param name="sql">SQL语句</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.SelectCount(XCode.DataAccessLayer.SelectBuilder)">
            <summary>执行SQL查询，返回总记录数</summary>
            <param name="sb">查询生成器</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.SelectCount(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行SQL查询，返回总记录数</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Execute(System.String)">
            <summary>执行SQL语句，返回受影响的行数</summary>
            <param name="sql">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.InsertAndGetIdentity(System.String)">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql"></param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Select(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行SQL查询，返回记录集</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Execute(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行SQL语句，返回受影响的行数</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.InsertAndGetIdentity(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql"></param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Select(System.String,System.Data.CommandType,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>执行SQL查询，返回记录集</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Execute(System.String,System.Data.CommandType,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>执行SQL语句，返回受影响的行数</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Execute(System.String,System.Int32)">
            <summary>执行SQL语句，返回受影响的行数</summary>
            <param name="sql">SQL语句</param>
            <param name="commandTimeout">命令超时时间，一般用于需要长时间执行的命令。单位秒</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.ExecuteScalar``1(System.String,System.Data.CommandType,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>执行SQL语句，返回结果中的第一行第一列</summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.QueryAsync(XCode.DataAccessLayer.SelectBuilder,System.Int64,System.Int64)">
            <summary>执行SQL查询，返回记录集</summary>
            <param name="builder">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.QueryAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>执行SQL查询，返回记录集</summary>
            <param name="sql">SQL语句</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.SelectCountAsync(XCode.DataAccessLayer.SelectBuilder)">
            <summary>执行SQL查询，返回总记录数</summary>
            <param name="sb">查询生成器</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.SelectCountAsync(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行SQL查询，返回总记录数</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.ExecuteAsync(System.String)">
            <summary>执行SQL语句，返回受影响的行数</summary>
            <param name="sql">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.InsertAndGetIdentityAsync(System.String)">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql"></param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.ExecuteAsync(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行SQL语句，返回受影响的行数</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.InsertAndGetIdentityAsync(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql"></param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.ExecuteAsync(System.String,System.Data.CommandType,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>执行SQL语句，返回受影响的行数</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.ExecuteAsync(System.String,System.Int32)">
            <summary>执行SQL语句，返回受影响的行数</summary>
            <param name="sql">SQL语句</param>
            <param name="commandTimeout">命令超时时间，一般用于需要长时间执行的命令</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.ExecuteScalarAsync``1(System.String,System.Data.CommandType,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>执行SQL语句，返回结果中的第一行第一列</summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.BeginTransaction(System.Data.IsolationLevel)">
            <summary>开始事务</summary>
            <remarks>
            Read Uncommitted: 允许读取脏数据，一个事务能看到另一个事务还没有提交的数据。（不会阻止其它操作）
            Read Committed: 确保事务读取的数据都必须是已经提交的数据。它限制了读取中间的，没有提交的，脏的数据。
            但是它不能确保当事务重新去读取的时候，读的数据跟上次读的数据是一样的，也就是说当事务第一次读取完数据后，
            该数据是可能被其他事务修改的，当它再去读取的时候，数据可能是不一样的。（数据隐藏，不阻止）
            Repeatable Read: 是一个更高级别的隔离级别，如果事务再去读取同样的数据，先前的数据是没有被修改过的。（阻止其它修改）
            Serializable: 它做出了最有力的保证，除了每次读取的数据是一样的，它还确保每次读取没有新的数据。（阻止其它添删改）
            </remarks>
            <param name="level">事务隔离等级</param>
            <returns>剩下的事务计数</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Commit">
            <summary>提交事务</summary>
            <returns>剩下的事务计数</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Rollback">
            <summary>回滚事务，忽略异常</summary>
            <returns>剩下的事务计数</returns>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.Store">
            <summary>缓存存储</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.Expire">
            <summary>数据层缓存。默认10秒</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.SetSpanTag(System.String)">
            <summary>埋点上下文信息。用于附加在埋点标签后的上下文信息</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.GetTables(System.String,System.Boolean)">
            <summary>从Sql语句中截取表名</summary>
            <param name="sql">Sql语句</param>
            <param name="trimShard">是否去掉表名后面的分表信息。如日期分表</param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.GetTableName">
            <summary>根据实体类获取表名的委托，用于Mapper的Insert/Update</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.GetKeyName">
            <summary>根据实体类获取主键名的委托，用于Mapper的Update</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Query``1(System.String,System.Object)">
            <summary>查询Sql并映射为结果集</summary>
            <typeparam name="T">实体类</typeparam>
            <param name="sql">Sql语句</param>
            <param name="param">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Query``1(System.String,System.Object,System.Int64,System.Int64)">
            <summary>查询Sql并映射为结果集，支持分页</summary>
            <typeparam name="T">实体类</typeparam>
            <param name="sql">Sql语句</param>
            <param name="param">参数对象</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Query``1(System.String,System.Object,NewLife.Data.PageParameter)">
            <summary>查询Sql并映射为结果集，支持分页</summary>
            <typeparam name="T">实体类</typeparam>
            <param name="sql">Sql语句</param>
            <param name="param">参数对象</param>
            <param name="page">分页参数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.QuerySingle``1(System.String,System.Object)">
            <summary>查询Sql并返回单个结果</summary>
            <typeparam name="T">实体类</typeparam>
            <param name="sql">Sql语句</param>
            <param name="param">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.QueryAsync``1(System.String,System.Object)">
            <summary>查询Sql并映射为结果集</summary>
            <typeparam name="T">实体类</typeparam>
            <param name="sql">Sql语句</param>
            <param name="param">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.QuerySingleAsync``1(System.String,System.Object)">
            <summary>查询Sql并返回单个结果</summary>
            <typeparam name="T">实体类</typeparam>
            <param name="sql">Sql语句</param>
            <param name="param">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Execute(System.String,System.Object)">
            <summary>执行Sql</summary>
            <param name="sql">Sql语句</param>
            <param name="param">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.ExecuteReader(System.String,System.Object)">
            <summary>执行Sql并返回数据读取器</summary>
            <param name="sql"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.ExecuteScalar``1(System.String,System.Object)">
            <summary>执行SQL语句，返回结果中的第一行第一列</summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="param">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.ExecuteAsync(System.String,System.Object)">
            <summary>执行Sql</summary>
            <param name="sql">Sql语句</param>
            <param name="param">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.ExecuteReaderAsync(System.String,System.Object)">
            <summary>执行Sql并返回数据读取器</summary>
            <param name="sql"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.ExecuteScalarAsync``1(System.String,System.Object)">
            <summary>执行SQL语句，返回结果中的第一行第一列</summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="param">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Insert(System.Object,System.String)">
            <summary>插入数据</summary>
            <param name="data">实体对象</param>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Insert(NewLife.Data.DbTable,XCode.DataAccessLayer.IDataTable,XCode.DataAccessLayer.IDataColumn[],XCode.DataAccessLayer.SaveModes)">
            <summary>插入数据表。多行数据循环插入，非批量</summary>
            <param name="table">表定义</param>
            <param name="columns">字段列表，为空表示所有字段</param>
            <param name="data">数据对象</param>
            <param name="mode">保存模式，默认Insert</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Insert(NewLife.Data.IModel,XCode.DataAccessLayer.IDataTable,XCode.DataAccessLayer.IDataColumn[],XCode.DataAccessLayer.SaveModes)">
            <summary>插入数据行</summary>
            <param name="table">表定义</param>
            <param name="columns">字段列表，为空表示所有字段</param>
            <param name="data">数据对象</param>
            <param name="mode">保存模式，默认Insert</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Update(System.Object,System.Object,System.String)">
            <summary>更新数据。不支持自动识别主键</summary>
            <param name="data">实体对象</param>
            <param name="where">查询条件。默认使用Id字段</param>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Delete(System.String,System.Object)">
            <summary>删除数据</summary>
            <param name="tableName">表名</param>
            <param name="where">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.InsertAsync(System.Object,System.String)">
            <summary>插入数据</summary>
            <param name="data">实体对象</param>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.UpdateAsync(System.Object,System.Object,System.String)">
            <summary>更新数据。不支持自动识别主键</summary>
            <param name="data">实体对象</param>
            <param name="where">查询条件。默认使用Id字段</param>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.DeleteAsync(System.String,System.Object)">
            <summary>删除数据</summary>
            <param name="tableName">表名</param>
            <param name="where">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Insert(System.String,System.Object)">
            <summary>插入数据</summary>
            <param name="tableName"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Update(System.String,System.Object,System.Object)">
            <summary>更新数据</summary>
            <param name="tableName"></param>
            <param name="data"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.Debug">
            <summary>是否调试</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.WriteLog(System.String,System.Object[])">
            <summary>输出日志</summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.WriteDebugLog(System.String,System.Object[])">
            <summary>输出日志</summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.LocalFilter">
            <summary>本地过滤器（本线程SQL拦截）</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.Tracer">
            <summary>APM跟踪器</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.GlobalTracer">
            <summary>全局APM跟踪器</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.CreateTable">
            <summary>建立数据表对象</summary>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.SupportBatch">
            <summary>是否支持批操作</summary>
            <returns></returns>
        </member>
        <member name="T:XCode.DataAccessLayer.GetNameCallback">
            <summary>根据实体类获取表名或主键名的委托</summary>
            <param name="entityType">实体类</param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.Access.Type">
            <summary>返回数据库类型。外部DAL数据库类请使用Other</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.Access.CreateFactory">
            <summary>创建工厂</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Access.OnCreateSession">
            <summary>创建数据库会话</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Access.OnCreateMetaData">
            <summary>创建元数据对象</summary>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.Access.LongTextLength">
            <summary>长文本长度</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.Access.FormatDateTime(System.DateTime)">
            <summary>格式化时间为SQL字符串</summary>
            <param name="dateTime">时间值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Access.FormatKeyWord(System.String)">
            <summary>格式化关键字</summary>
            <param name="keyWord">关键字</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Access.FormatValue(XCode.DataAccessLayer.IDataColumn,System.Object)">
            <summary>格式化数据为SQL数据</summary>
            <param name="field">字段</param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Access.PageSplit(System.String,System.Int64,System.Int64,System.String)">
            <summary>构造分页SQL</summary>
            <param name="sql">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">唯一键。用于not in分页</param>
            <returns>分页SQL</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Access.CheckSupport">
            <summary>是否支持</summary>
        </member>
        <member name="T:XCode.DataAccessLayer.AccessSession">
            <summary>Access数据库</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.AccessSession.InsertAndGetIdentity(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="T:XCode.DataAccessLayer.AccessMetaData">
            <summary>Access元数据</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.AccessMetaData.GetTableNames">
            <summary>
            快速取得所有表名
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.AccessMetaData.GetIndexes(XCode.DataAccessLayer.IDataTable,System.Data.DataTable,System.Data.DataTable)">
            <summary>获取索引</summary>
            <param name="table"></param>
            <param name="indexes">索引</param>
            <param name="indexColumns">索引列</param>
            <returns></returns>
        </member>
        <member name="F:XCode.DataAccessLayer.AccessMetaData._DataTypes">
            <summary>数据类型映射</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DaMeng.Type">
            <summary>返回数据库类型。外部DAL数据库类请使用Other</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DaMeng.CreateFactory">
            <summary>创建工厂</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DaMeng.OnCreateSession">
            <summary>创建数据库会话</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DaMeng.OnCreateMetaData">
            <summary>创建元数据对象</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DaMeng.StringConcat(System.String,System.String)">
            <summary>字符串相加</summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DaMeng.CreateParameter(System.String,System.Object,System.Type)">
            <summary>创建参数</summary>
            <param name="name">名称</param>
            <param name="value">值</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DaMeng.FormatKeyWord(System.String)">
            <summary>格式化关键字</summary>
            <param name="keyWord">表名</param>
            <returns></returns>
        </member>
        <member name="T:XCode.DataAccessLayer.DaMengSession">
            <summary>DaMeng数据库</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DaMengSession.QueryCountFast(System.String)">
            <summary>快速查询单表记录数，稍有偏差</summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DaMengSession.InsertAndGetIdentity(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DaMengSession.OnCreateCommand(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>重载支持批量操作</summary>
            <param name="sql"></param>
            <param name="type"></param>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.DataAccessLayer.DaMengMeta">
            <summary>DaMeng元数据</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DaMengMeta.Owner">
            <summary>拥有者</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DaMengMeta.UserID">
            <summary>用户名</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DaMengMeta.OnGetTables(System.String[])">
            <summary>取得所有表构架</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DaMengMeta.GetTableNames">
            <summary>
            快速取得所有表名
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DaMengMeta.GetFields(XCode.DataAccessLayer.IDataTable,System.Data.DataTable,System.Collections.Generic.IDictionary{System.String,System.Data.DataTable})">
            <summary>取得指定表的所有列构架</summary>
            <param name="table"></param>
            <param name="columns">列</param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="F:XCode.DataAccessLayer.DaMengMeta._DataTypes">
            <summary>数据类型映射</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DB2.Type">
            <summary>返回数据库类型。外部DAL数据库类请使用Other</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DB2.CreateFactory">
            <summary>创建工厂</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DB2.OnCreateSession">
            <summary>创建数据库会话</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DB2.OnCreateMetaData">
            <summary>创建元数据对象</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DB2.PageSplit(System.String,System.Int64,System.Int64,System.String)">
            <summary>已重写。获取分页 2012.9.26 HUIYUE修正分页BUG</summary>
            <param name="sql">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">主键列。用于not in分页</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DB2.PageSplit(XCode.DataAccessLayer.SelectBuilder,System.Int64,System.Int64)">
            <summary>构造分页SQL</summary>
            <remarks>
            两个构造分页SQL的方法，区别就在于查询生成器能够构造出来更好的分页语句，尽可能的避免子查询。
            MS体系的分页精髓就在于唯一键，当唯一键带有Asc/Desc/Unkown等排序结尾时，就采用最大最小值分页，否则使用较次的TopNotIn分页。
            TopNotIn分页和MaxMin分页的弊端就在于无法完美的支持GroupBy查询分页，只能查到第一页，往后分页就不行了，因为没有主键。
            </remarks>
            <param name="builder">查询生成器</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>分页SQL</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DB2.FormatDateTime(System.DateTime)">
            <summary>已重载。格式化时间</summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DB2.StringConcat(System.String,System.String)">
            <summary>字符串相加</summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DB2.CreateParameter(System.String,System.Object,System.Type)">
            <summary>创建参数</summary>
            <param name="name">名称</param>
            <param name="value">值</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DB2.FormatKeyWord(System.String)">
            <summary>格式化关键字</summary>
            <param name="keyWord">表名</param>
            <returns></returns>
        </member>
        <member name="T:XCode.DataAccessLayer.DB2Session">
            <summary>DB2数据库</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DB2Session.QueryCountFast(System.String)">
            <summary>快速查询单表记录数，稍有偏差</summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DB2Session.InsertAndGetIdentity(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DB2Session.OnCreateCommand(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>重载支持批量操作</summary>
            <param name="sql"></param>
            <param name="type"></param>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.DataAccessLayer.DB2Meta">
            <summary>DB2元数据</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DB2Meta.Owner">
            <summary>拥有者</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DB2Meta.UserID">
            <summary>用户名</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DB2Meta.OnGetTables(System.String[])">
            <summary>取得所有表构架</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DB2Meta.GetTableNames">
            <summary>
            快速取得所有表名
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DB2Meta.GetFields(XCode.DataAccessLayer.IDataTable,System.Data.DataTable,System.Collections.Generic.IDictionary{System.String,System.Data.DataTable})">
            <summary>取得指定表的所有列构架</summary>
            <param name="table"></param>
            <param name="columns">列</param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="F:XCode.DataAccessLayer.DB2Meta._DataTypes">
            <summary>数据类型映射</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DB2Meta.GetDefault(XCode.DataAccessLayer.IDataColumn,System.Boolean)">
            <summary>默认值</summary>
            <param name="field"></param>
            <param name="onlyDefine"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.Hana.Type">
            <summary>返回数据库类型。</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.Hana.CreateFactory">
            <summary>创建工厂</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Hana.OnCreateSession">
            <summary>创建数据库会话</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Hana.OnCreateMetaData">
            <summary>创建元数据对象</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Hana.FormatKeyWord(System.String)">
            <summary>格式化关键字</summary>
            <param name="keyWord">关键字</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Hana.FormatValue(XCode.DataAccessLayer.IDataColumn,System.Object)">
            <summary>格式化数据为SQL数据</summary>
            <param name="field">字段</param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Hana.FormatLike(XCode.DataAccessLayer.IDataColumn,System.String,System.String)">
            <summary>格式化模糊搜索的字符串。处理转义字符</summary>
            <param name="column">字段</param>
            <param name="format">格式化字符串</param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.Hana.LongTextLength">
            <summary>长文本长度</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.Hana.CreateParameter(System.String,System.Object,System.Type)">
            <summary>创建参数</summary>
            <param name="name">名称</param>
            <param name="value">值</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.Hana.SystemDatabaseName">
            <summary>系统数据库名</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.Hana.StringConcat(System.String,System.String)">
            <summary>字符串相加</summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.Hana.EnumTables">
            <summary>采用枚举来表示布尔型的数据表。由正向工程赋值</summary>
        </member>
        <member name="T:XCode.DataAccessLayer.HanaSession">
            <summary>Hana数据库</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.HanaSession.QueryCountFast(System.String)">
            <summary>快速查询单表记录数，大数据量时，稍有偏差。</summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.HanaSession.Query(XCode.DataAccessLayer.SelectBuilder)">
            <summary>执行SQL查询，返回记录集</summary>
            <param name="builder">查询生成器</param>
            <returns>总记录数</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.HanaSession.InsertAndGetIdentity(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="T:XCode.DataAccessLayer.HanaMetaData">
            <summary>Hana元数据</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.HanaMetaData._DataTypes">
            <summary>数据类型映射</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.HanaMetaData.GetTableNames">
            <summary>
            快速取得所有表名
            </summary>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.MySql.Type">
            <summary>返回数据库类型。</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.MySql.CreateFactory">
            <summary>创建工厂</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.MySql.OnCreateSession">
            <summary>创建数据库会话</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.MySql.OnCreateMetaData">
            <summary>创建元数据对象</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.MySql.FormatKeyWord(System.String)">
            <summary>格式化关键字</summary>
            <param name="keyWord">关键字</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.MySql.FormatValue(XCode.DataAccessLayer.IDataColumn,System.Object)">
            <summary>格式化数据为SQL数据</summary>
            <param name="field">字段</param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.MySql.FormatLike(XCode.DataAccessLayer.IDataColumn,System.String,System.String)">
            <summary>格式化模糊搜索的字符串。处理转义字符</summary>
            <param name="column">字段</param>
            <param name="format">格式化字符串</param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.MySql.LongTextLength">
            <summary>长文本长度</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.MySql.CreateParameter(System.String,System.Object,System.Type)">
            <summary>创建参数</summary>
            <param name="name">名称</param>
            <param name="value">值</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.MySql.SystemDatabaseName">
            <summary>系统数据库名</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.MySql.StringConcat(System.String,System.String)">
            <summary>字符串相加</summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.MySql.EnumTables">
            <summary>采用枚举来表示布尔型的数据表。由正向工程赋值</summary>
        </member>
        <member name="T:XCode.DataAccessLayer.MySqlSession">
            <summary>MySql数据库</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.MySqlSession.QueryCountFast(System.String)">
            <summary>快速查询单表记录数，大数据量时，稍有偏差。</summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.MySqlSession.Query(XCode.DataAccessLayer.SelectBuilder)">
            <summary>执行SQL查询，返回记录集</summary>
            <param name="builder">查询生成器</param>
            <returns>总记录数</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.MySqlSession.InsertAndGetIdentity(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="T:XCode.DataAccessLayer.MySqlMetaData">
            <summary>MySql元数据</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.MySqlMetaData._DataTypes">
            <summary>数据类型映射</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.MySqlMetaData.GetTableNames">
            <summary>
            快速取得所有表名
            </summary>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.Oracle.Type">
            <summary>返回数据库类型。外部DAL数据库类请使用Other</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.Oracle.CreateFactory">
            <summary>创建工厂</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Oracle.#ctor">
            <summary>实例化</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.Oracle.OnCreateSession">
            <summary>创建数据库会话</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Oracle.OnCreateMetaData">
            <summary>创建元数据对象</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Oracle.PageSplit(System.String,System.Int64,System.Int64,System.String)">
            <summary>已重写。获取分页 2012.9.26 HUIYUE修正分页BUG</summary>
            <param name="sql">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">主键列。用于not in分页</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Oracle.PageSplit(XCode.DataAccessLayer.SelectBuilder,System.Int64,System.Int64)">
            <summary>构造分页SQL</summary>
            <remarks>
            两个构造分页SQL的方法，区别就在于查询生成器能够构造出来更好的分页语句，尽可能的避免子查询。
            MS体系的分页精髓就在于唯一键，当唯一键带有Asc/Desc/Unkown等排序结尾时，就采用最大最小值分页，否则使用较次的TopNotIn分页。
            TopNotIn分页和MaxMin分页的弊端就在于无法完美的支持GroupBy查询分页，只能查到第一页，往后分页就不行了，因为没有主键。
            </remarks>
            <param name="builder">查询生成器</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>分页SQL</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Oracle.FormatDateTime(System.DateTime)">
            <summary>已重载。格式化时间</summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Oracle.StringConcat(System.String,System.String)">
            <summary>字符串相加</summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Oracle.CreateParameter(System.String,System.Object,System.Type)">
            <summary>创建参数</summary>
            <param name="name">名称</param>
            <param name="value">值</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Oracle.FormatKeyWord(System.String)">
            <summary>格式化关键字</summary>
            <param name="keyWord">表名</param>
            <returns></returns>
        </member>
        <member name="T:XCode.DataAccessLayer.OracleSession">
            <summary>Oracle数据库</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.OracleSession.Query(XCode.DataAccessLayer.SelectBuilder)">
            <summary>执行SQL查询，返回记录集</summary>
            <param name="builder">查询生成器</param>
            <returns>总记录数</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.OracleSession.QueryCountFast(System.String)">
            <summary>快速查询单表记录数，稍有偏差</summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.OracleSession.InsertAndGetIdentity(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.OracleSession.QueryAsync(System.String,System.Data.IDataParameter[])">
            <summary>执行SQL查询，返回记录集</summary>
            <param name="sql">SQL语句</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.OracleSession.OnCreateCommand(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>重载支持批量操作</summary>
            <param name="sql"></param>
            <param name="type"></param>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.DataAccessLayer.OracleMeta">
            <summary>Oracle元数据</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.OracleMeta.Owner">
            <summary>拥有者</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.OracleMeta.UserID">
            <summary>用户名</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.OracleMeta.OnGetTables(System.String[])">
            <summary>取得所有表构架</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.OracleMeta.GetTableNames">
            <summary>
            快速取得所有表名
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.OracleMeta.GetFields(XCode.DataAccessLayer.IDataTable,System.Data.DataTable,System.Collections.Generic.IDictionary{System.String,System.Data.DataTable})">
            <summary>取得指定表的所有列构架</summary>
            <param name="table"></param>
            <param name="columns">列</param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="F:XCode.DataAccessLayer.OracleMeta._DataTypes">
            <summary>数据类型映射</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.OracleMeta.GetDefault(XCode.DataAccessLayer.IDataColumn,System.Boolean)">
            <summary>默认值</summary>
            <param name="field"></param>
            <param name="onlyDefine"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.PostgreSQL.Type">
            <summary>返回数据库类型。</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.PostgreSQL.CreateFactory">
            <summary>创建工厂</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.PostgreSQL.OnCreateSession">
            <summary>创建数据库会话</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.PostgreSQL.OnCreateMetaData">
            <summary>创建元数据对象</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.PostgreSQL.FormatKeyWord(System.String)">
            <summary>格式化关键字</summary>
            <param name="keyWord">关键字</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.PostgreSQL.FormatValue(XCode.DataAccessLayer.IDataColumn,System.Object)">
            <summary>格式化数据为SQL数据</summary>
            <param name="field">字段</param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.PostgreSQL.LongTextLength">
            <summary>长文本长度</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.PostgreSQL.SystemDatabaseName">
            <summary>系统数据库名</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.PostgreSQL.StringConcat(System.String,System.String)">
            <summary>字符串相加</summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.PostgreSQL.FormatName(System.String)">
            <summary>
            格式化数据库名称，表名称，字段名称 增加双引号（""）
            PGSQL 默认情况下创建库表时自动转为小写，增加引号强制区分大小写
            以解决数据库创建查询时大小写问题
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.PostgreSQL.PageSplit(System.String,System.Int64,System.Int64,System.String)">
            <summary>已重写。获取分页</summary>
            <param name="sql">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">主键列。用于not in分页</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.PostgreSQL.PageSplit(XCode.DataAccessLayer.SelectBuilder,System.Int64,System.Int64)">
            <summary>构造分页SQL</summary>
            <param name="builder">查询生成器</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>分页SQL</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.PostgreSQL.PageSplitByOffsetLimit(System.String,System.Int64,System.Int64)">
            <summary>已重写。获取分页</summary>
            <param name="sql">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.PostgreSQL.PageSplitByOffsetLimit(XCode.DataAccessLayer.SelectBuilder,System.Int64,System.Int64)">
            <summary>构造分页SQL</summary>
            <param name="builder">查询生成器</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>分页SQL</returns>
        </member>
        <member name="T:XCode.DataAccessLayer.PostgreSQLSession">
            <summary>PostgreSQL数据库</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.PostgreSQLSession.Query(XCode.DataAccessLayer.SelectBuilder)">
            <summary>执行SQL查询，返回记录集</summary>
            <param name="builder">查询生成器</param>
            <returns>总记录数</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.PostgreSQLSession.InsertAndGetIdentity(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="T:XCode.DataAccessLayer.PostgreSQLMetaData">
            <summary>PostgreSQL元数据</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.PostgreSQLMetaData._DataTypes">
            <summary>数据类型映射</summary>
        </member>
        <member name="T:XCode.DataAccessLayer.SqlCe">
            <summary>SqlCe数据库。由 @Goon(12600112) 测试并完善正向反向工程</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SqlCe.Type">
            <summary>返回数据库类型。外部DAL数据库类请使用Other</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlCe.CreateFactory">
            <summary>创建工厂</summary>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.SqlCe.SqlCeProviderVersion">
            <summary>SqlCe提供者版本</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SqlCe.SqlCeVer">
            <summary>SqlCe版本,默认4.0</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlCe.OnCreateSession">
            <summary>创建数据库会话</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlCe.OnCreateMetaData">
            <summary>创建元数据对象</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlCe.FormatKeyWord(System.String)">
            <summary>格式化关键字</summary>
            <param name="keyWord">关键字</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlCe.PageSplit(System.String,System.Int64,System.Int64,System.String)">
            <summary>构造分页SQL</summary>
            <param name="sql">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">唯一键。用于not in分页</param>
            <returns>分页SQL</returns>
        </member>
        <member name="T:XCode.DataAccessLayer.SqlCeSession">
            <summary>SqlCe会话</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlCeSession.InsertAndGetIdentity(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlCeSession.GetSchema(System.Data.Common.DbConnection,System.String,System.String[])">
            <summary>返回数据源的架构信息</summary>
            <param name="conn">连接</param>
            <param name="collectionName">指定要返回的架构的名称。</param>
            <param name="restrictionValues">为请求的架构指定一组限制值。</param>
            <returns></returns>
        </member>
        <member name="T:XCode.DataAccessLayer.SqlCeMetaData">
            <summary>SqlCe元数据</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlCeMetaData.GetTableNames">
            <summary>
            快速取得所有表名
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlCeMetaData.GetIndexes(XCode.DataAccessLayer.IDataTable,System.Data.DataTable,System.Data.DataTable)">
            <summary>获取索引</summary>
            <param name="table"></param>
            <param name="indexes">索引</param>
            <param name="indexColumns">索引列</param>
            <returns></returns>
        </member>
        <member name="F:XCode.DataAccessLayer.SqlCeMetaData._DataTypes">
            <summary>数据类型映射</summary>
        </member>
        <member name="T:XCode.DataAccessLayer.SQLCEVersion">
            <summary>SqlCe版本</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.SQLCEVersion.SQLCE20">
            <summary>Sqlce Ver2.0</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.SQLCEVersion.SQLCE30">
            <summary>Sqlce Ver3.0</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.SQLCEVersion.SQLCE35">
            <summary>Sqlce Ver3.5</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.SQLCEVersion.SQLCE40">
            <summary>Sqlce Ver4.0</summary>
        </member>
        <member name="T:XCode.DataAccessLayer.SqlCeHelper">
            <summary>SqlCe辅助类</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlCeHelper.DetermineVersion(System.String)">
            <summary>检查给定SqlCe文件的版本</summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlCeHelper.IsV35Installed">
            <summary>检测SqlServerCe3.5是否安装</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlCeHelper.IsV40Installed">
            <summary>检测SqlServerCe4是否安装</summary>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.SqlCeEngine.EngineType">
            <summary></summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SqlCeEngine.Engine">
            <summary>引擎</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SQLite.Type">
            <summary>返回数据库类型。</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.SQLite.CreateFactory">
            <summary>创建工厂</summary>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.SQLite.IsMemoryDatabase">
            <summary>是否内存数据库</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SQLite.AutoVacuum">
            <summary>自动收缩数据库</summary>
            <remarks>
            当一个事务从数据库中删除了数据并提交后，数据库文件的大小保持不变。
            即使整页的数据都被删除，该页也会变成“空闲页”等待再次被使用，而不会实际地被从数据库文件中删除。
            执行vacuum操作，可以通过重建数据库文件来清除数据库内所有的未用空间，使数据库文件变小。
            但是，如果一个数据库在创建时被指定为auto_vacuum数据库，当删除事务提交时，数据库文件会自动缩小。
            使用auto_vacuum数据库可以节省空间，但却会增加数据库操作的时间。
            </remarks>
        </member>
        <member name="M:XCode.DataAccessLayer.SQLite.OnCreateSession">
            <summary>创建数据库会话</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SQLite.OnCreateMetaData">
            <summary>创建元数据对象</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SQLite.PageSplit(System.String,System.Int64,System.Int64,System.String)">
            <summary>已重写。获取分页</summary>
            <param name="sql">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">主键列。用于not in分页</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SQLite.PageSplit(XCode.DataAccessLayer.SelectBuilder,System.Int64,System.Int64)">
            <summary>构造分页SQL</summary>
            <param name="builder">查询生成器</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>分页SQL</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SQLite.FormatKeyWord(System.String)">
            <summary>格式化关键字</summary>
            <param name="keyWord">关键字</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SQLite.StringConcat(System.String,System.String)">
            <summary>字符串相加</summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.DataAccessLayer.SQLiteSession">
            <summary>SQLite数据库</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.SQLiteSession.InsertAndGetIdentity(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SQLiteSession.Truncate(System.String)">
            <summary>清空数据表，标识归零</summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.DataAccessLayer.SQLiteMetaData">
            <summary>SQLite元数据</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.SQLiteMetaData._DataTypes">
            <summary>数据类型映射</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.SQLiteMetaData.GetTableNames">
            <summary>
            快速取得所有表名
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SQLiteMetaData.GetTbFields(XCode.DataAccessLayer.IDataTable)">
            <summary>
            获取表字段 zhangy 2018年10月23日 15:30:43
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.SQLiteMetaData.Backup(System.String,System.String,System.Boolean)">
            <summary>备份文件到目标文件</summary>
            <param name="dbname"></param>
            <param name="bakfile"></param>
            <param name="compressed"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.SQLiteMetaData.DropIndexSQL(XCode.DataAccessLayer.IDataIndex)">
            <summary>删除索引方法</summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SQLiteMetaData.AddTableDescriptionSQL(XCode.DataAccessLayer.IDataTable)">
            <summary>添加描述</summary>
            <remarks>返回Empty，告诉反向工程，该数据库类型不支持该功能，请不要输出日志</remarks>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SQLiteMetaData.CheckTable(XCode.DataAccessLayer.IDataTable,XCode.DataAccessLayer.IDataTable,XCode.DataAccessLayer.Migration)">
            <summary>已重载。因为内存数据库无法检测到架构，不知道表是否已存在，所以需要自己维护</summary>
            <param name="entitytable"></param>
            <param name="dbtable"></param>
            <param name="mode"></param>
        </member>
        <member name="P:XCode.DataAccessLayer.SqlServer.Type">
            <summary>返回数据库类型。外部DAL数据库类请使用Other</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServer.CreateFactory">
            <summary>创建工厂</summary>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.SqlServer.IsSQL2012">
            <summary>是否SQL2012及以上</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SqlServer.Version">
            <summary>数据库版本</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SqlServer.DataPath">
            <summary>数据目录</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServer.OnCreateSession">
            <summary>创建数据库会话</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServer.OnCreateMetaData">
            <summary>创建元数据对象</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServer.PageSplit(System.String,System.Int64,System.Int64,System.String)">
            <summary>构造分页SQL</summary>
            <param name="sql">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">唯一键。用于not in分页</param>
            <returns>分页SQL</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServer.FormatSqlserver2012SQL(System.String)">
            <summary>
            格式化SQL SERVER 2012分页前半部分SQL语句
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServer.PageSplitByTopNotIn(System.String,System.Int64,System.Int64,System.String)">
            <summary>按top not in构造分页SQL</summary>
            <remarks>
            两个构造分页SQL的方法，区别就在于查询生成器能够构造出来更好的分页语句，尽可能的避免子查询。
            MS体系的分页精髓就在于唯一键，当唯一键带有Asc/Desc/Unkown等排序结尾时，就采用最大最小值分页，否则使用较次的TopNotIn分页。
            TopNotIn分页和MaxMin分页的弊端就在于无法完美的支持GroupBy查询分页，只能查到第一页，往后分页就不行了，因为没有主键。
            </remarks>
            <param name="sql">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">唯一键。用于not in分页</param>
            <returns>分页SQL</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServer.PageSplitMaxMin(System.String,System.Int64,System.Int64,System.String)">
            <summary>按唯一数字最大最小分析</summary>
            <param name="sql">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">唯一键。用于not in分页</param>
            <returns>分页SQL</returns>
        </member>
        <member name="P:XCode.DataAccessLayer.SqlServer.LongTextLength">
            <summary>长文本长度</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServer.FormatDateTime(System.DateTime)">
            <summary>格式化时间为SQL字符串</summary>
            <param name="dateTime">时间值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServer.FormatName(System.String)">
            <summary>格式化名称，如果是关键字，则格式化后返回，否则原样返回</summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServer.FormatKeyWord(System.String)">
            <summary>格式化关键字</summary>
            <param name="keyWord">关键字</param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.SqlServer.SystemDatabaseName">
            <summary>系统数据库名</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServer.FormatLike(XCode.DataAccessLayer.IDataColumn,System.String,System.String)">
            <summary>格式化模糊搜索的字符串。处理转义字符</summary>
            <param name="column">字段</param>
            <param name="format">格式化字符串</param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="T:XCode.DataAccessLayer.SqlServerSession">
            <summary>SqlServer数据库</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServerSession.Query(XCode.DataAccessLayer.SelectBuilder)">
            <summary>执行SQL查询，返回记录集</summary>
            <param name="builder">查询生成器</param>
            <returns>总记录数</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServerSession.QueryCountFast(System.String)">
            <summary>快速查询单表记录数，稍有偏差</summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServerSession.InsertAndGetIdentity(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="T:XCode.DataAccessLayer.SqlServerSession.SqlBatcher">
            <summary>
            批量操作帮助类
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SqlServerSession.SqlBatcher.IsStarted">
            <summary>获得批处理是否正在批处理状态。</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServerSession.SqlBatcher.StartBatch(System.Data.Common.DbConnection)">
            <summary>开始批处理</summary>
            <param name="connection">连接。</param>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServerSession.SqlBatcher.AddToBatch(System.Data.IDbCommand)">
            <summary>
            添加批命令。
            </summary>
            <param name="command">命令</param>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServerSession.SqlBatcher.ExecuteBatch">
            <summary>
            执行批处理。
            </summary>
            <returns>影响的数据行数。</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServerSession.SqlBatcher.EndBatch">
            <summary>
            结束批处理。
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServerSession.SqlBatcher.ClearBatch">
            <summary>
            清空保存的批命令。
            </summary>
        </member>
        <member name="T:XCode.DataAccessLayer.SqlServerMetaData">
            <summary>SqlServer元数据</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServerMetaData.OnGetTables(System.String[])">
            <summary>取得所有表构架</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServerMetaData.GetTableNames">
            <summary>
            快速取得所有表名
            </summary>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.SqlServerMetaData.SchemaSql">
            <summary>构架SQL</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServerMetaData.DatabaseExist(System.String)">
            <summary>使用数据架构确定数据库是否存在，因为使用系统视图可能没有权限</summary>
            <param name="dbname"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServerMetaData.Backup(System.String,System.String,System.Boolean)">
            <summary>备份文件到目标文件</summary>
            <param name="dbname"></param>
            <param name="bakfile"></param>
            <param name="compressed"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServerMetaData.Restore(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>还原备份文件到目标数据库</summary>
            <param name="bakfile"></param>
            <param name="recoverDir"></param>
            <param name="replace"></param>
            <param name="compressed"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServerMetaData.TableExist(XCode.DataAccessLayer.IDataTable)">
            <summary>使用数据架构确定数据表是否存在，因为使用系统视图可能没有权限</summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="F:XCode.DataAccessLayer.SqlServerMetaData._DataTypes">
            <summary>数据类型映射</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServerMetaData.Trim(System.String,System.String,System.String)">
            <summary>除去字符串两端成对出现的符号</summary>
            <param name="str"></param>
            <param name="prefix"></param>
            <param name="suffix"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.TDengine.Type">
            <summary>返回数据库类型。</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.TDengine.CreateFactory">
            <summary>创建工厂</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.TDengine.OnCreateSession">
            <summary>创建数据库会话</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.TDengine.OnCreateMetaData">
            <summary>创建元数据对象</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.TDengine.FormatKeyWord(System.String)">
            <summary>格式化关键字</summary>
            <param name="keyWord">关键字</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.TDengine.FormatValue(XCode.DataAccessLayer.IDataColumn,System.Object)">
            <summary>格式化数据为SQL数据</summary>
            <param name="field">字段</param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.TDengine.FormatDateTime(System.DateTime)">
            <summary>格式化时间为SQL字符串</summary>
            <remarks>
            优化DateTime转为全字符串，平均耗时从25.76ns降为15.07。
            调用非常频繁，每分钟都有数百万次调用。
            </remarks>
            <param name="dateTime">时间值</param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.TDengine.LongTextLength">
            <summary>长文本长度</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.TDengine.CreateParameter(System.String,System.Object,System.Type)">
            <summary>创建参数</summary>
            <param name="name">名称</param>
            <param name="value">值</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.TDengine.SystemDatabaseName">
            <summary>系统数据库名</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.TDengine.StringConcat(System.String,System.String)">
            <summary>字符串相加</summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.DataAccessLayer.TDengineSession">
            <summary>TDengine数据库</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.TDengineSession.InsertAndGetIdentity(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="T:XCode.DataAccessLayer.TDengineMetaData">
            <summary>TDengine元数据</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.TDengineMetaData._DataTypes">
            <summary>数据类型映射</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.TDengineMetaData.GetTableNames">
            <summary>
            快速取得所有表名
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCode.DataAccessLayer.DbInfo">
            <summary>数据库连接信息</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbInfo.Name">
            <summary>连接名</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbInfo.ConnectionString">
            <summary>连接字符串</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbInfo.Type">
            <summary>数据库提供者类型</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbInfo.Provider">
            <summary>数据库提供者</summary>
        </member>
        <member name="T:XCode.DataAccessLayer.DbPackage">
            <summary>
            数据包。数据的备份与恢复
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbPackage.Dal">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="E:XCode.DataAccessLayer.DbPackage.OnPage">
            <summary>数据页事件</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbPackage.BatchSize">
            <summary>批大小。用于批量操作数据，默认5000</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbPackage.IgnoreError">
            <summary>批量处理时，忽略单表错误，继续处理下一个。默认true</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbPackage.IgnorePageError">
            <summary>批量处理时，忽略单页错误，继续处理下一个。默认false</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbPackage.BatchInsert">
            <summary>批量插入，提供最好吞吐，默认true。为false时关闭批量，采用逐行插入并忽略单行错误</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbPackage.Mode">
            <summary>数据保存模式。默认Insert</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbPackage.WriteFileCallback">
            <summary>写文件Actor的创建回调，支持外部自定义</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbPackage.WriteDbCallback">
            <summary>写数据库Actor的创建回调，支持外部自定义</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbPackage.Tracer">
            <summary>
            性能追踪器
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DbPackage.Backup(XCode.DataAccessLayer.IDataTable,System.IO.Stream)">
            <summary>备份单表数据，抽取数据和写入文件双线程</summary>
            <remarks>
            最大支持21亿行
            </remarks>
            <param name="table">数据表</param>
            <param name="stream">目标数据流</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbPackage.OnProcess(XCode.DataAccessLayer.IDataTable,System.Int64,NewLife.Data.DbTable,NewLife.Model.Actor)">
            <summary>处理核心。数据抽取后，需要报告进度，以及写入Actor</summary>
            <param name="table">正在处理的数据表</param>
            <param name="row">进度</param>
            <param name="page">当前数据页</param>
            <param name="actor">处理数据Actor</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbPackage.GetExtracter(XCode.DataAccessLayer.IDataTable)">
            <summary>获取数据抽取器。自增/数字主键->时间索引->主键分页->索引分页->默认分页</summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbPackage.Backup(XCode.DataAccessLayer.IDataTable,System.String)">
            <summary>备份单表数据到文件</summary>
            <param name="table">数据表</param>
            <param name="file">文件。.gz后缀时采用压缩</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbPackage.BackupAll(System.Collections.Generic.IList{XCode.DataAccessLayer.IDataTable},System.String,System.Boolean)">
            <summary>备份一批表到指定压缩文件</summary>
            <param name="tables">数据表集合</param>
            <param name="file">zip压缩文件</param>
            <param name="backupSchema">备份架构</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbPackage.Restore(System.IO.Stream,XCode.DataAccessLayer.IDataTable)">
            <summary>从数据流恢复数据</summary>
            <param name="stream">数据流</param>
            <param name="table">数据表</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbPackage.Restore(System.String,XCode.DataAccessLayer.IDataTable,System.Boolean)">
            <summary>从文件恢复数据</summary>
            <param name="file">zip压缩文件</param>
            <param name="table">数据表</param>
            <param name="setSchema">是否设置数据表模型，自动建表</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbPackage.RestoreAll(System.String,XCode.DataAccessLayer.IDataTable[],System.Boolean)">
            <summary>从指定压缩文件恢复一批数据到目标库</summary>
            <param name="file">zip压缩文件</param>
            <param name="tables">数据表。为空时从压缩包读取xml模型文件</param>
            <param name="setSchema">是否设置数据表模型，自动建表</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbPackage.Sync(XCode.DataAccessLayer.IDataTable,System.String,System.Boolean)">
            <summary>同步单表数据</summary>
            <remarks>
            把数据同一张表同步到另一个库
            </remarks>
            <param name="table">数据表</param>
            <param name="connName">目标连接名</param>
            <param name="syncSchema">同步架构</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbPackage.SyncAll(XCode.DataAccessLayer.IDataTable[],System.String,System.Boolean)">
            <summary>备份一批表到另一个库</summary>
            <param name="tables">表名集合</param>
            <param name="connName">目标连接名</param>
            <param name="syncSchema">同步架构</param>
            <returns></returns>
        </member>
        <member name="T:XCode.DataAccessLayer.DbPackage.WriteFileActor">
            <summary>
            高吞吐写文件Actor
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbPackage.WriteFileActor.Stream">
            <summary>
            数据流
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbPackage.WriteFileActor.Total">
            <summary>
            总数
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbPackage.WriteFileActor.Log">
            <summary>
            日志
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DbPackage.WriteFileActor.Start">
            <summary>
            开始
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbPackage.WriteFileActor.ReceiveAsync(NewLife.Model.ActorContext,System.Threading.CancellationToken)">
            <summary>
            接收消息，写入文件
            </summary>
            <param name="context"></param>
            <param name="cancellationToken">取消通知</param>
            <returns></returns>
        </member>
        <member name="T:XCode.DataAccessLayer.DbPackage.WriteDbActor">
            <summary>
            高吞吐写数据库Actor
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbPackage.WriteDbActor.Host">
            <summary>父级对象</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbPackage.WriteDbActor.Dal">
            <summary>
            目标数据库
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbPackage.WriteDbActor.Table">
            <summary>
            数据表
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DbPackage.WriteDbActor.ReceiveAsync(NewLife.Model.ActorContext,System.Threading.CancellationToken)">
            <summary>
            接收消息，批量插入
            </summary>
            <param name="context"></param>
            <param name="cancellationToken">取消通知</param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.DbPackage.Log">
            <summary>
            日志
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DbPackage.WriteLog(System.String,System.Object[])">
            <summary>
            写日志
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="T:XCode.DataAccessLayer.InsertBuilder">
            <summary>
            插入Sql语句生成器
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.InsertBuilder.Mode">
            <summary>数据保存模式。默认Insert</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.InsertBuilder.AllowInsertIdentity">
            <summary>
            是否允许插入标识字段。默认false
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.InsertBuilder.UseParameter">
            <summary>参数化添删改查。默认关闭</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.InsertBuilder.Parameters">
            <summary>
            参数集合
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.InsertBuilder.GetSql(XCode.DataAccessLayer.IDatabase,XCode.DataAccessLayer.IDataTable,XCode.DataAccessLayer.IDataColumn[],NewLife.Data.IModel)">
            <summary>
            获取SQL语句
            </summary>
            <param name="database"></param>
            <param name="table"></param>
            <param name="columns"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.DataAccessLayer.DbMetaData">
            <summary>数据库元数据</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbMetaData.Database">
            <summary>数据库</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbMetaData.MetaDataCollections">
            <summary>所有元数据集合</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbMetaData.ReservedWords">
            <summary>保留关键字</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.GetSchema(System.String,System.String[])">
            <summary>返回数据源的架构信息</summary>
            <param name="collectionName">指定要返回的架构的名称。</param>
            <param name="restrictionValues">为请求的架构指定一组限制值。</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.TryGetDataRowValue``1(System.Data.DataRow,System.String,``0@)">
            <summary>尝试从指定数据行中读取指定名称列的数据</summary>
            <typeparam name="T"></typeparam>
            <param name="dr"></param>
            <param name="name">名称</param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.GetDataRowValue``1(System.Data.DataRow,System.String[])">
            <summary>获取指定数据行指定字段的值，不存在时返回空</summary>
            <typeparam name="T"></typeparam>
            <param name="dr"></param>
            <param name="names">名称</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.WriteLog(System.String)">
            <summary>输出日志</summary>
            <param name="msg"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.WriteLog(System.String,System.Object[])">
            <summary>输出日志</summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.SetTables(XCode.DataAccessLayer.Migration,XCode.DataAccessLayer.IDataTable[])">
            <summary>设置表模型，检查数据表是否匹配表模型，反向工程</summary>
            <param name="mode">设置</param>
            <param name="tables"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.CheckColumnsChange(XCode.DataAccessLayer.IDataTable,XCode.DataAccessLayer.IDataTable,System.Boolean,System.Boolean)">
            <summary>检查字段改变。某些数据库（如SQLite）没有添删改字段的DDL语法，可重载该方法，使用重建表方法ReBuildTable</summary>
            <param name="entitytable"></param>
            <param name="dbtable"></param>
            <param name="readonly"></param>
            <param name="onlyCreate"></param>
            <returns>返回未执行语句</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.CheckTableDescription(XCode.DataAccessLayer.IDataTable,XCode.DataAccessLayer.IDataTable,XCode.DataAccessLayer.Migration)">
            <summary>检查表说明和索引</summary>
            <param name="entitytable"></param>
            <param name="dbtable"></param>
            <param name="mode"></param>
            <returns>返回未执行语句</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.CheckAddIndex(XCode.DataAccessLayer.IDataTable,XCode.DataAccessLayer.IDataTable,XCode.DataAccessLayer.Migration)">
            <summary>检查新增索引</summary>
            <param name="entitytable"></param>
            <param name="dbtable"></param>
            <param name="mode"></param>
            <returns>返回未执行语句</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.CheckDeleteIndex(XCode.DataAccessLayer.IDataTable,XCode.DataAccessLayer.IDataTable,XCode.DataAccessLayer.Migration)">
            <summary>检查删除索引</summary>
            <param name="entitytable"></param>
            <param name="dbtable"></param>
            <param name="mode"></param>
            <returns>返回未执行语句</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.FormatDescription(System.String)">
            <summary>格式化注释，去除所有非单词字符</summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.IsColumnChanged(XCode.DataAccessLayer.IDataColumn,XCode.DataAccessLayer.IDataColumn,XCode.DataAccessLayer.IDatabase)">
            <summary>检查字段是否有改变，除了默认值和备注以外</summary>
            <param name="entityColumn"></param>
            <param name="dbColumn"></param>
            <param name="entityDb"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.IsColumnLengthChanged(XCode.DataAccessLayer.IDataColumn,XCode.DataAccessLayer.IDataColumn,XCode.DataAccessLayer.IDatabase)">
            <summary>检查字段长度是否扩大</summary>
            <param name="entityColumn"></param>
            <param name="dbColumn"></param>
            <param name="entityDb"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.PerformSchema(System.Text.StringBuilder,System.Boolean,XCode.DataAccessLayer.DDLSchema,System.Object[])">
            <summary>
            获取架构语句，该执行的已经执行。
            如果取不到语句，则输出日志信息；
            如果不是纯语句，则执行；
            </summary>
            <param name="sb"></param>
            <param name="onlySql"></param>
            <param name="schema"></param>
            <param name="values"></param>
            <returns>返回是否成功</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.CreateTable(System.Text.StringBuilder,XCode.DataAccessLayer.IDataTable,System.Boolean)">
            <summary>创建数据表，包括注释与索引</summary>
            <param name="sb"></param>
            <param name="table"></param>
            <param name="onlySql"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.CreateIndexes(System.Text.StringBuilder,XCode.DataAccessLayer.IDataTable,System.Boolean)">
            <summary>创建索引</summary>
            <param name="sb"></param>
            <param name="table"></param>
            <param name="onlySql"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.GetSchemaSQL(XCode.DataAccessLayer.DDLSchema,System.Object[])">
            <summary>获取数据定义语句</summary>
            <param name="schema">数据定义模式</param>
            <param name="values">其它信息</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.SetSchema(XCode.DataAccessLayer.DDLSchema,System.Object[])">
            <summary>设置数据定义模式</summary>
            <param name="schema">数据定义模式</param>
            <param name="values">其它信息</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.FieldClause(XCode.DataAccessLayer.IDataColumn,System.Boolean)">
            <summary>字段片段</summary>
            <param name="field">字段</param>
            <param name="onlyDefine">仅仅定义。定义操作才允许设置自增和使用默认值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.FieldClause(XCode.DataAccessLayer.IDataTable,System.Int32,System.Boolean)">
            <summary>字段片段</summary>
            <param name="table">表</param>
            <param name="index">序号</param>
            <param name="onlyDefine">仅仅定义。定义操作才允许设置自增和使用默认值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.GetFieldConstraints(XCode.DataAccessLayer.IDataColumn,System.Boolean)">
            <summary>取得字段约束</summary>
            <param name="field">字段</param>
            <param name="onlyDefine">仅仅定义</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.GetDefault(XCode.DataAccessLayer.IDataColumn,System.Boolean)">
            <summary>默认值</summary>
            <param name="field"></param>
            <param name="onlyDefine"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.GetTables">
            <summary>取得所有表构架</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.GetTableNames">
            <summary>
            快速取得所有表名
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.OnGetTables(System.String[])">
            <summary>取得所有表构架</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.GetTables(System.Data.DataRow[],System.String[],System.Collections.Generic.IDictionary{System.String,System.Data.DataTable})">
            <summary>根据数据行取得数据表</summary>
            <param name="rows">数据行</param>
            <param name="names">指定表名</param>
            <param name="data">扩展</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.FixTable(XCode.DataAccessLayer.IDataTable,System.Data.DataRow,System.Collections.Generic.IDictionary{System.String,System.Data.DataTable})">
            <summary>修正表</summary>
            <param name="table"></param>
            <param name="dr"></param>
            <param name="data"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.GetFields(XCode.DataAccessLayer.IDataTable,System.Data.DataTable,System.Collections.Generic.IDictionary{System.String,System.Data.DataTable})">
            <summary>取得指定表的所有列构架</summary>
            <param name="table"></param>
            <param name="columns">列</param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.GetFields(XCode.DataAccessLayer.IDataTable,System.Data.DataRow[])">
            <summary>获取指定表的字段</summary>
            <param name="table"></param>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.FixField(XCode.DataAccessLayer.IDataColumn,System.Data.DataRow)">
            <summary>修正指定字段</summary>
            <param name="field">字段</param>
            <param name="dr"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.GetIndexes(XCode.DataAccessLayer.IDataTable,System.Data.DataTable,System.Data.DataTable)">
            <summary>获取索引</summary>
            <param name="table"></param>
            <param name="indexes">索引</param>
            <param name="indexColumns">索引列</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.FixIndex(XCode.DataAccessLayer.IDataIndex,System.Data.DataRow)">
            <summary>修正索引</summary>
            <param name="index"></param>
            <param name="dr"></param>
        </member>
        <member name="P:XCode.DataAccessLayer.DbMetaData.Types">
            <summary>类型映射。Net类型映射到数据库多种类型上</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbMetaData.FieldTypeMaps">
            <summary>字段类型映射</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.GetFieldType(XCode.DataAccessLayer.IDataColumn)">
            <summary>取字段类型</summary>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.GetDataType(XCode.DataAccessLayer.IDataColumn)">
            <summary>获取Net数据类型</summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.DataAccessLayer.DDLSchema">
            <summary>数据定义模式</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DDLSchema.CreateDatabase">
            <summary>建立数据库</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DDLSchema.DropDatabase">
            <summary>删除数据库</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DDLSchema.DatabaseExist">
            <summary>数据库是否存在</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DDLSchema.CreateTable">
            <summary>建立表</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DDLSchema.DropTable">
            <summary>删除表</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DDLSchema.AddTableDescription">
            <summary>添加表说明</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DDLSchema.DropTableDescription">
            <summary>删除表说明</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DDLSchema.AddColumn">
            <summary>添加字段</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DDLSchema.AlterColumn">
            <summary>修改字段</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DDLSchema.DropColumn">
            <summary>删除字段</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DDLSchema.AddColumnDescription">
            <summary>添加字段说明</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DDLSchema.DropColumnDescription">
            <summary>删除字段说明</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DDLSchema.CreateIndex">
            <summary>建立索引</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DDLSchema.DropIndex">
            <summary>删除索引</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DDLSchema.BackupDatabase">
            <summary>备份数据库</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DDLSchema.RestoreDatabase">
            <summary>还原数据库</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DDLSchema.CompactDatabase">
            <summary>收缩数据库</summary>
        </member>
        <member name="T:XCode.DataAccessLayer.IMetaData">
            <summary>数据库元数据接口</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IMetaData.Database">
            <summary>数据库</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IMetaData.MetaDataCollections">
            <summary>所有元数据集合</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IMetaData.ReservedWords">
            <summary>保留关键字</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.IMetaData.GetTables">
            <summary>取得表模型，正向工程</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IMetaData.GetTableNames">
            <summary>
            取得所有表名
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IMetaData.SetTables(XCode.DataAccessLayer.Migration,XCode.DataAccessLayer.IDataTable[])">
            <summary>设置表模型，检查数据表是否匹配表模型，反向工程</summary>
            <param name="setting">设置</param>
            <param name="tables"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.IMetaData.GetSchemaSQL(XCode.DataAccessLayer.DDLSchema,System.Object[])">
            <summary>获取数据定义语句</summary>
            <param name="schema">数据定义模式</param>
            <param name="values">其它信息</param>
            <returns>数据定义语句</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IMetaData.SetSchema(XCode.DataAccessLayer.DDLSchema,System.Object[])">
            <summary>设置数据定义模式</summary>
            <param name="schema">数据定义模式</param>
            <param name="values">其它信息</param>
            <returns></returns>
        </member>
        <member name="T:XCode.DataAccessLayer.IDataColumn">
            <summary>数据列</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataColumn.Name">
            <summary>名称</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataColumn.ColumnName">
            <summary>列名</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataColumn.DataType">
            <summary>数据类型</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataColumn.RawType">
            <summary>
            原始数据类型。
            当且仅当目标数据库同为该数据库类型时，采用实体属性信息上的RawType作为反向工程的目标字段类型，以期获得开发和生产的最佳兼容。
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataColumn.ItemType">
            <summary>元素类型</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataColumn.Map">
            <summary>映射，表间关联，格式Role.Id.Name</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataColumn.Identity">
            <summary>标识</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataColumn.PrimaryKey">
            <summary>主键</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataColumn.Master">
            <summary>是否主字段。主字段作为业务主要字段，代表当前数据行意义</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataColumn.Length">
            <summary>长度</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataColumn.Precision">
            <summary>精度</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataColumn.Scale">
            <summary>位数</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataColumn.Nullable">
            <summary>允许空</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataColumn.DefaultValue">
            <summary>默认值</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataColumn.DisplayName">
            <summary>显示名。如果有Description则使用Description，否则使用Name</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataColumn.Description">
            <summary>说明</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataColumn.Table">
            <summary>说明数据表</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataColumn.Properties">
            <summary>扩展属性</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.IDataColumn.Fix">
            <summary>重新计算修正别名。避免与其它字段名或表名相同，避免关键字</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDataColumn.Clone(XCode.DataAccessLayer.IDataTable)">
            <summary>克隆到指定的数据表</summary>
            <param name="table"></param>
        </member>
        <member name="T:XCode.DataAccessLayer.IDataIndex">
            <summary>
            数据索引。
            可根据索引生成查询方法，是否唯一决定该索引返回的是单个实体还是实体集合。
            正向工程将会为所有一对一索引建立关系。
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataIndex.Name">
            <summary>名称</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataIndex.Columns">
            <summary>数据列集合</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataIndex.Unique">
            <summary>是否唯一</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataIndex.PrimaryKey">
            <summary>是否主键</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataIndex.Table">
            <summary>说明数据表</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.IDataIndex.Fix">
            <summary>修正数据</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDataIndex.Clone(XCode.DataAccessLayer.IDataTable)">
            <summary>克隆到指定的数据表</summary>
            <param name="table"></param>
        </member>
        <member name="T:XCode.DataAccessLayer.IDataTable">
            <summary>数据表</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataTable.Name">
            <summary>名称</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataTable.TableName">
            <summary>表名</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataTable.BaseType">
            <summary>基类</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataTable.Owner">
            <summary>所有者</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataTable.ConnName">
            <summary>连接名</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataTable.DbType">
            <summary>
            数据库类型。
            仅用于记录实体类由何种类型数据库生成，当且仅当目标数据库同为该数据库类型时，采用实体属性信息上的RawType作为反向工程的目标字段类型，以期获得开发和生产的最佳兼容。
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataTable.IsView">
            <summary>是否视图</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataTable.DisplayName">
            <summary>显示名。如果有Description则使用Description，否则使用Name</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataTable.Description">
            <summary>说明</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataTable.InsertOnly">
            <summary>仅插入的日志型数据</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataTable.Columns">
            <summary>数据列集合。可以是空集合，但不能为null。</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataTable.Indexes">
            <summary>数据索引集合。可以是空集合，但不能为null。</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataTable.PrimaryKeys">
            <summary>主键集合。可以是空集合，但不能为null。</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataTable.Master">
            <summary>主字段。主字段作为业务主要字段，代表当前数据行意义</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataTable.Properties">
            <summary>扩展属性</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.IDataTable.CreateColumn">
            <summary>创建数据列</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDataTable.CreateIndex">
            <summary>创建数据索引</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDataTable.Fix">
            <summary>修正数据</summary>
        </member>
        <member name="T:XCode.DataAccessLayer.IModelResolver">
            <summary>模型解析器接口。解决名称大小写、去前缀、关键字等多个问题</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.IModelResolver.GetName(System.String)">
            <summary>获取别名。过滤特殊符号，过滤_之类的前缀</summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IModelResolver.GetDbName(System.String,XCode.DataAccessLayer.NameFormats)">
            <summary>获取数据库名字。可以加上下划线</summary>
            <param name="name">名称</param>
            <param name="format">格式风格</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IModelResolver.GetName(XCode.DataAccessLayer.IDataIndex)">
            <summary>根据字段名等信息计算索引的名称</summary>
            <param name="di"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IModelResolver.GetDisplayName(System.String,System.String)">
            <summary>获取显示名，如果描述不存在，则使用名称，否则使用描述前面部分，句号（中英文皆可）、换行分隔</summary>
            <param name="name">名称</param>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IModelResolver.Fix(XCode.DataAccessLayer.IDataTable)">
            <summary>修正数据</summary>
            <param name="table"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.IModelResolver.Fix(XCode.DataAccessLayer.IDataColumn)">
            <summary>修正数据列</summary>
            <param name="column"></param>
        </member>
        <member name="T:XCode.DataAccessLayer.ModelResolver">
            <summary>模型解析器。解决名称大小写、去前缀、关键字等多个问题</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.ModelResolver.Underline">
            <summary>下划线。默认false不用下划线，下划线前后单词用驼峰命名</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.ModelResolver.Camel">
            <summary>使用驼峰命名。默认true</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.ModelResolver.SeparateChars">
            <summary>描述信息分隔符。从描述信息前部分隔出显示名</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.ModelResolver.GetName(System.String)">
            <summary>获取别名。过滤特殊符号，过滤_之类的前缀。</summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.ModelResolver.GetDbName(System.String,XCode.DataAccessLayer.NameFormats)">
            <summary>获取数据库名字。可以加上下划线</summary>
            <param name="name">名称</param>
            <param name="format">格式风格</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.ModelResolver.ChangeUnderline(System.String)">
            <summary>把驼峰命名转为下划线</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.ModelResolver.GetName(XCode.DataAccessLayer.IDataIndex)">
            <summary>根据字段名等信息计算索引的名称</summary>
            <param name="di"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.ModelResolver.GetDisplayName(System.String,System.String)">
            <summary>获取显示名，如果描述不存在，则使用名称，否则使用描述前面部分，句号（中英文皆可）、换行分隔</summary>
            <param name="name">名称</param>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.ModelResolver.Fix(XCode.DataAccessLayer.IDataTable)">
            <summary>修正数据</summary>
            <param name="table"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.ModelResolver.Fix(XCode.DataAccessLayer.IDataColumn)">
            <summary>修正数据列</summary>
            <param name="column"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.ModelResolver.FixPrimaryByIndex(XCode.DataAccessLayer.IDataTable)">
            <summary>从索引中修正主键</summary>
            <param name="table"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.ModelResolver.CreateUniqueIndexForIdentity(XCode.DataAccessLayer.IDataTable)">
            <summary>给非主键的自增字段建立唯一索引</summary>
            <param name="table"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.ModelResolver.FixIndex(XCode.DataAccessLayer.IDataTable)">
            <summary>索引应该具有跟字段一样的唯一和主键约束</summary>
            <param name="table"></param>
        </member>
        <member name="P:XCode.DataAccessLayer.ModelResolver.Current">
            <summary>当前名称解析器</summary>
        </member>
        <member name="T:XCode.DataAccessLayer.ModelHelper">
            <summary>数据模型扩展</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.ModelHelper.GetColumn(XCode.DataAccessLayer.IDataTable,System.String)">
            <summary>根据字段名获取字段</summary>
            <param name="table"></param>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.ModelHelper.GetColumns(XCode.DataAccessLayer.IDataTable,System.String[])">
            <summary>根据字段名数组获取字段数组</summary>
            <param name="table"></param>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.ModelHelper.GetAllColumns(XCode.DataAccessLayer.IDataTable,System.Collections.Generic.IEnumerable{XCode.DataAccessLayer.IDataTable},System.Boolean)">
            <summary>获取全部字段，包括继承的父类</summary>
            <param name="table"></param>
            <param name="tables">在该表集合里面找父类</param>
            <param name="baseFirst">是否父类字段在前</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.ModelHelper.Is(XCode.DataAccessLayer.IDataTable,System.String)">
            <summary>判断表是否等于指定名字</summary>
            <param name="table"></param>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.ModelHelper.Is(XCode.DataAccessLayer.IDataColumn,System.String)">
            <summary>判断字段是否等于指定名字</summary>
            <param name="column"></param>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.ModelHelper.GetIndex(XCode.DataAccessLayer.IDataTable,System.String[])">
            <summary>根据字段名找索引</summary>
            <param name="table"></param>
            <param name="columnNames"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.ModelHelper.CamelName(XCode.DataAccessLayer.IDataColumn)">
            <summary>驼峰变量名</summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.ModelHelper.ToXml(System.Collections.Generic.IEnumerable{XCode.DataAccessLayer.IDataTable},System.Object,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>导出模型</summary>
            <param name="tables"></param>
            <param name="option">写在前面的扩展对象，一般用于存储配置</param>
            <param name="atts">附加属性</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.ModelHelper.FromXml(System.String,System.Func{XCode.DataAccessLayer.IDataTable},System.Object,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>导入模型</summary>
            <param name="xml"></param>
            <param name="createTable">用于创建<see cref="T:XCode.DataAccessLayer.IDataTable"/>实例的委托</param>
            <param name="option">写在前面的扩展对象，一般用于存储配置</param>
            <param name="atts">附加属性</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.ModelHelper.ReadXml(XCode.DataAccessLayer.IDataTable,System.Xml.XmlReader)">
            <summary>读取</summary>
            <param name="table"></param>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.ModelHelper.WriteXml(XCode.DataAccessLayer.IDataTable,System.Xml.XmlWriter)">
            <summary>写入</summary>
            <param name="table"></param>
            <param name="writer"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.ModelHelper.ReadXml(System.Xml.XmlReader,System.Object)">
            <summary>读取</summary>
            <param name="reader"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:XCode.DataAccessLayer.ModelHelper.ReadXmlAttribute(System.Xml.XmlReader,System.Object)">
            <summary>读取</summary>
            <param name="reader"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:XCode.DataAccessLayer.ModelHelper.WriteXml(System.Xml.XmlWriter,System.Object,System.Boolean)">
            <summary>写入</summary>
            <param name="writer"></param>
            <param name="value">数值</param>
            <param name="writeDefaultValueMember">是否写数值为默认值的成员。为了节省空间，默认不写。</param>
        </member>
        <member name="M:XCode.DataAccessLayer.ModelHelper.FixDefaultByType(XCode.DataAccessLayer.IDataColumn,XCode.DataAccessLayer.IDataColumn)">
            <summary>根据类型修正字段的一些默认值</summary>
            <param name="dc"></param>
            <param name="oridc"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.DataAccessLayer.SerializableDataMember">
            <summary>可序列化数据成员</summary>
        </member>
        <member name="T:XCode.DataAccessLayer.XField">
            <summary>字段构架</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XField.Name">
            <summary>名称</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XField.ColumnName">
            <summary>列名</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XField.DataType">
            <summary>数据类型</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XField.RawType">
            <summary>原始数据类型</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XField.ItemType">
            <summary>元素类型</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XField.Map">
            <summary>映射，表间关联，格式Role.Id.Name</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XField.Identity">
            <summary>标识</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XField.PrimaryKey">
            <summary>主键</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XField.Master">
            <summary>是否主字段。主字段作为业务主要字段，代表当前数据行意义</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XField.Length">
            <summary>长度</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XField.Precision">
            <summary>精度</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XField.Scale">
            <summary>位数</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XField.Nullable">
            <summary>允许空</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XField.DefaultValue">
            <summary>默认值</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XField.Description">
            <summary>描述</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XField.Table">
            <summary>表</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XField.DisplayName">
            <summary>显示名</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XField.Properties">
            <summary>扩展属性</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.XField.Fix">
            <summary>重新计算修正别名。避免与其它字段名或表名相同，避免关键字</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.XField.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.XField.System#ICloneable#Clone">
            <summary>克隆</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.XField.Clone(XCode.DataAccessLayer.IDataTable)">
            <summary>克隆</summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.DataAccessLayer.XIndex">
            <summary>索引</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XIndex.Name">
            <summary>名称</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XIndex.Columns">
            <summary>数据列集合</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XIndex.Unique">
            <summary>是否唯一</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XIndex.PrimaryKey">
            <summary>是否主键</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XIndex.Table">
            <summary>表</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.XIndex.#ctor">
            <summary>实例化</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.XIndex.Fix">
            <summary>修正数据</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.XIndex.System#ICloneable#Clone">
            <summary>克隆</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.XIndex.Clone(XCode.DataAccessLayer.IDataTable)">
            <summary>克隆</summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.XIndex.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="T:XCode.DataAccessLayer.XTable">
            <summary>表模型</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XTable.Name">
            <summary>名称</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XTable.TableName">
            <summary>表名</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XTable.Description">
            <summary>描述</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XTable.IsView">
            <summary>是否视图</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XTable.Owner">
            <summary>所有者</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XTable.ConnName">
            <summary>连接名</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XTable.DbType">
            <summary>数据库类型</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XTable.BaseType">
            <summary>基类</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XTable.IsHistory">
            <summary>是否日志记录表</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XTable.InsertOnly">
            <summary>仅插入的日志型数据</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XTable.Columns">
            <summary>字段集合。可以是空集合，但不能为null。</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XTable.Indexes">
            <summary>索引集合。可以是空集合，但不能为null。</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XTable.Master">
            <summary>主字段。主字段作为业务主要字段，代表当前数据行意义</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XTable.PrimaryKeys">
            <summary>主键集合。可以是空集合，但不能为null。</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XTable.DisplayName">
            <summary>显示名</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XTable.Properties">
            <summary>扩展属性</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.XTable.#ctor">
            <summary>初始化</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.XTable.#ctor(System.String)">
            <summary>初始化</summary>
            <param name="name">名称</param>
        </member>
        <member name="M:XCode.DataAccessLayer.XTable.CreateColumn">
            <summary>创建字段</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.XTable.CreateIndex">
            <summary>创建索引</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.XTable.Fix">
            <summary>修正数据</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.XTable.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.XTable.Export">
            <summary>导出</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.XTable.Import(System.String)">
            <summary>导入</summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.XTable.System#ICloneable#Clone">
            <summary>克隆</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.XTable.Clone">
            <summary>克隆</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.XTable.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>获取架构</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.XTable.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>读取</summary>
            <param name="reader"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.XTable.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <summary>写入</summary>
            <param name="writer"></param>
        </member>
        <member name="T:XCode.DataAccessLayer.PageEventArgs">
            <summary>数据页事件参数。备份、还原、同步</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.PageEventArgs.Table">
            <summary>数据表</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.PageEventArgs.Row">
            <summary>开始行。分页时表示偏移行数，自增时表示下一个编号，默认0</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.PageEventArgs.Page">
            <summary>数据页</summary>
        </member>
        <member name="T:XCode.DataAccessLayer.TimeRegion">
            <summary>时间区间</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.TimeRegion.Start">
            <summary>开始时间</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.TimeRegion.End">
            <summary>结束时间</summary>
        </member>
        <member name="T:XCode.DataAccessLayer.ReadWriteStrategy">
            <summary>读写分离策略。忽略时间区间和表名</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.ReadWriteStrategy.IgnoreTimes">
            <summary>要忽略的时间区间</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.ReadWriteStrategy.IgnoreTables">
            <summary>要忽略的表名</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.ReadWriteStrategy.AddIgnoreTimes(System.String)">
            <summary>设置不走读写分离的时间段，如00:30-00:50，多段区间逗号分开</summary>
            <param name="regions"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.ReadWriteStrategy.Validate(XCode.DataAccessLayer.DAL,System.String,System.String)">
            <summary>检查是否支持读写分离</summary>
            <param name="dal"></param>
            <param name="sql"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.DataAccessLayer.SaveModes">
            <summary>数据保存模式</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.SaveModes.Insert">
            <summary>标准插入</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.SaveModes.Upsert">
            <summary>插入或更新，执行插入，主键已存在时更新</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.SaveModes.InsertIgnore">
            <summary>插入或忽略，执行插入，主键已存在时跳过</summary>
        </member>
        <member name="F:XCode.DataAccessLayer.SaveModes.Replace">
            <summary>插入或替换，执行插入，主键已存在时替换</summary>
        </member>
        <member name="T:XCode.DataAccessLayer.SelectBuilder">
            <summary>SQL查询语句生成器</summary>
            <remarks>
            查询语句的复杂性，使得多个地方使用起来极为不方面。
            应该以本类作为查询对象，直接从最上层深入到最下层
            </remarks>
        </member>
        <member name="P:XCode.DataAccessLayer.SelectBuilder.Key">
            <summary>分页主键</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SelectBuilder.Column">
            <summary>选择列</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SelectBuilder.Table">
            <summary>数据表</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SelectBuilder.Where">
            <summary>条件</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SelectBuilder.GroupBy">
            <summary>分组</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SelectBuilder.Having">
            <summary>分组条件</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SelectBuilder.OrderBy">
            <summary>排序</summary>
            <remarks>给排序赋值时，如果没有指定分页主键，则自动采用排序中的字段</remarks>
        </member>
        <member name="P:XCode.DataAccessLayer.SelectBuilder.Limit">
            <summary>分页用的Limit语句</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SelectBuilder.Parameters">
            <summary>参数集合</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.SelectBuilder.#ctor">
            <summary>实例化一个SQL语句</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.SelectBuilder.#ctor(System.String)">
            <summary>实例化一个SQL语句</summary>
            <param name="sql"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.SelectBuilder.Parse(System.String)">
            <summary>分析一条SQL</summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SelectBuilder.ToString">
            <summary>已重写。获取本Builder所分析的SQL语句</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SelectBuilder.SelectCount">
            <summary>获取记录数的语句</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SelectBuilder.Clone">
            <summary>克隆</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SelectBuilder.AppendWhereAnd(System.String,System.Object[])">
            <summary>增加Where条件</summary>
            <param name="format"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SelectBuilder.AsChild(System.String,System.Boolean)">
            <summary>作为子查询</summary>
            <param name="alias">别名，某些数据库可能需要使用as</param>
            <param name="trimOrder">SqlServer需要转移OrderBy到外层，Oracle则不能</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SelectBuilder.CloneWithGroupBy(System.String,System.Boolean)">
            <summary>处理可能带GroupBy的克隆，如果带有GroupBy，则必须作为子查询，否则简单克隆即可</summary>
            <param name="alias">别名，某些数据库可能需要使用as</param>
            <param name="trimOrder">SqlServer需要转移OrderBy到外层，Oracle则不能</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SelectBuilder.op_Implicit(XCode.DataAccessLayer.SelectBuilder)~System.String">
            <summary>类型转换</summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.DataAccessLayer.ConnectionStringBuilder">
            <summary>连接字符串构造器</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.ConnectionStringBuilder.Item(System.String)">
            <summary>获取 或 设置 设置项</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.ConnectionStringBuilder.#ctor(System.String)">
            <summary>实例化</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.ConnectionStringBuilder.ConnectionString">
            <summary>连接字符串</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.ConnectionStringBuilder.TryGetValue(System.String,System.String@)">
            <summary>获取连接字符串中的项</summary>
            <param name="key"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.ConnectionStringBuilder.TryGetAndRemove(System.String,System.String@)">
            <summary>获取并删除连接字符串中的项</summary>
            <param name="key"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.ConnectionStringBuilder.TryAdd(System.String,System.String)">
            <summary>尝试添加项，如果存在则失败</summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.ConnectionStringBuilder.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="T:XCode.DataMethod">
            <summary>数据操作方法。添删改</summary>
        </member>
        <member name="F:XCode.DataMethod.Insert">
            <summary>新增</summary>
        </member>
        <member name="F:XCode.DataMethod.Update">
            <summary>更新</summary>
        </member>
        <member name="F:XCode.DataMethod.Delete">
            <summary>删除</summary>
        </member>
        <member name="T:XCode.IDataRowEntityAccessor">
            <summary>在数据行和实体类之间映射数据的接口</summary>
        </member>
        <member name="M:XCode.IDataRowEntityAccessor.LoadData``1(System.Data.DataTable)">
            <summary>加载数据表。无数据时返回空集合而不是null。</summary>
            <param name="dt">数据表</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.IDataRowEntityAccessor.LoadData``1(NewLife.Data.DbTable)">
            <summary>加载数据表。无数据时返回空集合而不是null。</summary>
            <param name="ds">数据表</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.IDataRowEntityAccessor.LoadData``1(System.Data.IDataReader)">
            <summary>加载数据表。无数据时返回空集合而不是null。</summary>
            <param name="dr">数据读取器</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.DataRowEntityAccessor.LoadData``1(System.Data.DataTable)">
            <summary>加载数据表。无数据时返回空集合而不是null。</summary>
            <param name="dt">数据表</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.DataRowEntityAccessor.LoadData``1(NewLife.Data.DbTable)">
            <summary>加载数据表。无数据时返回空集合而不是null。</summary>
            <param name="ds">数据表</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.DataRowEntityAccessor.LoadData``1(System.Data.IDataReader)">
            <summary>加载数据表。无数据时返回空集合而不是null。</summary>
            <param name="dr">数据读取器</param>
            <returns>实体数组</returns>
        </member>
        <member name="T:XCode.DirtyCollection">
            <summary>脏属性集合</summary>
            <remarks>
            脏数据需要并行高性能，要节省内存，允许重复。
            普通集合加锁成本太高，并发集合内存消耗太大，并发字典只有一两项的时候也要占用7.9k内存。
            </remarks>
        </member>
        <member name="F:XCode.DirtyCollection._length">
            <summary>数据长度</summary>
            <remarks>
            添加时，先抢位置，再赋值。
            即使删除，也不会减少长度，仅仅是把数据置空。
            该设计浪费了一些空间，但是避免了并发冲突，简化了代码设计，并且极少用到删除。
            </remarks>
        </member>
        <member name="P:XCode.DirtyCollection.Count">
            <summary>个数</summary>
        </member>
        <member name="P:XCode.DirtyCollection.Item(System.String)">
            <summary>获取或设置与指定的属性是否有脏数据。</summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DirtyCollection.Add(System.String,System.Object)">
            <summary>添加脏数据，并记录旧值</summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DirtyCollection.Clear">
            <summary>清空</summary>
        </member>
        <member name="M:XCode.DirtyCollection.GetEnumerator">
            <summary>枚举迭代</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DirtyCollection.GetDictionary">
            <summary>获取字典枚举</summary>
            <returns></returns>
        </member>
        <member name="T:XCode.Entity`1">
            <summary>数据实体类基类。所有数据实体类都必须继承该类。</summary>
        </member>
        <member name="M:XCode.Entity`1.#cctor">
            <summary>静态构造</summary>
        </member>
        <member name="M:XCode.Entity`1.CreateInstance(System.Boolean)">
            <summary>创建实体。</summary>
            <remarks>
            可以重写改方法以实现实体对象的一些初始化工作。
            切记，写为实例方法仅仅是为了方便重载，所要返回的实例绝对不会是当前实例。
            </remarks>
            <param name="forEdit">是否为了编辑而创建，如果是，可以再次做一些相关的初始化工作</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.LoadData(System.Data.DataSet)">
            <summary>加载记录集。无数据时返回空集合而不是null。</summary>
            <param name="ds">记录集</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.Entity`1.LoadData(System.Data.DataTable)">
            <summary>加载数据表。无数据时返回空集合而不是null。</summary>
            <param name="dt">数据表</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.Entity`1.LoadData(NewLife.Data.DbTable)">
            <summary>加载数据表。无数据时返回空集合而不是null。</summary>
            <param name="ds">数据表</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.Entity`1.LoadData(System.Data.IDataReader)">
            <summary>加载数据表。无数据时返回空集合而不是null。</summary>
            <param name="dr">数据读取器</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.Entity`1.Insert">
            <summary>插入数据，Valid后，在事务中调用<see cref="M:XCode.Entity`1.OnInsert"/>。</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.OnInsert">
            <summary>把该对象持久化到数据库，添加/更新实体缓存。</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.Update">
            <summary>更新数据，Valid后，在事务中调用<see cref="M:XCode.Entity`1.OnUpdate"/>。</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.OnUpdate">
            <summary>更新数据库，同时更新实体缓存</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.Delete">
            <summary>删除数据，通过在事务中调用OnDelete实现。</summary>
            <remarks>
            删除时，如果有且仅有主键有脏数据，则可能是ObjectDataSource之类的删除操作。
            该情况下，实体类没有完整的信息（仅有主键信息），将会导致无法通过扩展属性删除附属数据。
            如果需要避开该机制，请清空脏数据。
            </remarks>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.OnDelete">
            <summary>从数据库中删除该对象，同时从实体缓存中删除</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.Save">
            <summary>保存。Insert/Update/Upsert</summary>
            <remarks>
            Save的几个场景：
            1，Find, Update()
            2，new, Insert()
            3，new, Upsert()
            </remarks>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.SaveWithoutValid">
            <summary>不需要验证的保存，不执行Valid，一般用于快速导入数据</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.SaveAsync(System.Int32)">
            <summary>异步保存。实现延迟保存，大事务保存。主要面向日志表和频繁更新的在线记录表</summary>
            <param name="msDelay">延迟保存的时间。默认0ms近实时保存</param>
            <remarks>
            调用平均耗时190.86ns，IPModule占38.89%，TimeModule占16.31%，UserModule占7.20%，Valid占14.36%
            </remarks>
            <returns>是否成功加入异步队列，实体对象已存在于队列中则返回false</returns>
        </member>
        <member name="M:XCode.Entity`1.InsertAsync">
            <summary>插入数据，Valid后调用<see cref="M:XCode.Entity`1.OnInsertAsync"/>。</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.OnInsertAsync">
            <summary>把该对象持久化到数据库，添加/更新实体缓存。</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.UpdateAsync">
            <summary>更新数据，Valid后调用<see cref="M:XCode.Entity`1.OnUpdateAsync"/>。</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.OnUpdateAsync">
            <summary>更新数据库，同时更新实体缓存</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.DeleteAsync">
            <summary>删除数据，Valid后调用<see cref="M:XCode.Entity`1.OnDeleteAsync"/>。</summary>
            <remarks>
            删除时，如果有且仅有主键有脏数据，则可能是ObjectDataSource之类的删除操作。
            该情况下，实体类没有完整的信息（仅有主键信息），将会导致无法通过扩展属性删除附属数据。
            如果需要避开该机制，请清空脏数据。
            </remarks>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.OnDeleteAsync">
            <summary>从数据库中删除该对象，同时从实体缓存中删除</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.Valid(System.Boolean)">
            <summary>验证并修补数据，通过抛出异常的方式提示验证失败。</summary>
            <remarks>建议重写者调用基类的实现，因为基类自动生成雪花Id、填充创建更新信息以及验证字符串字段是否超长。</remarks>
            <param name="isNew">是否新数据</param>
        </member>
        <member name="M:XCode.Entity`1.Valid(XCode.DataMethod)">
            <summary>验证数据，支持添删改，通过返回值表示验证失败。基类实现字符串字段长度检查</summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.AutoFillSnowIdPrimaryKey">
            <summary>
            雪花Id生成器。Int64主键非自增时，自动填充
            </summary>
        </member>
        <member name="M:XCode.Entity`1.Exist(System.String[])">
            <summary>根据指定键检查数据，返回数据是否已存在</summary>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.CheckExist(System.String[])">
            <summary>根据指定键检查数据是否已存在，若已存在，抛出ArgumentOutOfRangeException异常</summary>
            <param name="names"></param>
        </member>
        <member name="M:XCode.Entity`1.CheckExist(System.Boolean,System.String[])">
            <summary>根据指定键检查数据是否已存在，若已存在，抛出ArgumentOutOfRangeException异常</summary>
            <param name="isNew">是否新数据</param>
            <param name="names"></param>
        </member>
        <member name="M:XCode.Entity`1.Exist(System.Boolean,System.String[])">
            <summary>根据指定键检查数据，返回数据是否已存在</summary>
            <param name="isNew">是否新数据</param>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.Find(System.String,System.Object)">
            <summary>根据属性以及对应的值，查找单个实体</summary>
            <param name="name">属性名称</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.Find(System.String,System.Object,System.String)">
            <summary>根据属性以及对应的值，查找单个实体</summary>
            <param name="name">属性名称</param>
            <param name="value">属性值</param>
            <param name="selects">查询列，默认null表示所有字段</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.Find(System.String[],System.Object[])">
            <summary>根据属性列表以及对应的值列表，查找单个实体</summary>
            <param name="names">属性名称集合</param>
            <param name="values">属性值集合</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.Find(System.String[],System.Object[],System.String)">
            <summary>根据属性列表以及对应的值列表，查找单个实体</summary>
            <param name="names">属性名称集合</param>
            <param name="values">属性值集合</param>
            <param name="selects">查询列，默认null表示所有字段</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.FindUnique(XCode.Expression)">
            <summary>根据条件查找唯一的单个实体</summary>
            根据条件查找唯一的单个实体，因为是唯一的，所以不需要分页和排序。
            如果不确定是否唯一，一定不要调用该方法，否则会返回大量的数据。
            <remarks>
            </remarks>
            <param name="where">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.FindUnique(XCode.Expression,System.String)">
            <summary>根据条件查找唯一的单个实体</summary>
            根据条件查找唯一的单个实体，因为是唯一的，所以不需要分页和排序。
            如果不确定是否唯一，一定不要调用该方法，否则会返回大量的数据。
            <remarks>
            </remarks>
            <param name="where">查询条件</param>
            <param name="selects">查询列，默认null表示所有字段</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.Find(System.String)">
            <summary>根据条件查找单个实体</summary>
            <param name="whereClause">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.Find(XCode.Expression)">
            <summary>根据条件查找单个实体</summary>
            <param name="where">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.Find(XCode.Expression,System.String)">
            <summary>根据条件查找单个实体</summary>
            <param name="where">查询条件</param>
            <param name="selects">查询列，默认null表示所有字段</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.FindByKey(System.Object,System.String)">
            <summary>根据主键查找单个实体</summary>
            <param name="key">唯一主键的值</param>
            <param name="selects">查询列，默认null表示所有字段</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.FindByKey(System.Object)">
            <summary>根据主键查找单个实体</summary>
            <param name="key">唯一主键的值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.FindByKeyForEdit(System.Object)">
            <summary>根据主键查询一个实体对象用于表单编辑</summary>
            <param name="key">唯一主键的值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.FindMin(System.String,XCode.Expression)">
            <summary>查询指定字段的最小值</summary>
            <param name="field">指定字段</param>
            <param name="where">条件字句</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.FindMax(System.String,XCode.Expression)">
            <summary>查询指定字段的最大值</summary>
            <param name="field">指定字段</param>
            <param name="where">条件字句</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.FindAll">
            <summary>获取所有数据。获取大量数据时会非常慢，慎用。没有数据时返回空集合而不是null</summary>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.Entity`1.FindAll(System.String,System.String,System.String,System.Int64,System.Int64)">
            <summary>最标准的查询数据。没有数据时返回空集合而不是null</summary>
            <remarks>
            最经典的批量查询，看这个Select @selects From Table Where @where Order By @order Limit @startRowIndex,@maximumRows，你就明白各参数的意思了。
            </remarks>
            <param name="where">条件字句，不带Where</param>
            <param name="order">排序字句，不带Order By</param>
            <param name="selects">查询列，默认null表示所有字段</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>实体集</returns>
        </member>
        <member name="M:XCode.Entity`1.FindAll(XCode.Expression,System.String,System.String,System.Int64,System.Int64)">
            <summary>最标准的查询数据。没有数据时返回空集合而不是null</summary>
            <remarks>
            最经典的批量查询，看这个Select @selects From Table Where @where Order By @order Limit @startRowIndex,@maximumRows，你就明白各参数的意思了。
            </remarks>
            <param name="where">条件字句，不带Where</param>
            <param name="order">排序字句，不带Order By</param>
            <param name="selects">查询列，默认null表示所有字段</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>实体集</returns>
        </member>
        <member name="M:XCode.Entity`1.FindAll(XCode.Expression,NewLife.Data.PageParameter,System.String)">
            <summary>同时查询满足条件的记录集和记录总数。没有数据时返回空集合而不是null</summary>
            <param name="where">条件，不带Where</param>
            <param name="page">分页排序参数，同时返回满足条件的总记录数</param>
            <param name="selects">查询列，默认null表示所有字段</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.FindAll(System.String)">
            <summary>执行SQl获取数据集</summary>
            <param name="sql">SQL语句</param>
            <returns>实体集</returns>
        </member>
        <member name="M:XCode.Entity`1.FindData(XCode.Expression,System.String,System.String,System.Int64,System.Int64)">
            <summary>查询数据，返回内存表DbTable而不是实体列表</summary>
            <remarks>
            最经典的批量查询，看这个Select @selects From Table Where @where Order By @order Limit @startRowIndex,@maximumRows，你就明白各参数的意思了。
            </remarks>
            <param name="where">条件字句，不带Where</param>
            <param name="order">排序字句，不带Order By</param>
            <param name="selects">查询列，默认null表示所有字段</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>内存表</returns>
        </member>
        <member name="M:XCode.Entity`1.FindAllWithCache">
            <summary>查找所有缓存。没有数据时返回空集合而不是null</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.FindAsync(XCode.Expression)">
            <summary>根据条件查找单个实体</summary>
            <param name="where">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.FindAllAsync">
            <summary>获取所有数据。获取大量数据时会非常慢，慎用。没有数据时返回空集合而不是null</summary>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.Entity`1.FindAllAsync(XCode.Expression,System.String,System.String,System.Int64,System.Int64)">
            <summary>最标准的查询数据。没有数据时返回空集合而不是null</summary>
            <remarks>
            最经典的批量查询，看这个Select @selects From Table Where @where Order By @order Limit @startRowIndex,@maximumRows，你就明白各参数的意思了。
            </remarks>
            <param name="where">条件字句，不带Where</param>
            <param name="order">排序字句，不带Order By</param>
            <param name="selects">查询列，默认null表示所有字段</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>实体集</returns>
        </member>
        <member name="M:XCode.Entity`1.FindAllAsync(XCode.Expression,NewLife.Data.PageParameter,System.String)">
            <summary>同时查询满足条件的记录集和记录总数。没有数据时返回空集合而不是null</summary>
            <param name="where">条件，不带Where</param>
            <param name="page">分页排序参数，同时返回满足条件的总记录数</param>
            <param name="selects">查询列，默认null表示所有字段</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.FindCountAsync">
            <summary>返回总记录数</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.FindCountAsync(XCode.Expression,System.String,System.String,System.Int64,System.Int64)">
            <summary>返回总记录数</summary>
            <param name="where">条件，不带Where</param>
            <param name="order">排序，不带Order By。这里无意义，仅仅为了保持与FindAll相同的方法签名</param>
            <param name="selects">查询列。这里无意义，仅仅为了保持与FindAll相同的方法签名</param>
            <param name="startRowIndex">开始行，0表示第一行。这里无意义，仅仅为了保持与FindAll相同的方法签名</param>
            <param name="maximumRows">最大返回行数，0表示所有行。这里无意义，仅仅为了保持与FindAll相同的方法签名</param>
            <returns>总行数</returns>
        </member>
        <member name="M:XCode.Entity`1.FindCount">
            <summary>返回总记录数</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.FindCount(System.String,System.String,System.String,System.Int64,System.Int64)">
            <summary>返回总记录数</summary>
            <param name="where">条件，不带Where</param>
            <param name="order">排序，不带Order By。这里无意义，仅仅为了保持与FindAll相同的方法签名</param>
            <param name="selects">查询列。这里无意义，仅仅为了保持与FindAll相同的方法签名</param>
            <param name="startRowIndex">开始行，0表示第一行。这里无意义，仅仅为了保持与FindAll相同的方法签名</param>
            <param name="maximumRows">最大返回行数，0表示所有行。这里无意义，仅仅为了保持与FindAll相同的方法签名</param>
            <returns>总行数</returns>
        </member>
        <member name="M:XCode.Entity`1.FindCount(XCode.Expression,System.String,System.String,System.Int64,System.Int64)">
            <summary>返回总记录数</summary>
            <param name="where">条件，不带Where</param>
            <param name="order">排序，不带Order By。这里无意义，仅仅为了保持与FindAll相同的方法签名</param>
            <param name="selects">查询列。这里无意义，仅仅为了保持与FindAll相同的方法签名</param>
            <param name="startRowIndex">开始行，0表示第一行。这里无意义，仅仅为了保持与FindAll相同的方法签名</param>
            <param name="maximumRows">最大返回行数，0表示所有行。这里无意义，仅仅为了保持与FindAll相同的方法签名</param>
            <returns>总行数</returns>
        </member>
        <member name="M:XCode.Entity`1.FindSQL(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>获取查询SQL。主要用于构造子查询</summary>
            <param name="where">条件，不带Where</param>
            <param name="order">排序，不带Order By</param>
            <param name="selects">查询列</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>实体集</returns>
        </member>
        <member name="M:XCode.Entity`1.FindSQLWithKey(System.String)">
            <summary>获取查询唯一键的SQL。比如Select ID From Table</summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.Search(System.String,NewLife.Data.PageParameter)">
            <summary>同时查询满足条件的记录集和记录总数。没有数据时返回空集合而不是null</summary>
            <param name="key"></param>
            <param name="page">分页排序参数，同时返回满足条件的总记录数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.Search(System.String,NewLife.Data.PageParameter,System.String)">
            <summary>同时查询满足条件的指定查询列的记录集和记录总数。没有数据时返回空集合而不是null</summary>
            <param name="key"></param>
            <param name="page">分页排序参数，同时返回满足条件的总记录数</param>
            <param name="selects">查询列</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.Search(System.DateTime,System.DateTime,System.String,NewLife.Data.PageParameter)">
            <summary>同时查询满足条件的记录集和记录总数。没有数据时返回空集合而不是null</summary>
            <param name="start">开始时间</param>
            <param name="end">结束时间</param>
            <param name="key">关键字</param>
            <param name="page">分页排序参数，同时返回满足条件的总记录数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.SearchWhere(System.DateTime,System.DateTime,System.String,NewLife.Data.PageParameter)">
            <summary>构造高级查询条件</summary>
            <param name="start">开始时间</param>
            <param name="end">结束时间</param>
            <param name="key">关键字</param>
            <param name="page">分页排序参数，同时返回满足条件的总记录数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.SearchWhereByKeys(System.String,XCode.Configuration.FieldItem[],System.Func{System.String,XCode.Configuration.FieldItem[],XCode.WhereExpression})">
            <summary>根据空格分割的关键字集合构建查询条件</summary>
            <param name="keys">空格分割的关键字集合</param>
            <param name="fields">要查询的字段，默认为空表示查询所有字符串字段</param>
            <param name="func">处理每一个查询关键字的回调函数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.SearchWhereByKey(System.String,XCode.Configuration.FieldItem[])">
            <summary>构建关键字查询条件</summary>
            <param name="key">关键字</param>
            <param name="fields">要查询的字段，默认为空表示查询所有字符串字段</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.Insert(System.String[],System.Object[])">
            <summary>把一个实体对象持久化到数据库</summary>
            <param name="names">更新属性列表</param>
            <param name="values">更新值列表</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:XCode.Entity`1.Update(System.String,System.String)">
            <summary>更新一批实体数据</summary>
            <param name="setClause">要更新的项和数据</param>
            <param name="whereClause">指定要更新的实体</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.Update(System.String[],System.Object[],System.String[],System.Object[])">
            <summary>更新一批实体数据</summary>
            <param name="setNames">更新属性列表</param>
            <param name="setValues">更新值列表</param>
            <param name="whereNames">条件属性列表</param>
            <param name="whereValues">条件值列表</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:XCode.Entity`1.Delete(System.String)">
            <summary>从数据库中删除指定条件的实体对象。</summary>
            <param name="whereClause">限制条件</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.Delete(System.String[],System.Object[])">
            <summary>从数据库中删除指定属性列表和值列表所限定的实体对象。</summary>
            <param name="names">属性列表</param>
            <param name="values">值列表</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.CreateBuilder(XCode.Expression,System.String,System.String)">
            <summary>构造SQL查询语句</summary>
            <param name="where">条件</param>
            <param name="order">排序</param>
            <param name="selects">选择列</param>
            <returns></returns>
        </member>
        <member name="P:XCode.Entity`1.Item(System.String)">
            <summary>获取/设置 字段值。</summary>
            <remarks>
            一个索引，反射实现。
            派生实体类可重写该索引，以避免发射带来的性能损耗。
            基类已经实现了通用的快速访问，但是这里仍然重写，以增加控制，
            比如字段名是属性名前面加上_，并且要求是实体字段才允许这样访问，否则一律按属性处理。
            </remarks>
            <param name="name">字段名</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.OnRead(System.IO.Stream,System.Object,System.Boolean)">
            <summary>从数据流反序列化</summary>
            <param name="stream">数据流</param>
            <param name="context">上下文</param>
            <param name="extend">是否序列化扩展属性</param>
        </member>
        <member name="M:XCode.Entity`1.OnWrite(System.IO.Stream,System.Object,System.Boolean)">
            <summary>二进制序列化到数据流</summary>
            <param name="stream">数据流</param>
            <param name="context">上下文</param>
            <param name="extend">是否序列化扩展属性</param>
        </member>
        <member name="M:XCode.Entity`1.Clone">
            <summary>创建当前对象的克隆对象，仅拷贝基本字段</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.CloneEntity(System.Boolean)">
            <summary>克隆实体。创建当前对象的克隆对象，仅拷贝基本字段</summary>
            <param name="setDirty">是否设置脏数据。默认不设置</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.CloneEntityInternal(System.Boolean)">
            <summary>克隆实体</summary>
            <param name="setDirty"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.ResetDirty">
            <summary>从数据库查询数据，对比重置脏数据</summary>
            <remarks>
            在MVC中直接用实体对象接收前端数据进行更新操作时，脏数据可能不准确。
            该方法实现脏数据重置，确保可以准确保存到数据库。
            </remarks>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.GetOrAdd``1(``0,System.Func{``0,System.Boolean,`0},System.Func{``0,`0})">
            <summary>获取 或 新增 对象，带缓存查询，常用于统计等高并发更新的情况，一般配合SaveAsync</summary>
            <typeparam name="TKey"></typeparam>
            <param name="key">业务主键，如果是多字段混合索引，则建立一个模型类</param>
            <param name="find">查找函数</param>
            <param name="create">创建对象</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.GetOrAdd``1(``0,System.Func{``0,`0},System.Func{``0,`0})">
            <summary>获取 或 新增 对象，不带缓存查询，常用于统计等高并发更新的情况，一般配合SaveAsync</summary>
            <typeparam name="TKey"></typeparam>
            <param name="key">业务主键，如果是多字段混合索引，则建立一个模型类</param>
            <param name="find">查找函数</param>
            <param name="create">创建对象</param>
            <returns></returns>
        </member>
        <member name="T:XCode.Entity`1.Meta">
            <summary>实体元数据</summary>
        </member>
        <member name="P:XCode.Entity`1.Meta.ThisType">
            <summary>实体类型</summary>
        </member>
        <member name="P:XCode.Entity`1.Meta.Factory">
            <summary>实体操作者</summary>
        </member>
        <member name="P:XCode.Entity`1.Meta.Table">
            <summary>表信息</summary>
        </member>
        <member name="P:XCode.Entity`1.Meta.ConnName">
            <summary>链接名。线程内允许修改，修改者负责还原。若要还原默认值，设为null即可</summary>
        </member>
        <member name="P:XCode.Entity`1.Meta.TableName">
            <summary>表名。线程内允许修改，修改者负责还原</summary>
        </member>
        <member name="P:XCode.Entity`1.Meta.AllFields">
            <summary>所有数据属性</summary>
        </member>
        <member name="P:XCode.Entity`1.Meta.Fields">
            <summary>所有绑定到数据表的属性</summary>
        </member>
        <member name="P:XCode.Entity`1.Meta.FieldNames">
            <summary>字段名集合，不区分大小写的哈希表存储，外部不要修改元素数据</summary>
        </member>
        <member name="P:XCode.Entity`1.Meta.Unique">
            <summary>唯一键，返回第一个标识列或者唯一的主键</summary>
        </member>
        <member name="P:XCode.Entity`1.Meta.Master">
            <summary>主字段。主字段作为业务主要字段，代表当前数据行意义</summary>
        </member>
        <member name="P:XCode.Entity`1.Meta.Session">
            <summary>实体会话。线程静态</summary>
        </member>
        <member name="M:XCode.Entity`1.Meta.BeginTrans">
            <summary>开始事务</summary>
            <returns>剩下的事务计数</returns>
        </member>
        <member name="M:XCode.Entity`1.Meta.Commit">
            <summary>提交事务</summary>
            <returns>剩下的事务计数</returns>
        </member>
        <member name="M:XCode.Entity`1.Meta.Rollback">
            <summary>回滚事务，忽略异常</summary>
            <returns>剩下的事务计数</returns>
        </member>
        <member name="M:XCode.Entity`1.Meta.CreateTrans">
            <summary>创建事务</summary>
        </member>
        <member name="P:XCode.Entity`1.Meta.Cache">
            <summary>实体缓存</summary>
            <returns></returns>
        </member>
        <member name="P:XCode.Entity`1.Meta.SingleCache">
            <summary>单对象实体缓存。</summary>
        </member>
        <member name="P:XCode.Entity`1.Meta.Count">
            <summary>总记录数，小于1000时是精确的，大于1000时缓存10分钟</summary>
        </member>
        <member name="P:XCode.Entity`1.Meta.ShardPolicy">
            <summary>分表分库策略</summary>
        </member>
        <member name="M:XCode.Entity`1.Meta.CreateSplit(System.String,System.String)">
            <summary>创建分库会话，using结束时自动还原</summary>
            <param name="connName">连接名</param>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.Meta.CreateShard(`0)">
            <summary>针对实体对象自动分库分表</summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.Meta.CreateShard(System.Object)">
            <summary>为实体对象、时间、雪花Id等计算分表分库</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.Meta.AutoShard``1(System.DateTime,System.DateTime,System.Func{``0})">
            <summary>针对时间区间自动分库分表，常用于多表顺序查询，支持倒序</summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.Entity`1.Meta.SplitPackge.ConnName">
            <summary>连接名</summary>
        </member>
        <member name="P:XCode.Entity`1.Meta.SplitPackge.TableName">
            <summary>表名</summary>
        </member>
        <member name="P:XCode.Entity`1.Meta.Modules">
            <summary>实体模块集合</summary>
        </member>
        <member name="T:XCode.Entity`1.DefaultEntityFactory">
            <summary>默认的实体工厂</summary>
        </member>
        <member name="P:XCode.Entity`1.DefaultEntityFactory.EntityType">
            <summary>实体类型</summary>
        </member>
        <member name="P:XCode.Entity`1.DefaultEntityFactory.Session">
            <summary>实体会话</summary>
        </member>
        <member name="P:XCode.Entity`1.DefaultEntityFactory.Persistence">
            <summary>实体持久化</summary>
        </member>
        <member name="P:XCode.Entity`1.DefaultEntityFactory.Accessor">
            <summary>数据行访问器，把数据行映射到实体类</summary>
        </member>
        <member name="P:XCode.Entity`1.DefaultEntityFactory.Default">
            <summary>默认实体</summary>
        </member>
        <member name="P:XCode.Entity`1.DefaultEntityFactory.Table">
            <summary>数据表元数据</summary>
        </member>
        <member name="P:XCode.Entity`1.DefaultEntityFactory.AllFields">
            <summary>所有数据属性</summary>
        </member>
        <member name="P:XCode.Entity`1.DefaultEntityFactory.Fields">
            <summary>所有绑定到数据表的属性</summary>
        </member>
        <member name="P:XCode.Entity`1.DefaultEntityFactory.FieldNames">
            <summary>字段名集合，不区分大小写的哈希表存储，外部不要修改元素数据</summary>
        </member>
        <member name="P:XCode.Entity`1.DefaultEntityFactory.Unique">
            <summary>唯一键，返回第一个标识列或者唯一的主键</summary>
        </member>
        <member name="P:XCode.Entity`1.DefaultEntityFactory.Master">
            <summary>主字段。主字段作为业务主要字段，代表当前数据行意义</summary>
        </member>
        <member name="P:XCode.Entity`1.DefaultEntityFactory.ConnName">
            <summary>连接名。当前线程正在使用的连接名</summary>
        </member>
        <member name="P:XCode.Entity`1.DefaultEntityFactory.TableName">
            <summary>表名。当前线程正在使用的表名</summary>
        </member>
        <member name="M:XCode.Entity`1.DefaultEntityFactory.#ctor">
            <summary>构造实体工厂</summary>
        </member>
        <member name="M:XCode.Entity`1.DefaultEntityFactory.Create(System.Boolean)">
            <summary>创建一个实体对象</summary>
            <param name="forEdit">是否为了编辑而创建，如果是，可以再次做一些相关的初始化工作</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.DefaultEntityFactory.LoadData(System.Data.DataSet)">
            <summary>加载记录集</summary>
            <param name="ds">记录集</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.Entity`1.DefaultEntityFactory.Find(System.String,System.Object)">
            <summary>根据属性以及对应的值，查找单个实体</summary>
            <param name="name">名称</param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.DefaultEntityFactory.Find(XCode.Expression)">
            <summary>根据条件查找单个实体</summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.DefaultEntityFactory.FindByKey(System.Object)">
            <summary>根据主键查找单个实体</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.DefaultEntityFactory.FindByKeyForEdit(System.Object)">
            <summary>根据主键查询一个实体对象用于表单编辑</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.DefaultEntityFactory.FindAll">
            <summary>获取所有实体对象。获取大量数据时会非常慢，慎用</summary>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.Entity`1.DefaultEntityFactory.FindAll(System.String,System.String,System.String,System.Int64,System.Int64)">
            <summary>查询并返回实体对象集合。
            表名以及所有字段名，请使用类名以及字段对应的属性名，方法内转换为表名和列名
            </summary>
            <param name="where">条件，不带Where</param>
            <param name="order">排序，不带Order By</param>
            <param name="selects">查询列</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.Entity`1.DefaultEntityFactory.FindAll(XCode.Expression,System.String,System.String,System.Int64,System.Int64)">
            <summary>查询并返回实体对象集合。
            表名以及所有字段名，请使用类名以及字段对应的属性名，方法内转换为表名和列名
            </summary>
            <param name="where">条件，不带Where</param>
            <param name="order">排序，不带Order By</param>
            <param name="selects">查询列</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.Entity`1.DefaultEntityFactory.FindAllWithCache">
            <summary>查找实体缓存所有数据</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.DefaultEntityFactory.FindCount">
            <summary>返回总记录数</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.DefaultEntityFactory.FindCount(System.String,System.String,System.String,System.Int64,System.Int64)">
            <summary>返回总记录数</summary>
            <param name="where">条件，不带Where</param>
            <param name="order">排序，不带Order By</param>
            <param name="selects">查询列</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>总行数</returns>
        </member>
        <member name="M:XCode.Entity`1.DefaultEntityFactory.FindCount(XCode.Expression)">
            <summary>返回总记录数</summary>
            <param name="where">条件，不带Where</param>
            <returns>总行数</returns>
        </member>
        <member name="M:XCode.Entity`1.DefaultEntityFactory.GetSession(System.String,System.String)">
            <summary>获取指定连接和表的实体会话。可用于分表逻辑</summary>
            <param name="connName">连接名</param>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="P:XCode.Entity`1.DefaultEntityFactory.ShardPolicy">
            <summary>分表分库策略</summary>
        </member>
        <member name="M:XCode.Entity`1.DefaultEntityFactory.CreateSplit(System.String,System.String)">
            <summary>创建分库会话，using结束时自动还原</summary>
            <param name="connName">连接名</param>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.DefaultEntityFactory.CreateShard(XCode.IEntity)">
            <summary>针对实体对象自动分库分表</summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.DefaultEntityFactory.CreateShard(System.Object)">
            <summary>为实体对象、时间、雪花Id等计算分表分库</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.DefaultEntityFactory.AutoShard``1(System.DateTime,System.DateTime,System.Func{``0})">
            <summary>针对时间区间自动分库分表，常用于多表顺序查询，支持倒序</summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.DefaultEntityFactory.GetOrAdd``1(``0,System.Func{``0,System.Boolean,XCode.IEntity},System.Func{``0,XCode.IEntity})">
            <summary>获取 或 新增 对象，常用于统计等高并发更新的情况，一般配合SaveAsync</summary>
            <typeparam name="TKey"></typeparam>
            <param name="key">业务主键</param>
            <param name="find">查找函数</param>
            <param name="create">创建对象</param>
            <returns></returns>
        </member>
        <member name="P:XCode.Entity`1.DefaultEntityFactory.AutoIdentity">
            <summary>是否自增获取自增返回值。默认启用</summary>
        </member>
        <member name="P:XCode.Entity`1.DefaultEntityFactory.AllowInsertIdentity">
            <summary>是否允许向自增列插入数据。为免冲突，仅本线程有效</summary>
        </member>
        <member name="P:XCode.Entity`1.DefaultEntityFactory.AutoSetGuidField">
            <summary>自动设置Guid的字段。对实体类有效，可在实体类类型构造函数里面设置</summary>
        </member>
        <member name="P:XCode.Entity`1.DefaultEntityFactory.AdditionalFields">
            <summary>默认累加字段</summary>
        </member>
        <member name="P:XCode.Entity`1.DefaultEntityFactory.MasterTime">
            <summary>主时间字段。代表当前数据行更新时间</summary>
        </member>
        <member name="P:XCode.Entity`1.DefaultEntityFactory.Selects">
            <summary>默认选择的字段</summary>
        </member>
        <member name="P:XCode.Entity`1.DefaultEntityFactory.SelectStat">
            <summary>默认选择统计语句</summary>
        </member>
        <member name="P:XCode.Entity`1.DefaultEntityFactory.Modules">
            <summary>实体模块集合</summary>
        </member>
        <member name="P:XCode.Entity`1.DefaultEntityFactory.FullInsert">
            <summary>是否完全插入所有字段。默认false表示不插入没有脏数据的字段</summary>
        </member>
        <member name="P:XCode.Entity`1.DefaultEntityFactory.Snow">
            <summary>雪花Id生成器。Int64主键非自增时，自动填充</summary>
        </member>
        <member name="P:XCode.Entity`1.DefaultEntityFactory.Template">
            <summary>Sql模版</summary>
        </member>
        <member name="P:XCode.Entity`1.DefaultEntityFactory.OrderByKey">
            <summary>按照主键排序。默认查询没有指定排序字段时，是否增加主键排序，整型降序其它升序，默认true</summary>
        </member>
        <member name="T:XCode.EntityBase">
            <summary>数据实体基类的基类</summary>
        </member>
        <member name="M:XCode.EntityBase.InitData">
            <summary>首次连接数据库时初始化数据，仅用于实体类重载，用户不应该调用该方法</summary>
        </member>
        <member name="M:XCode.EntityBase.OnLoad">
            <summary>填充数据完成时调用。默认设定标记<see cref="P:XCode.EntityBase.IsFromDatabase"/></summary>
        </member>
        <member name="P:XCode.EntityBase.IsFromDatabase">
            <summary>是否来自数据库。设置相同属性值时不改变脏数据</summary>
        </member>
        <member name="P:XCode.EntityBase.XCode#IEntity#IsFromDatabase">
            <summary>是否来自数据库。设置相同属性值时不改变脏数据</summary>
        </member>
        <member name="M:XCode.EntityBase.Insert">
            <summary>把该对象持久化到数据库</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityBase.Update">
            <summary>更新数据库</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityBase.Delete">
            <summary>从数据库中删除该对象</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityBase.InsertAsync">
            <summary>把该对象持久化到数据库</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityBase.UpdateAsync">
            <summary>更新数据库</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityBase.DeleteAsync">
            <summary>从数据库中删除该对象</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityBase.Save">
            <summary>保存。根据主键检查数据库中是否已存在该对象，再决定调用Insert或Update</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityBase.SaveWithoutValid">
            <summary>不需要验证的保存</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityBase.SaveAsync(System.Int32)">
            <summary>异步保存。实现延迟保存，大事务保存。主要面向日志表和频繁更新的在线记录表</summary>
            <param name="msDelay">延迟保存的时间。默认0ms近实时保存</param>
            <returns>是否成功加入异步队列</returns>
        </member>
        <member name="M:XCode.EntityBase.Valid(System.Boolean)">
            <summary>验证数据，通过抛出异常的方式提示验证失败。</summary>
            <remarks>建议重写者调用基类的实现，因为基类根据数据字段的唯一索引进行数据验证。</remarks>
            <param name="isNew">是否新数据</param>
        </member>
        <member name="M:XCode.EntityBase.Valid(XCode.DataMethod)">
            <summary>验证数据，支持添删改，通过返回值表示验证失败</summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.EntityBase.Item(System.String)">
            <summary>获取/设置 字段值，不影响脏数据</summary>
            <param name="name">字段名</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityBase.SetItem(System.String,System.Object)">
            <summary>设置字段值，该方法影响脏数据。</summary>
            <param name="name">字段名</param>
            <param name="value">值</param>
            <returns>返回是否成功设置了数据</returns>
        </member>
        <member name="M:XCode.EntityBase.Clone">
            <summary>创建当前对象的克隆对象，仅拷贝基本字段</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityBase.XCode#IEntity#CloneEntity(System.Boolean)">
            <summary>克隆实体。创建当前对象的克隆对象，仅拷贝基本字段</summary>
            <param name="setDirty">是否设置脏数据</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityBase.CloneEntityInternal(System.Boolean)">
            <summary>克隆实体</summary>
            <param name="setDirty"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityBase.CopyFrom(XCode.IEntity,System.Boolean)">
            <summary>复制来自指定实体的成员，可以是不同类型的实体，只复制共有的基本字段，影响脏数据</summary>
            <param name="entity">来源实体对象</param>
            <param name="setDirty">是否设置脏数据</param>
            <returns>实际复制成员数</returns>
        </member>
        <member name="M:XCode.EntityBase.CopyFrom(NewLife.Data.IModel,System.Boolean)">
            <summary>复制来自指定模型的成员，可以是不同类型</summary>
            <param name="model">来源实体对象</param>
            <param name="setDirty">是否设置脏数据</param>
            <returns>实际复制成员数</returns>
        </member>
        <member name="P:XCode.EntityBase.Dirtys">
            <summary>脏属性。存储哪些属性的数据被修改过了。</summary>
        </member>
        <member name="P:XCode.EntityBase.XCode#IEntity#Dirtys">
            <summary>脏属性。存储哪些属性的数据被修改过了。</summary>
        </member>
        <member name="M:XCode.EntityBase.IsDirty(System.String)">
            <summary>是否有脏数据。被修改为不同值</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityBase.XCode#IEntity#IsDirty(System.String)">
            <summary>是否有脏数据。被修改为不同值</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.EntityBase.HasDirty">
            <summary>是否有脏数据。决定是否可以Update</summary>
        </member>
        <member name="P:XCode.EntityBase.XCode#IEntity#HasDirty">
            <summary>是否有脏数据。决定是否可以Update</summary>
        </member>
        <member name="P:XCode.EntityBase.Extends">
            <summary>扩展属性。避免在序列化中出现</summary>
        </member>
        <member name="P:XCode.EntityBase.XCode#IEntity#Extends">
            <summary>扩展属性。避免在序列化中出现</summary>
        </member>
        <member name="P:XCode.EntityBase.NewLife#Data#IExtend#Items">
            <summary>扩展字段。存放未能映射到实体属性的数据库字段</summary>
        </member>
        <member name="P:XCode.EntityBase.NewLife#Data#IExtend#Item(System.String)">
            <summary>仅用于扩展数据的索引器</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.EntityBase.XCode#IEntity#Addition">
            <summary>累加</summary>
        </member>
        <member name="P:XCode.EntityBase.XCode#IEntity#IsNullKey">
            <summary>主键是否为空</summary>
        </member>
        <member name="P:XCode.EntityBase.IsNullKey">
            <summary>主键是否为空</summary>
        </member>
        <member name="M:XCode.EntityBase.XCode#IEntity#SetNullKey">
            <summary>设置主键为空。Save将调用Insert</summary>
        </member>
        <member name="M:XCode.EntityBase.XCode#IEntity#EqualTo(XCode.IEntity)">
            <summary>判断两个实体是否相等。有可能是同一条数据的两个实体对象</summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="E:XCode.EntityBase.PropertyChanging">
            <summary>属性将要改变时</summary>
        </member>
        <member name="E:XCode.EntityBase.PropertyChanged">
            <summary>属性改变事件</summary>
        </member>
        <member name="M:XCode.EntityBase.OnPropertyChanging(System.String,System.Object)">
            <summary>属性改变。重载时记得调用基类的该方法，以设置脏数据属性，否则数据将无法Update到数据库。</summary>
            <param name="fieldName">字段名</param>
            <param name="newValue">新属性值</param>
            <returns>是否允许改变</returns>
        </member>
        <member name="M:XCode.EntityBase.CheckEqual(System.Object,System.Object)">
            <summary>检查相等，主要特殊处理时间相等</summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityBase.OnPropertyChanged(System.String)">
            <summary>属性改变。重载时记得调用基类的该方法，以设置脏数据属性，否则数据将无法Update到数据库。</summary>
            <param name="fieldName">字段名</param>
        </member>
        <member name="T:XCode.EntityExtend">
            <summary>实体扩展</summary>
        </member>
        <member name="P:XCode.EntityExtend.Expire">
            <summary>过期时间。单位是秒</summary>
        </member>
        <member name="M:XCode.EntityExtend.#ctor">
            <summary>实例化一个不区分键大小写的实体扩展</summary>
        </member>
        <member name="M:XCode.EntityExtend.Get``1(System.String,System.Func{System.String,``0})">
            <summary>扩展获取数据项，当数据项不存在时，通过调用委托获取数据项。线程安全。</summary>
            <param name="key">键</param>
            <param name="func">获取值的委托，该委托以键作为参数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityExtend.Clear">
            <summary>清空扩展属性</summary>
        </member>
        <member name="T:XCode.EntityExtend.CacheItem">
            <summary>缓存项</summary>
        </member>
        <member name="P:XCode.EntityExtend.CacheItem.Value">
            <summary>数值</summary>
        </member>
        <member name="P:XCode.EntityExtend.CacheItem.ExpiredTime">
            <summary>过期时间</summary>
        </member>
        <member name="P:XCode.EntityExtend.CacheItem.Expired">
            <summary>是否过期</summary>
        </member>
        <member name="T:XCode.EntityExtension">
            <summary>实体扩展方法</summary>
        </member>
        <member name="M:XCode.EntityExtension.ToDictionary``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>实体列表转为字典。主键为Key</summary>
            <param name="list">实体列表</param>
            <param name="valueField">作为Value部分的字段，默认为空表示整个实体对象为值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityExtension.CreateParameter``1(``0,XCode.IEntitySession)">
            <summary>从实体对象创建参数</summary>
            <typeparam name="T"></typeparam>
            <param name="entity">实体对象</param>
            <param name="session">指定会话，分表分库时必用</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityExtension.CreateParameters``1(System.Collections.Generic.IEnumerable{``0},XCode.IEntitySession)">
            <summary>从实体列表创建参数</summary>
            <param name="list">实体列表</param>
            <param name="session">指定会话，分表分库时必用</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityExtension.Insert``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Boolean},XCode.IEntitySession)">
            <summary>把整个集合插入到数据库</summary>
            <param name="list">实体列表</param>
            <param name="useTransition">是否使用事务保护</param>
            <param name="session">指定会话，分表分库时必用</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityExtension.Update``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Boolean},XCode.IEntitySession)">
            <summary>把整个集合更新到数据库</summary>
            <param name="list">实体列表</param>
            <param name="useTransition">是否使用事务保护</param>
            <param name="session">指定会话，分表分库时必用</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityExtension.Save``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Boolean},XCode.IEntitySession)">
            <summary>把整个保存更新到数据库</summary>
            <param name="list">实体列表</param>
            <param name="useTransition">是否使用事务保护</param>
            <param name="session">指定会话，分表分库时必用</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityExtension.SaveWithoutValid``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Boolean},XCode.IEntitySession)">
            <summary>把整个保存更新到数据库，保存时不需要验证</summary>
            <param name="list">实体列表</param>
            <param name="useTransition">是否使用事务保护</param>
            <param name="session">指定会话，分表分库时必用</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityExtension.Delete``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Boolean},XCode.IEntitySession)">
            <summary>把整个集合从数据库中删除</summary>
            <param name="list">实体列表</param>
            <param name="useTransition">是否使用事务保护</param>
            <param name="session">指定会话，分表分库时必用</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityExtension.Valid``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>批量验证对象</summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="isNew"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityExtension.BatchInsert``1(System.Collections.Generic.IEnumerable{``0},XCode.DataAccessLayer.IDataColumn[],XCode.IEntitySession)">
            <summary>批量插入</summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="list">实体列表</param>
            <param name="columns">要插入的字段，默认所有字段</param>
            <param name="session">指定会话，分表分库时必用</param>
            <returns>
            Oracle：当批量插入操作中有一条记录无法正常写入，则本次写入的所有数据都不会被写入（可以理解为自带事务）
            MySQL：当批量插入操作中有一条记录无法正常写入，则本次写入的所有数据都不会被写入（可以理解为自带事务）
            </returns>
        </member>
        <member name="M:XCode.EntityExtension.BatchInsert``1(System.Collections.Generic.IEnumerable{``0},XCode.Model.BatchOption,XCode.IEntitySession)">
            <summary>批量插入</summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="list">实体列表</param>
            <param name="option">批操作选项</param>
            <param name="session">指定会话，分表分库时必用</param>
            <returns>
            Oracle：当批量插入操作中有一条记录无法正常写入，则本次写入的所有数据都不会被写入（可以理解为自带事务）
            MySQL：当批量插入操作中有一条记录无法正常写入，则本次写入的所有数据都不会被写入（可以理解为自带事务）
            </returns>
        </member>
        <member name="M:XCode.EntityExtension.BatchInsertIgnore``1(System.Collections.Generic.IEnumerable{``0},XCode.DataAccessLayer.IDataColumn[],XCode.IEntitySession)">
            <summary>批量忽略插入</summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="list">实体列表</param>
            <param name="columns">要插入的字段，默认所有字段</param>
            <param name="session">指定会话，分表分库时必用</param>
            <returns>
            Oracle：当批量插入操作中有一条记录无法正常写入，则本次写入的所有数据都不会被写入（可以理解为自带事务）
            MySQL：当批量插入操作中有一条记录无法正常写入，则本次写入的所有数据都不会被写入（可以理解为自带事务）
            </returns>
        </member>
        <member name="M:XCode.EntityExtension.BatchInsertIgnore``1(System.Collections.Generic.IEnumerable{``0},XCode.Model.BatchOption,XCode.IEntitySession)">
            <summary>批量忽略插入</summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="list">实体列表</param>
            <param name="option">批操作选项</param>
            <param name="session">指定会话，分表分库时必用</param>
            <returns>
            Oracle：当批量插入操作中有一条记录无法正常写入，则本次写入的所有数据都不会被写入（可以理解为自带事务）
            MySQL：当批量插入操作中有一条记录无法正常写入，则本次写入的所有数据都不会被写入（可以理解为自带事务）
            </returns>
        </member>
        <member name="M:XCode.EntityExtension.BatchReplace``1(System.Collections.Generic.IEnumerable{``0},XCode.DataAccessLayer.IDataColumn[],XCode.IEntitySession)">
            <summary>批量替换</summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="list">实体列表</param>
            <param name="columns">要插入的字段，默认所有字段</param>
            <param name="session">指定会话，分表分库时必用</param>
            <returns>
            Oracle：当批量插入操作中有一条记录无法正常写入，则本次写入的所有数据都不会被写入（可以理解为自带事务）
            MySQL：当批量插入操作中有一条记录无法正常写入，则本次写入的所有数据都不会被写入（可以理解为自带事务）
            </returns>
        </member>
        <member name="M:XCode.EntityExtension.BatchReplace``1(System.Collections.Generic.IEnumerable{``0},XCode.Model.BatchOption,XCode.IEntitySession)">
            <summary>批量替换</summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="list">实体列表</param>
            <param name="option">批操作选项</param>
            <param name="session">指定会话，分表分库时必用</param>
            <returns>
            Oracle：当批量插入操作中有一条记录无法正常写入，则本次写入的所有数据都不会被写入（可以理解为自带事务）
            MySQL：当批量插入操作中有一条记录无法正常写入，则本次写入的所有数据都不会被写入（可以理解为自带事务）
            </returns>
        </member>
        <member name="M:XCode.EntityExtension.BatchUpdate``1(System.Collections.Generic.IEnumerable{``0},XCode.DataAccessLayer.IDataColumn[],System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String},XCode.IEntitySession)">
            <summary>批量更新</summary>
            <remarks>
            注意类似：XCode.Exceptions.XSqlException: ORA-00933: SQL 命令未正确结束
            [SQL:Update tablen_Name Set FieldName=:FieldName W [:FieldName=System.Int32[]]][DB:AAA/Oracle]
            建议是优先检查表是否存在主键，如果由于没有主键导致，即使通过try...cache 依旧无法正常保存。
            </remarks>
            <typeparam name="T">实体类型</typeparam>
            <param name="list">实体列表</param>
            <param name="columns">要更新的字段，默认所有字段</param>
            <param name="updateColumns">要更新的字段，默认脏数据</param>
            <param name="addColumns">要累加更新的字段，默认累加</param>
            <param name="session">指定会话，分表分库时必用</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityExtension.BatchUpdate``1(System.Collections.Generic.IEnumerable{``0},XCode.Model.BatchOption,XCode.IEntitySession)">
            <summary>批量更新</summary>
            <remarks>
            注意类似：XCode.Exceptions.XSqlException: ORA-00933: SQL 命令未正确结束
            [SQL:Update tablen_Name Set FieldName=:FieldName W [:FieldName=System.Int32[]]][DB:AAA/Oracle]
            建议是优先检查表是否存在主键，如果由于没有主键导致，即使通过try...cache 依旧无法正常保存。
            </remarks>
            <typeparam name="T">实体类型</typeparam>
            <param name="list">实体列表</param>
            <param name="option">批操作选项</param>
            <param name="session">指定会话，分表分库时必用</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityExtension.Upsert``1(System.Collections.Generic.IEnumerable{``0},XCode.DataAccessLayer.IDataColumn[],System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String},XCode.IEntitySession)">
            <summary>批量插入或更新</summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="list">实体列表</param>
            <param name="columns">要插入的字段，默认所有字段</param>
            <param name="updateColumns">要更新的字段，默认脏数据</param>
            <param name="addColumns">要累加更新的字段，默认累加</param>
            <param name="session">指定会话，分表分库时必用</param>
            <returns>
            MySQL返回值：返回值相当于流程执行次数，及时insert失败也会累计一次执行（所以不建议通过该返回值确定操作记录数）
            do insert success = 1次; 
            do update success =2次(insert 1次+update 1次)，
            简单来说：对于一行记录，如果Insert 成功则返回1，如果需要执行的是update 则返回2
            Oracle返回值：无论是插入还是更新返回的都始终为-1
            </returns>
        </member>
        <member name="M:XCode.EntityExtension.BatchUpsert``1(System.Collections.Generic.IEnumerable{``0},XCode.Model.BatchOption,XCode.IEntitySession)">
            <summary>批量插入或更新</summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="list">实体列表</param>
            <param name="option">批操作选项</param>
            <param name="session">指定会话，分表分库时必用</param>
            <returns>
            MySQL返回值：返回值相当于流程执行次数，及时insert失败也会累计一次执行（所以不建议通过该返回值确定操作记录数）
            do insert success = 1次; 
            do update success =2次(insert 1次+update 1次)，
            简单来说：对于一行记录，如果Insert 成功则返回1，如果需要执行的是update 则返回2
            Oracle返回值：无论是插入还是更新返回的都始终为-1
            </returns>
        </member>
        <member name="M:XCode.EntityExtension.Upsert(XCode.IEntity,XCode.DataAccessLayer.IDataColumn[],System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String},XCode.IEntitySession)">
            <summary>批量插入或更新</summary>
            <param name="entity">实体对象</param>
            <param name="columns">要插入的字段，默认所有字段</param>
            <param name="updateColumns">主键已存在时，要更新的字段</param>
            <param name="addColumns">主键已存在时，要累加更新的字段</param>
            <param name="session">指定会话，分表分库时必用</param>
            <returns>
            MySQL返回值：返回值相当于流程执行次数，及时insert失败也会累计一次执行（所以不建议通过该返回值确定操作记录数）
            do insert success = 1次; 
            do update success =2次(insert 1次+update 1次)，
            简单来说：如果Insert 成功则返回1，如果需要执行的是update 则返回2，
            </returns>
        </member>
        <member name="M:XCode.EntityExtension.Upsert(XCode.IEntity,XCode.Model.BatchOption,XCode.IEntitySession)">
            <summary>批量插入或更新</summary>
            <param name="entity">实体对象</param>
            <param name="option">批操作选项</param>
            <param name="session">指定会话，分表分库时必用</param>
            <returns>
            MySQL返回值：返回值相当于流程执行次数，及时insert失败也会累计一次执行（所以不建议通过该返回值确定操作记录数）
            do insert success = 1次; 
            do update success =2次(insert 1次+update 1次)，
            简单来说：如果Insert 成功则返回1，如果需要执行的是update 则返回2，
            </returns>
        </member>
        <member name="M:XCode.EntityExtension.GetDirtyColumns(XCode.IEntityFactory,System.Collections.Generic.IEnumerable{XCode.IEntity})">
            <summary>获取可用于插入的数据列</summary>
            <param name="fact"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityExtension.ToTable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>转为DbTable</summary>
            <param name="list">实体列表</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityExtension.Write``1(System.Collections.Generic.IEnumerable{``0},System.IO.Stream)">
            <summary>写入数据流</summary>
            <param name="list">实体列表</param>
            <param name="stream">数据流</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityExtension.SaveFile``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>写入文件，二进制格式</summary>
            <param name="list">实体列表</param>
            <param name="file">文件</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityExtension.SaveCsv``1(System.Collections.Generic.IEnumerable{``0},System.IO.Stream,System.String[],System.String[])">
            <summary>写入数据流，Csv格式</summary>
            <param name="list">实体列表</param>
            <param name="stream">数据量</param>
            <param name="fields">要导出的字段列表</param>
            <param name="displayfields">要导出的中文字段列表</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityExtension.SaveCsv``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String[],System.String[])">
            <summary>写入文件，Csv格式</summary>
            <param name="list">实体列表</param>
            <param name="file">文件</param>
            <param name="fields">要导出的字段列表</param>
            <param name="displayfields">中文字段列表</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityExtension.SaveCsv``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Boolean)">
            <summary>写入文件，Csv格式</summary>
            <param name="list">实体列表</param>
            <param name="file">文件</param>
            <param name="displayName">是否使用中文显示名，否则使用英文属性名</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityExtension.Read``1(System.Collections.Generic.IList{``0},System.IO.Stream)">
            <summary>从数据流读取列表</summary>
            <param name="list">实体列表</param>
            <param name="stream">数据流</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:XCode.EntityExtension.ReadEnumerable``1(System.Collections.Generic.IList{``0},System.IO.Stream)">
            <summary>从数据流读取列表</summary>
            <param name="list">实体列表</param>
            <param name="stream">数据流</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:XCode.EntityExtension.LoadFile``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>从文件读取列表，二进制格式</summary>
            <param name="list">实体列表</param>
            <param name="file">文件</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:XCode.EntityExtension.LoadCsv``1(System.Collections.Generic.IList{``0},System.IO.Stream)">
            <summary>从数据流读取列表，Csv格式</summary>
            <param name="list">实体列表</param>
            <param name="stream">数据流</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:XCode.EntityExtension.LoadCsv``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>从文件读取列表，Csv格式</summary>
            <param name="list">实体列表</param>
            <param name="file">文件</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:XCode.EntityExtension.ToDataTable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>转为DataTable</summary>
            <param name="list">实体列表</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityExtension.ToDataSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>转为DataSet</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityExtension.TrimExtraLong(XCode.IEntity,System.String[])">
            <summary>截断指定字段的超长字符</summary>
            <remarks>有些场景为了方便落库，宁可截断超长部分</remarks>
            <param name="entity">实体对象</param>
            <param name="names">要截断的字段集合</param>
            <returns></returns>
        </member>
        <member name="T:XCode.EntityFactory">
            <summary>实体工厂</summary>
        </member>
        <member name="P:XCode.EntityFactory.Entities">
            <summary>实体工厂集合</summary>
        </member>
        <member name="M:XCode.EntityFactory.CreateFactory(System.Type)">
            <summary>创建实体操作接口</summary>
            <remarks>
            因为只用来做实体操作，所以只需要一个实例即可。
            调用平均耗时3.95ns，57.39%在EnsureInit
            </remarks>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityFactory.AsFactory(System.Type)">
            <summary>根据类型创建实体工厂</summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityFactory.Register(System.Type,XCode.IEntityFactory)">
            <summary>使用指定的实体对象创建实体操作接口，主要用于Entity内部调用，避免反射带来的损耗</summary>
            <param name="type">类型</param>
            <param name="factory"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityFactory.LoadEntities(System.String)">
            <summary>获取指定连接名下的所有实体类</summary>
            <param name="connName"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityFactory.GetTables(System.String,System.Boolean)">
            <summary>获取指定连接名下的初始化时检查的所有实体数据表，用于反向工程检查表架构</summary>
            <param name="connName"></param>
            <param name="checkMode"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityFactory.InitAll">
            <summary>初始化所有数据库连接的实体类和数据表</summary>
        </member>
        <member name="M:XCode.EntityFactory.InitAllAsync">
            <summary>初始化所有数据库连接的实体类和数据表</summary>
        </member>
        <member name="M:XCode.EntityFactory.InitConnection(System.String)">
            <summary>初始化指定连接，执行反向工程检查，初始化数据</summary>
            <param name="connName">连接名</param>
        </member>
        <member name="M:XCode.EntityFactory.InitEntity(System.Type)">
            <summary>初始化指定实体类，执行反向工程检查，初始化数据</summary>
            <param name="entityType"></param>
        </member>
        <member name="T:XCode.EntityQueue">
            <summary>实体队列</summary>
        </member>
        <member name="P:XCode.EntityQueue.Entities">
            <summary>需要近实时保存的实体队列</summary>
        </member>
        <member name="P:XCode.EntityQueue.DelayEntities">
            <summary>需要延迟保存的实体队列</summary>
        </member>
        <member name="P:XCode.EntityQueue.Debug">
            <summary>调试开关，默认false</summary>
        </member>
        <member name="P:XCode.EntityQueue.Session">
            <summary>数据会话，分表分库时使用</summary>
        </member>
        <member name="P:XCode.EntityQueue.InsertOnly">
            <summary>是否仅插入。默认false</summary>
        </member>
        <member name="P:XCode.EntityQueue.ShowSQL">
            <summary>
            是否显示SQL
            </summary>
        </member>
        <member name="P:XCode.EntityQueue.Period">
            <summary>周期。默认1000毫秒，根据繁忙程度动态调节，尽量靠近每次持久化1000个对象</summary>
        </member>
        <member name="P:XCode.EntityQueue.MaxEntity">
            <summary>最大个数，超过该个数时，进入队列将产生堵塞。默认1_000_000</summary>
        </member>
        <member name="P:XCode.EntityQueue.Speed">
            <summary>保存速度，每秒保存多少个实体</summary>
        </member>
        <member name="P:XCode.EntityQueue.Tracer">
            <summary>链路追踪</summary>
        </member>
        <member name="M:XCode.EntityQueue.#ctor(XCode.IEntitySession)">
            <summary>实例化实体队列</summary>
        </member>
        <member name="M:XCode.EntityQueue.Dispose(System.Boolean)">
            <summary>销毁时，持久化队列</summary>
            <param name="disposing"></param>
        </member>
        <member name="M:XCode.EntityQueue.Add(XCode.IEntity,System.Int32)">
            <summary>添加实体对象进入队列</summary>
            <param name="entity">实体对象</param>
            <param name="msDelay">延迟保存的时间</param>
            <returns>返回是否添加成功，实体对象已存在于队列中则返回false</returns>
        </member>
        <member name="F:XCode.EntityQueue._count">
            <summary>当前缓存个数</summary>
        </member>
        <member name="M:XCode.EntityQueue.OnProcess(System.Collections.Generic.IList{XCode.IEntity})">
            <summary>处理一批数据。插入或更新</summary>
            <param name="batch"></param>
        </member>
        <member name="M:XCode.EntityQueue.OnError(System.Collections.Generic.IList{XCode.IEntity},System.Exception)">
            <summary>发生错误</summary>
            <param name="list"></param>
            <param name="ex"></param>
        </member>
        <member name="T:XCode.EntitySession`1">
            <summary>实体会话。每个实体类、连接名和表名形成一个实体会话</summary>
        </member>
        <member name="P:XCode.EntitySession`1.ConnName">
            <summary>连接名</summary>
        </member>
        <member name="P:XCode.EntitySession`1.TableName">
            <summary>表名</summary>
        </member>
        <member name="P:XCode.EntitySession`1.Key">
            <summary>用于标识会话的键值</summary>
        </member>
        <member name="M:XCode.EntitySession`1.Dispose(System.Boolean)">
            <summary>销毁会话时，保存队列数据</summary>
            <param name="disposing"></param>
        </member>
        <member name="M:XCode.EntitySession`1.Create(System.String,System.String)">
            <summary>创建指定表名连接名的会话</summary>
            <param name="connName"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.EntitySession`1.TableItem">
            <summary>表信息</summary>
        </member>
        <member name="P:XCode.EntitySession`1.Table">
            <summary>数据表</summary>
        </member>
        <member name="P:XCode.EntitySession`1.Dal">
            <summary>数据操作层</summary>
        </member>
        <member name="P:XCode.EntitySession`1.FormatedTableName">
            <summary>已格式化的表名，带有中括号等</summary>
        </member>
        <member name="P:XCode.EntitySession`1.Default">
            <summary>该实体类的默认会话。</summary>
        </member>
        <member name="P:XCode.EntitySession`1.Items">
            <summary>用户数据</summary>
        </member>
        <member name="F:XCode.EntitySession`1.hasCheckInitData">
            <summary>记录已进行数据初始化</summary>
        </member>
        <member name="M:XCode.EntitySession`1.WaitForInitData(System.Int32)">
            <summary>检查并初始化数据。参数等待时间为0表示不等待</summary>
            <param name="ms">等待时间，-1表示不限，0表示不等待</param>
            <returns>如果等待，返回是否收到信号</returns>
        </member>
        <member name="M:XCode.EntitySession`1.CheckModel">
            <summary>检查模型。依据反向工程设置、是否首次使用检查、是否已常规检查等</summary>
        </member>
        <member name="P:XCode.EntitySession`1.Cache">
            <summary>实体缓存</summary>
            <returns></returns>
        </member>
        <member name="P:XCode.EntitySession`1.SingleCache">
            <summary>单对象实体缓存。</summary>
        </member>
        <member name="P:XCode.EntitySession`1.Count">
            <summary>总记录数，小于1000时是精确的，大于1000时缓存10秒</summary>
        </member>
        <member name="F:XCode.EntitySession`1._Count">
            <summary>总记录数较小时，使用静态字段，较大时增加使用Cache</summary>
        </member>
        <member name="P:XCode.EntitySession`1.LongCount">
            <summary>总记录数，小于100w时精确查询，否则取索引行数，缓存60秒</summary>
        </member>
        <member name="M:XCode.EntitySession`1.GetCount(System.Int64)">
            <summary>获取总行数，基于参考值采取不同策略</summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntitySession`1.ClearCache(System.String)">
            <summary>清除缓存</summary>
            <param name="reason">清除原因</param>
        </member>
        <member name="M:XCode.EntitySession`1.ClearCache(System.String,System.Boolean)">
            <summary>清除缓存</summary>
            <param name="reason">清除原因</param>
            <param name="force">强制清除，下次访问阻塞等待。默认false仅置为过期，下次访问异步更新</param>
        </member>
        <member name="M:XCode.EntitySession`1.GetDAL(System.Boolean)">
            <summary>获取数据操作对象，根据是否查询以及事务来进行读写分离</summary>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntitySession`1.InitData">
            <summary>初始化数据，执行反向工程检查，建库建表</summary>
        </member>
        <member name="M:XCode.EntitySession`1.Query(XCode.DataAccessLayer.SelectBuilder,System.Int64,System.Int64)">
            <summary>执行SQL查询，返回记录集</summary>
            <param name="builder">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntitySession`1.Query(System.String)">
            <summary>执行SQL查询，返回记录集</summary>
            <param name="sql">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntitySession`1.QueryCount(XCode.DataAccessLayer.SelectBuilder)">
            <summary>查询记录数</summary>
            <param name="builder">查询生成器</param>
            <returns>记录数</returns>
        </member>
        <member name="M:XCode.EntitySession`1.QueryCount(System.String)">
            <summary>查询记录数</summary>
            <param name="sql">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntitySession`1.Execute(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>影响的结果</returns>
        </member>
        <member name="M:XCode.EntitySession`1.InsertAndGetIdentity(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="M:XCode.EntitySession`1.QueryAsync(XCode.DataAccessLayer.SelectBuilder,System.Int64,System.Int64)">
            <summary>执行SQL查询，返回记录集</summary>
            <param name="builder">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntitySession`1.QueryCountAsync(XCode.DataAccessLayer.SelectBuilder)">
            <summary>查询记录数</summary>
            <param name="builder">查询生成器</param>
            <returns>记录数</returns>
        </member>
        <member name="M:XCode.EntitySession`1.ExecuteAsync(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>影响的结果</returns>
        </member>
        <member name="M:XCode.EntitySession`1.InsertAndGetIdentityAsync(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="E:XCode.EntitySession`1.OnDataChange">
            <summary>数据改变后触发。参数指定触发该事件的实体类</summary>
        </member>
        <member name="M:XCode.EntitySession`1.Truncate">
            <summary>清空数据表，标识归零</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.EntitySession`1.BeginTrans">
            <summary>开始事务</summary>
            <returns>剩下的事务计数</returns>
        </member>
        <member name="M:XCode.EntitySession`1.Commit">
            <summary>提交事务</summary>
            <returns>剩下的事务计数</returns>
        </member>
        <member name="M:XCode.EntitySession`1.Rollback">
            <summary>回滚事务，忽略异常</summary>
            <returns>剩下的事务计数</returns>
        </member>
        <member name="M:XCode.EntitySession`1.CreateTrans">
            <summary>创建事务</summary>
        </member>
        <member name="M:XCode.EntitySession`1.Insert(XCode.IEntity)">
            <summary>把该对象持久化到数据库，添加/更新实体缓存和单对象缓存，增加总计数</summary>
            <param name="entity">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntitySession`1.Update(XCode.IEntity)">
            <summary>更新数据库，同时更新实体缓存</summary>
            <param name="entity">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntitySession`1.Delete(XCode.IEntity)">
            <summary>从数据库中删除该对象，同时从实体缓存和单对象缓存中删除，扣减总数量</summary>
            <param name="entity">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntitySession`1.InsertAsync(XCode.IEntity)">
            <summary>把该对象持久化到数据库，添加/更新实体缓存和单对象缓存，增加总计数</summary>
            <param name="entity">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntitySession`1.UpdateAsync(XCode.IEntity)">
            <summary>更新数据库，同时更新实体缓存</summary>
            <param name="entity">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntitySession`1.DeleteAsync(XCode.IEntity)">
            <summary>从数据库中删除该对象，同时从实体缓存和单对象缓存中删除，扣减总数量</summary>
            <param name="entity">实体对象</param>
            <returns></returns>
        </member>
        <member name="P:XCode.EntitySession`1.Queue">
            <summary>实体队列</summary>
        </member>
        <member name="T:XCode.EntitySplit">
            <summary>实体分表分库</summary>
        </member>
        <member name="M:XCode.EntitySplit.Split``1(XCode.IEntityFactory,System.String,System.String,System.Func{``0})">
            <summary>在分库上执行操作，自动还原</summary>
            <param name="factory"></param>
            <param name="connName"></param>
            <param name="tableName"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.EntitySplit.SplitPackge.Factory">
            <summary>实体工厂</summary>
        </member>
        <member name="P:XCode.EntitySplit.SplitPackge.ConnName">
            <summary>连接名</summary>
        </member>
        <member name="P:XCode.EntitySplit.SplitPackge.TableName">
            <summary>表名</summary>
        </member>
        <member name="T:XCode.EntityTransaction`1">
            <summary>实体事务区域。配合using使用，进入区域事务即开始，直到<see cref="M:XCode.EntityTransaction.Commit"/>提交，否则离开区域时回滚。</summary>
            <typeparam name="TEntity"></typeparam>
            <example>
            <code>
            using (var et = new EntityTransaction&lt;Administrator&gt;())
            {
                var admin = Administrator.FindByName("admin");
                admin.Logins++;
                admin.Update();
            
                et.Commit();
            }
            </code>
            </example>
        </member>
        <member name="M:XCode.EntityTransaction`1.#ctor">
            <summary>为实体类实例化一个事务区域</summary>
        </member>
        <member name="M:XCode.EntityTransaction`1.Commit">
            <summary>提交事务</summary>
        </member>
        <member name="M:XCode.EntityTransaction`1.Rollback">
            <summary>回滚事务</summary>
        </member>
        <member name="T:XCode.EntityTransaction">
            <summary>实体事务区域。配合using使用，进入区域事务即开始，直到<see cref="M:XCode.EntityTransaction.Commit"/>提交，否则离开区域时回滚。</summary>
            <example>
            <code>
            using (var et = new EntityTransaction(DAL.Create("Common")))
            {
                var admin = Administrator.FindByName("admin");
                admin.Logins++;
                admin.Update();
            
                et.Commit();
            }
            </code>
            </example>
        </member>
        <member name="F:XCode.EntityTransaction.hasStart">
            <summary>是否已经开始事务</summary>
        </member>
        <member name="F:XCode.EntityTransaction.hasFinish">
            <summary>是否已完成事务</summary>
        </member>
        <member name="F:XCode.EntityTransaction.span">
            <summary>埋点片段</summary>
        </member>
        <member name="P:XCode.EntityTransaction.Session">
            <summary>会话</summary>
        </member>
        <member name="M:XCode.EntityTransaction.#ctor(XCode.DataAccessLayer.IDbSession,System.Data.IsolationLevel)">
            <summary>用数据库会话来实例化一个事务区域</summary>
            <param name="session"></param>
            <param name="level">事务隔离等级</param>
        </member>
        <member name="M:XCode.EntityTransaction.#ctor(XCode.DataAccessLayer.DAL)">
            <summary>用数据访问对象来实例化一个事务区域</summary>
            <param name="dal"></param>
        </member>
        <member name="M:XCode.EntityTransaction.Dispose(System.Boolean)">
            <summary>子类重载实现资源释放逻辑时必须首先调用基类方法</summary>
            <param name="disposing">从Dispose调用（释放所有资源）还是析构函数调用（释放非托管资源）。
            因为该方法只会被调用一次，所以该参数的意义不太大。</param>
        </member>
        <member name="M:XCode.EntityTransaction.Commit">
            <summary>提交事务</summary>
        </member>
        <member name="M:XCode.EntityTransaction.Rollback">
            <summary>回滚事务</summary>
        </member>
        <member name="T:XCode.IEntity`1">
            <summary>数据实体接口扩展</summary>
            <typeparam name="TModel"></typeparam>
        </member>
        <member name="M:XCode.IEntity`1.Copy(`0)">
            <summary>拷贝模型对象</summary>
            <param name="model"></param>
        </member>
        <member name="T:XCode.IEntity">
            <summary>数据实体接口</summary>
        </member>
        <member name="P:XCode.IEntity.Dirtys">
            <summary>脏属性。存储哪些属性的数据被修改过了。</summary>
        </member>
        <member name="P:XCode.IEntity.HasDirty">
            <summary>是否有脏数据</summary>
        </member>
        <member name="P:XCode.IEntity.Extends">
            <summary>扩展属性</summary>
        </member>
        <member name="P:XCode.IEntity.IsFromDatabase">
            <summary>是否来自数据库。设置相同属性值时不改变脏数据</summary>
        </member>
        <member name="P:XCode.IEntity.Addition">
            <summary>累加</summary>
        </member>
        <member name="P:XCode.IEntity.IsNullKey">
            <summary>主键是否为空</summary>
        </member>
        <member name="M:XCode.IEntity.SetNullKey">
            <summary>设置主键为空。Save将调用Insert</summary>
        </member>
        <member name="M:XCode.IEntity.IsDirty(System.String)">
            <summary>指定字段是否有脏数据。被修改为不同值</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntity.Insert">
            <summary>添加</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntity.Update">
            <summary>更新</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntity.Delete">
            <summary>删除</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntity.Save">
            <summary>保存。根据主键检查数据库中是否已存在该对象，再决定调用Insert或Update</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntity.SaveWithoutValid">
            <summary>不需要验证的保存，不执行Valid，一般用于快速导入数据</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntity.SaveAsync(System.Int32)">
            <summary>异步保存。实现延迟保存，大事务保存。主要面向日志表和频繁更新的在线记录表</summary>
            <param name="msDelay">延迟保存的时间。默认0ms近实时保存</param>
            <returns>是否成功加入异步队列</returns>
        </member>
        <member name="M:XCode.IEntity.InsertAsync">
            <summary>把该对象持久化到数据库</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntity.UpdateAsync">
            <summary>更新数据库</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntity.DeleteAsync">
            <summary>从数据库中删除该对象</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntity.SetItem(System.String,System.Object)">
            <summary>设置字段值</summary>
            <param name="name">字段名</param>
            <param name="value">值</param>
            <returns>返回是否成功设置了数据</returns>
        </member>
        <member name="M:XCode.IEntity.CloneEntity(System.Boolean)">
            <summary>克隆实体。创建当前对象的克隆对象，仅拷贝基本字段</summary>
            <param name="setDirty">是否设置脏数据</param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntity.CopyFrom(NewLife.Data.IModel,System.Boolean)">
            <summary>复制来自指定模型的成员，可以是不同类型</summary>
            <param name="model">来源实体对象</param>
            <param name="setDirty">是否设置脏数据</param>
            <returns>实际复制成员数</returns>
        </member>
        <member name="M:XCode.IEntity.EqualTo(XCode.IEntity)">
            <summary>判断两个实体是否相等。有可能是同一条数据的两个实体对象</summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.IEntityAddition">
            <summary>实体累加接口。实现Count=Count+123的效果</summary>
        </member>
        <member name="P:XCode.IEntityAddition.Entity">
            <summary>实体对象</summary>
        </member>
        <member name="M:XCode.IEntityAddition.Set(System.Collections.Generic.IEnumerable{System.String})">
            <summary>设置累加字段</summary>
            <param name="names">字段集合</param>
        </member>
        <member name="M:XCode.IEntityAddition.Get">
            <summary>获取快照</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityAddition.Reset(System.Collections.Generic.IDictionary{System.String,System.Object[]})">
            <summary>使用快照重置</summary>
            <param name="value"></param>
        </member>
        <member name="T:XCode.EntityAddition">
            <summary>实体累加接口。实现Count+=1的效果</summary>
        </member>
        <member name="P:XCode.EntityAddition.Entity">
            <summary>实体对象</summary>
        </member>
        <member name="M:XCode.EntityAddition.#ctor(XCode.IEntity)">
            <summary>实例化</summary>
            <param name="entity"></param>
        </member>
        <member name="M:XCode.EntityAddition.Set(System.Collections.Generic.IEnumerable{System.String})">
            <summary>设置累加字段</summary>
            <param name="names">字段集合</param>
        </member>
        <member name="M:XCode.EntityAddition.Get">
            <summary>获取累加备份</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityAddition.Reset(System.Collections.Generic.IDictionary{System.String,System.Object[]})">
            <summary>重置累加备份</summary>
            <param name="dfs"></param>
        </member>
        <member name="M:XCode.EntityAddition.SetField(System.Collections.Generic.IEnumerable{XCode.IEntity})">
            <summary>设置累加备份</summary>
            <param name="list"></param>
        </member>
        <member name="M:XCode.EntityAddition.SetField(XCode.IEntity)">
            <summary>设置累加备份</summary>
            <param name="entity"></param>
        </member>
        <member name="T:XCode.IEntityModule">
            <summary>实体处理模块</summary>
        </member>
        <member name="M:XCode.IEntityModule.Init(System.Type)">
            <summary>为指定实体类初始化模块，返回是否支持</summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityModule.Create(XCode.IEntity,System.Boolean)">
            <summary>创建实体对象</summary>
            <param name="entity"></param>
            <param name="forEdit"></param>
        </member>
        <member name="M:XCode.IEntityModule.Valid(XCode.IEntity,XCode.DataMethod)">
            <summary>验证实体对象</summary>
            <param name="entity"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.EntityModules">
            <summary>实体模块集合</summary>
        </member>
        <member name="P:XCode.EntityModules.Global">
            <summary></summary>
        </member>
        <member name="P:XCode.EntityModules.EntityType">
            <summary>实体类型</summary>
        </member>
        <member name="P:XCode.EntityModules.Modules">
            <summary>模块集合</summary>
        </member>
        <member name="M:XCode.EntityModules.#ctor(System.Type)">
            <summary>实例化实体模块集合</summary>
            <param name="entityType"></param>
        </member>
        <member name="M:XCode.EntityModules.Add(XCode.IEntityModule)">
            <summary>添加实体模块</summary>
            <param name="module"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityModules.Add``1">
            <summary>添加实体模块</summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityModules.Create(XCode.IEntity,System.Boolean)">
            <summary>创建实体时执行模块</summary>
            <param name="entity"></param>
            <param name="forEdit"></param>
        </member>
        <member name="M:XCode.EntityModules.Valid(XCode.IEntity,XCode.DataMethod)">
            <summary>添删改实体时验证</summary>
            <param name="entity"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.EntityModule">
            <summary>实体模块基类</summary>
        </member>
        <member name="M:XCode.EntityModule.Init(System.Type)">
            <summary>为指定实体类初始化模块，返回是否支持</summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityModule.OnInit(System.Type)">
            <summary>为指定实体类初始化模块，返回是否支持</summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityModule.Create(XCode.IEntity,System.Boolean)">
            <summary>创建实体对象</summary>
            <param name="entity"></param>
            <param name="forEdit"></param>
        </member>
        <member name="M:XCode.EntityModule.OnCreate(XCode.IEntity,System.Boolean)">
            <summary>创建实体对象</summary>
            <param name="entity"></param>
            <param name="forEdit"></param>
        </member>
        <member name="M:XCode.EntityModule.Valid(XCode.IEntity,XCode.DataMethod)">
            <summary>验证实体对象</summary>
            <param name="entity"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityModule.OnValid(XCode.IEntity,XCode.DataMethod)">
            <summary>验证实体对象</summary>
            <param name="entity"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityModule.SetNoDirtyItem(System.Collections.Generic.ICollection{XCode.Configuration.FieldItem},XCode.IEntity,System.String,System.Object)">
            <summary>设置脏数据项。如果某个键存在并且数据没有脏，则设置</summary>
            <param name="fields"></param>
            <param name="entity"></param>
            <param name="name"></param>
            <param name="value"></param>
            <returns>返回是否成功设置了数据</returns>
        </member>
        <member name="M:XCode.EntityModule.SetItem(System.Collections.Generic.ICollection{XCode.Configuration.FieldItem},XCode.IEntity,System.String,System.Object)">
            <summary>如果是默认值则覆盖，无视脏数据，此时很可能是新增</summary>
            <param name="fields"></param>
            <param name="entity"></param>
            <param name="name"></param>
            <param name="value"></param>
            <returns>返回是否成功设置了数据</returns>
        </member>
        <member name="M:XCode.EntityModule.GetFields(System.Type)">
            <summary>获取实体类的字段名。带缓存</summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityModule.SetFields(System.Type,XCode.Configuration.FieldItem[])">
            <summary>提前设置字段，加速初始化过程</summary>
            <param name="entityType"></param>
            <param name="fields"></param>
        </member>
        <member name="T:XCode.EntityFactoryAttribute">
            <summary>指定实体工厂</summary>
        </member>
        <member name="P:XCode.EntityFactoryAttribute.Type">
            <summary>实体工厂类型</summary>
        </member>
        <member name="M:XCode.EntityFactoryAttribute.#ctor(System.Type)">
            <summary>指定实体工厂</summary>
            <param name="type"></param>
        </member>
        <member name="T:XCode.IEntityFactory">
            <summary>数据实体操作接口</summary>
        </member>
        <member name="P:XCode.IEntityFactory.EntityType">
            <summary>实体类型</summary>
        </member>
        <member name="P:XCode.IEntityFactory.Session">
            <summary>实体会话</summary>
        </member>
        <member name="P:XCode.IEntityFactory.Persistence">
            <summary>实体持久化</summary>
        </member>
        <member name="P:XCode.IEntityFactory.Accessor">
            <summary>数据行访问器，把数据行映射到实体类</summary>
        </member>
        <member name="P:XCode.IEntityFactory.Default">
            <summary>默认实体。用于初始化数据等扩展操作</summary>
        </member>
        <member name="P:XCode.IEntityFactory.Table">
            <summary>数据表元数据</summary>
        </member>
        <member name="P:XCode.IEntityFactory.AllFields">
            <summary>所有数据属性</summary>
        </member>
        <member name="P:XCode.IEntityFactory.Fields">
            <summary>所有绑定到数据表的属性</summary>
        </member>
        <member name="P:XCode.IEntityFactory.FieldNames">
            <summary>字段名集合，不区分大小写的哈希表存储，外部不要修改元素数据</summary>
        </member>
        <member name="P:XCode.IEntityFactory.Unique">
            <summary>唯一键，返回第一个标识列或者唯一的主键</summary>
        </member>
        <member name="P:XCode.IEntityFactory.Master">
            <summary>主字段。主字段作为业务主要字段，代表当前数据行意义</summary>
        </member>
        <member name="P:XCode.IEntityFactory.ConnName">
            <summary>连接名。当前线程正在使用的连接名</summary>
        </member>
        <member name="P:XCode.IEntityFactory.TableName">
            <summary>表名。当前线程正在使用的表名</summary>
        </member>
        <member name="M:XCode.IEntityFactory.Create(System.Boolean)">
            <summary>创建一个实体对象</summary>
            <param name="forEdit">是否为了编辑而创建，如果是，可以再次做一些相关的初始化工作</param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityFactory.LoadData(System.Data.DataSet)">
            <summary>加载记录集</summary>
            <param name="ds">记录集</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.IEntityFactory.Find(System.String,System.Object)">
            <summary>根据属性以及对应的值，查找单个实体</summary>
            <param name="name">名称</param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityFactory.Find(XCode.Expression)">
            <summary>根据条件查找单个实体</summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityFactory.FindByKey(System.Object)">
            <summary>根据主键查找单个实体</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityFactory.FindByKeyForEdit(System.Object)">
            <summary>根据主键查询一个实体对象用于表单编辑</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityFactory.FindAll">
            <summary>获取所有实体对象。获取大量数据时会非常慢，慎用</summary>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.IEntityFactory.FindAll(System.String,System.String,System.String,System.Int64,System.Int64)">
            <summary>
            查询并返回实体对象集合。
            表名以及所有字段名，请使用类名以及字段对应的属性名，方法内转换为表名和列名
            </summary>
            <param name="where">条件，不带Where</param>
            <param name="order">排序，不带Order By</param>
            <param name="selects">查询列</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.IEntityFactory.FindAll(XCode.Expression,System.String,System.String,System.Int64,System.Int64)">
            <summary>
            查询并返回实体对象集合。
            表名以及所有字段名，请使用类名以及字段对应的属性名，方法内转换为表名和列名
            </summary>
            <param name="where">条件，不带Where</param>
            <param name="order">排序，不带Order By</param>
            <param name="selects">查询列</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.IEntityFactory.FindAllWithCache">
            <summary>查找实体缓存所有数据</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityFactory.FindCount">
            <summary>返回总记录数</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityFactory.FindCount(System.String,System.String,System.String,System.Int64,System.Int64)">
            <summary>返回总记录数</summary>
            <param name="where">条件，不带Where</param>
            <param name="order">排序，不带Order By</param>
            <param name="selects">查询列</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>总行数</returns>
        </member>
        <member name="M:XCode.IEntityFactory.FindCount(XCode.Expression)">
            <summary>返回总记录数</summary>
            <param name="where">条件，不带Where</param>
            <returns>总行数</returns>
        </member>
        <member name="M:XCode.IEntityFactory.GetSession(System.String,System.String)">
            <summary>获取指定连接和表的实体会话。可用于分表逻辑</summary>
            <param name="connName">连接名</param>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="P:XCode.IEntityFactory.ShardPolicy">
            <summary>分表分库策略</summary>
        </member>
        <member name="M:XCode.IEntityFactory.CreateSplit(System.String,System.String)">
            <summary>创建分库会话，using结束时自动还原</summary>
            <param name="connName">连接名</param>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityFactory.CreateShard(XCode.IEntity)">
            <summary>针对实体对象自动分库分表</summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityFactory.CreateShard(System.Object)">
            <summary>为实体对象、时间、雪花Id等计算分表分库</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityFactory.AutoShard``1(System.DateTime,System.DateTime,System.Func{``0})">
            <summary>针对时间区间自动分库分表，常用于多表顺序查询，支持倒序</summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityFactory.GetOrAdd``1(``0,System.Func{``0,System.Boolean,XCode.IEntity},System.Func{``0,XCode.IEntity})">
            <summary>获取 或 新增 对象，常用于统计等高并发更新的情况，一般配合SaveAsync</summary>
            <typeparam name="TKey"></typeparam>
            <param name="key">业务主键</param>
            <param name="find">查找函数</param>
            <param name="create">创建对象</param>
            <returns></returns>
        </member>
        <member name="P:XCode.IEntityFactory.AutoIdentity">
            <summary>是否自增获取自增返回值。默认启用</summary>
        </member>
        <member name="P:XCode.IEntityFactory.AllowInsertIdentity">
            <summary>是否允许向自增列插入数据。为免冲突，仅本线程有效</summary>
        </member>
        <member name="P:XCode.IEntityFactory.AutoSetGuidField">
            <summary>自动设置Guid的字段。对实体类有效，可在实体类类型构造函数里面设置</summary>
        </member>
        <member name="P:XCode.IEntityFactory.AdditionalFields">
            <summary>默认累加字段</summary>
        </member>
        <member name="P:XCode.IEntityFactory.MasterTime">
            <summary>主时间字段。代表当前数据行更新时间</summary>
        </member>
        <member name="P:XCode.IEntityFactory.Selects">
            <summary>默认选择的字段</summary>
        </member>
        <member name="P:XCode.IEntityFactory.SelectStat">
            <summary>默认选择统计语句</summary>
        </member>
        <member name="P:XCode.IEntityFactory.Modules">
            <summary>实体模块集合</summary>
        </member>
        <member name="P:XCode.IEntityFactory.FullInsert">
            <summary>是否完全插入所有字段。默认false表示不插入没有脏数据的字段</summary>
        </member>
        <member name="P:XCode.IEntityFactory.Snow">
            <summary>雪花Id生成器。Int64主键非自增时，自动填充</summary>
        </member>
        <member name="P:XCode.IEntityFactory.Template">
            <summary>Sql模版</summary>
        </member>
        <member name="P:XCode.IEntityFactory.OrderByKey">
            <summary>按照主键排序。默认查询没有指定排序字段时，是否增加主键排序，整型降序其它升序，默认true</summary>
        </member>
        <member name="T:XCode.IEntityPersistence">
            <summary>实体持久化接口。可通过实现该接口来自定义实体类持久化行为。</summary>
        </member>
        <member name="P:XCode.IEntityPersistence.Factory">
            <summary>实体工厂</summary>
        </member>
        <member name="M:XCode.IEntityPersistence.Insert(XCode.IEntitySession,XCode.IEntity)">
            <summary>插入</summary>
            <param name="session">实体会话</param>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityPersistence.Update(XCode.IEntitySession,XCode.IEntity)">
            <summary>更新</summary>
            <param name="session">实体会话</param>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityPersistence.Delete(XCode.IEntitySession,XCode.IEntity)">
            <summary>删除</summary>
            <param name="session">实体会话</param>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityPersistence.InsertAsync(XCode.IEntitySession,XCode.IEntity)">
            <summary>插入</summary>
            <param name="session">实体会话</param>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityPersistence.UpdateAsync(XCode.IEntitySession,XCode.IEntity)">
            <summary>更新</summary>
            <param name="session">实体会话</param>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityPersistence.DeleteAsync(XCode.IEntitySession,XCode.IEntity)">
            <summary>删除</summary>
            <param name="session">实体会话</param>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityPersistence.Insert(XCode.IEntitySession,System.String[],System.Object[])">
            <summary>把一个实体对象持久化到数据库</summary>
            <param name="session">实体会话</param>
            <param name="names">更新属性列表</param>
            <param name="values">更新值列表</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:XCode.IEntityPersistence.Update(XCode.IEntitySession,System.String,System.String)">
            <summary>更新一批实体数据</summary>
            <param name="session">实体会话</param>
            <param name="setClause">要更新的项和数据</param>
            <param name="whereClause">指定要更新的实体</param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityPersistence.Update(XCode.IEntitySession,System.String[],System.Object[],System.String[],System.Object[])">
            <summary>更新一批实体数据</summary>
            <param name="session">实体会话</param>
            <param name="setNames">更新属性列表</param>
            <param name="setValues">更新值列表</param>
            <param name="whereNames">条件属性列表</param>
            <param name="whereValues">条件值列表</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:XCode.IEntityPersistence.Delete(XCode.IEntitySession,System.String)">
            <summary>从数据库中删除指定条件的实体对象。</summary>
            <param name="session">实体会话</param>
            <param name="whereClause">限制条件</param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityPersistence.Delete(XCode.IEntitySession,System.String[],System.Object[])">
            <summary>从数据库中删除指定属性列表和值列表所限定的实体对象。</summary>
            <param name="session">实体会话</param>
            <param name="names">属性列表</param>
            <param name="values">值列表</param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityPersistence.GetPrimaryCondition(XCode.IEntity)">
            <summary>获取主键条件</summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityPersistence.GetSql(XCode.IEntitySession,XCode.IEntity,System.ComponentModel.DataObjectMethodType)">
            <summary>把SQL模版格式化为SQL语句</summary>
            <param name="session">实体会话</param>
            <param name="entity">实体对象</param>
            <param name="methodType"></param>
            <returns>SQL字符串</returns>
        </member>
        <member name="M:XCode.IEntityPersistence.InsertSQL(XCode.IEntitySession)">
            <summary>插入语句</summary>
            <param name="session">实体会话</param>
            <returns></returns>
        </member>
        <member name="T:XCode.EntityPersistence">
            <summary>默认实体持久化</summary>
        </member>
        <member name="P:XCode.EntityPersistence.Factory">
            <summary>实体工厂</summary>
        </member>
        <member name="M:XCode.EntityPersistence.#ctor(XCode.IEntityFactory)">
            <summary>实例化</summary>
            <param name="factory"></param>
        </member>
        <member name="M:XCode.EntityPersistence.Insert(XCode.IEntitySession,XCode.IEntity)">
            <summary>插入</summary>
            <param name="session">实体会话</param>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityPersistence.Update(XCode.IEntitySession,XCode.IEntity)">
            <summary>更新</summary>
            <param name="session">实体会话</param>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityPersistence.Delete(XCode.IEntitySession,XCode.IEntity)">
            <summary>删除</summary>
            <param name="session">实体会话</param>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityPersistence.InsertAsync(XCode.IEntitySession,XCode.IEntity)">
            <summary>插入</summary>
            <param name="session">实体会话</param>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityPersistence.UpdateAsync(XCode.IEntitySession,XCode.IEntity)">
            <summary>更新</summary>
            <param name="session">实体会话</param>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityPersistence.DeleteAsync(XCode.IEntitySession,XCode.IEntity)">
            <summary>删除</summary>
            <param name="session">实体会话</param>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityPersistence.Insert(XCode.IEntitySession,System.String[],System.Object[])">
            <summary>把一个实体对象持久化到数据库</summary>
            <param name="session">实体会话</param>
            <param name="names">更新属性列表</param>
            <param name="values">更新值列表</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:XCode.EntityPersistence.Update(XCode.IEntitySession,System.String,System.String)">
            <summary>更新一批实体数据</summary>
            <param name="session">实体会话</param>
            <param name="setClause">要更新的项和数据</param>
            <param name="whereClause">指定要更新的实体</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityPersistence.Update(XCode.IEntitySession,System.String[],System.Object[],System.String[],System.Object[])">
            <summary>更新一批实体数据</summary>
            <param name="session">实体会话</param>
            <param name="setNames">更新属性列表</param>
            <param name="setValues">更新值列表</param>
            <param name="whereNames">条件属性列表</param>
            <param name="whereValues">条件值列表</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:XCode.EntityPersistence.Delete(XCode.IEntitySession,System.String)">
            <summary>从数据库中删除指定条件的实体对象。</summary>
            <param name="session">实体会话</param>
            <param name="whereClause">限制条件</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityPersistence.Delete(XCode.IEntitySession,System.String[],System.Object[])">
            <summary>从数据库中删除指定属性列表和值列表所限定的实体对象。</summary>
            <param name="session">实体会话</param>
            <param name="names">属性列表</param>
            <param name="values">值列表</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityPersistence.GetSql(XCode.IEntitySession,XCode.IEntity,System.ComponentModel.DataObjectMethodType)">
            <summary>把SQL模版格式化为SQL语句</summary>
            <param name="session">实体会话</param>
            <param name="entity">实体对象</param>
            <param name="methodType"></param>
            <returns>SQL字符串</returns>
        </member>
        <member name="M:XCode.EntityPersistence.SQL(XCode.IEntitySession,XCode.IEntity,System.ComponentModel.DataObjectMethodType,System.Data.IDataParameter[]@)">
            <summary>把SQL模版格式化为SQL语句</summary>
            <param name="session">实体会话</param>
            <param name="entity">实体对象</param>
            <param name="methodType"></param>
            <param name="parameters">参数数组</param>
            <returns>SQL字符串</returns>
        </member>
        <member name="M:XCode.EntityPersistence.GetPrimaryCondition(XCode.IEntity)">
            <summary>获取主键条件</summary>
            <remarks>
            若有标识列，则使用一个标识列作为条件；
            如有主键，则使用全部主键作为条件。
            </remarks>
            <param name="entity">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityPersistence.InsertSQL(XCode.IEntitySession)">
            <summary>插入语句</summary>
            <returns></returns>
        </member>
        <member name="T:XCode.IEntitySession">
            <summary>实体会话接口</summary>
        </member>
        <member name="P:XCode.IEntitySession.ConnName">
            <summary>连接名</summary>
        </member>
        <member name="P:XCode.IEntitySession.TableName">
            <summary>表名</summary>
        </member>
        <member name="P:XCode.IEntitySession.Table">
            <summary>数据表</summary>
        </member>
        <member name="P:XCode.IEntitySession.Key">
            <summary>用于标识会话的键值</summary>
        </member>
        <member name="P:XCode.IEntitySession.FormatedTableName">
            <summary>已格式化的表名，带有中括号等</summary>
        </member>
        <member name="P:XCode.IEntitySession.Dal">
            <summary>数据操作层</summary>
        </member>
        <member name="P:XCode.IEntitySession.Items">
            <summary>用户数据</summary>
        </member>
        <member name="M:XCode.IEntitySession.WaitForInitData(System.Int32)">
            <summary>检查并初始化数据。参数等待时间为0表示不等待</summary>
            <param name="ms">等待时间，-1表示不限，0表示不等待</param>
            <returns>如果等待，返回是否收到信号</returns>
        </member>
        <member name="P:XCode.IEntitySession.Cache">
            <summary>实体缓存</summary>
            <returns></returns>
        </member>
        <member name="P:XCode.IEntitySession.SingleCache">
            <summary>单对象实体缓存。
            建议自定义查询数据方法，并从二级缓存中获取实体数据，以抵消因初次填充而带来的消耗。
            </summary>
        </member>
        <member name="P:XCode.IEntitySession.Count">
            <summary>总记录数，小于1000时是精确的，大于1000时缓存10分钟</summary>
        </member>
        <member name="P:XCode.IEntitySession.LongCount">
            <summary>总记录数，小于1000时是精确的，大于1000时缓存10分钟</summary>
            <remarks>
            1，检查静态字段，如果有数据且小于1000，直接返回，否则=>3
            2，如果有数据但大于1000，则返回缓存里面的有效数据
            3，来到这里，有可能是第一次访问，静态字段没有缓存，也有可能是大于1000的缓存过期
            4，检查模型
            5，根据需要查询数据
            6，如果大于1000，缓存数据
            7，检查数据初始化
            </remarks>
        </member>
        <member name="M:XCode.IEntitySession.ClearCache(System.String)">
            <summary>清除缓存</summary>
            <param name="reason">清除原因</param>
        </member>
        <member name="M:XCode.IEntitySession.ClearCache(System.String,System.Boolean)">
            <summary>清除缓存</summary>
            <param name="reason">清除原因</param>
            <param name="force">强制清除，下次访问阻塞等待。默认false仅置为过期，下次访问异步更新</param>
        </member>
        <member name="M:XCode.IEntitySession.InitData">
            <summary>初始化数据，执行反向工程检查，建库建表</summary>
        </member>
        <member name="M:XCode.IEntitySession.Query(XCode.DataAccessLayer.SelectBuilder,System.Int64,System.Int64)">
            <summary>执行SQL查询，返回记录集</summary>
            <param name="builder">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntitySession.QueryCount(XCode.DataAccessLayer.SelectBuilder)">
            <summary>查询记录数</summary>
            <param name="builder">查询生成器</param>
            <returns>记录数</returns>
        </member>
        <member name="M:XCode.IEntitySession.Execute(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>影响的结果</returns>
        </member>
        <member name="M:XCode.IEntitySession.InsertAndGetIdentity(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="M:XCode.IEntitySession.QueryAsync(XCode.DataAccessLayer.SelectBuilder,System.Int64,System.Int64)">
            <summary>执行SQL查询，返回记录集</summary>
            <param name="builder">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntitySession.QueryCountAsync(XCode.DataAccessLayer.SelectBuilder)">
            <summary>查询记录数</summary>
            <param name="builder">查询生成器</param>
            <returns>记录数</returns>
        </member>
        <member name="M:XCode.IEntitySession.ExecuteAsync(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>影响的结果</returns>
        </member>
        <member name="M:XCode.IEntitySession.InsertAndGetIdentityAsync(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="M:XCode.IEntitySession.Truncate">
            <summary>执行Truncate语句</summary>
            <returns>影响的结果</returns>
        </member>
        <member name="E:XCode.IEntitySession.OnDataChange">
            <summary>数据改变后触发。参数指定触发该事件的实体类</summary>
        </member>
        <member name="M:XCode.IEntitySession.BeginTrans">
            <summary>开始事务</summary>
            <returns>剩下的事务计数</returns>
        </member>
        <member name="M:XCode.IEntitySession.Commit">
            <summary>提交事务</summary>
            <returns>剩下的事务计数</returns>
        </member>
        <member name="M:XCode.IEntitySession.Rollback">
            <summary>回滚事务，忽略异常</summary>
            <returns>剩下的事务计数</returns>
        </member>
        <member name="M:XCode.IEntitySession.CreateTrans">
            <summary>创建事务</summary>
        </member>
        <member name="M:XCode.IEntitySession.Insert(XCode.IEntity)">
            <summary>把该对象持久化到数据库，添加/更新实体缓存。</summary>
            <param name="entity">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntitySession.Update(XCode.IEntity)">
            <summary>更新数据库，同时更新实体缓存</summary>
            <param name="entity">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntitySession.Delete(XCode.IEntity)">
            <summary>从数据库中删除该对象，同时从实体缓存中删除</summary>
            <param name="entity">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntitySession.InsertAsync(XCode.IEntity)">
            <summary>把该对象持久化到数据库，添加/更新实体缓存。</summary>
            <param name="entity">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntitySession.UpdateAsync(XCode.IEntity)">
            <summary>更新数据库，同时更新实体缓存</summary>
            <param name="entity">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntitySession.DeleteAsync(XCode.IEntity)">
            <summary>从数据库中删除该对象，同时从实体缓存中删除</summary>
            <param name="entity">实体对象</param>
            <returns></returns>
        </member>
        <member name="T:XCode.EntityException">
            <summary>实体异常</summary>
        </member>
        <member name="M:XCode.EntityException.#ctor">
            <summary>初始化</summary>
        </member>
        <member name="M:XCode.EntityException.#ctor(System.String)">
            <summary>初始化</summary>
            <param name="message"></param>
        </member>
        <member name="M:XCode.EntityException.#ctor(System.String,System.Object[])">
            <summary>初始化</summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:XCode.EntityException.#ctor(System.String,System.Exception)">
            <summary>初始化</summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:XCode.EntityException.#ctor(System.Exception)">
            <summary>初始化</summary>
            <param name="innerException"></param>
        </member>
        <member name="T:XCode.XCodeException">
            <summary>XCode异常</summary>
        </member>
        <member name="M:XCode.XCodeException.#ctor">
            <summary>初始化</summary>
        </member>
        <member name="M:XCode.XCodeException.#ctor(System.String)">
            <summary>初始化</summary>
            <param name="message"></param>
        </member>
        <member name="M:XCode.XCodeException.#ctor(System.String,System.Object[])">
            <summary>初始化</summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:XCode.XCodeException.#ctor(System.String,System.Exception)">
            <summary>初始化</summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:XCode.XCodeException.#ctor(System.Exception)">
            <summary>初始化</summary>
            <param name="innerException"></param>
        </member>
        <member name="T:XCode.Exceptions.XDbException">
            <summary>数据访问层异常</summary>
        </member>
        <member name="P:XCode.Exceptions.XDbException.Database">
            <summary>数据库</summary>
        </member>
        <member name="M:XCode.Exceptions.XDbException.#ctor(XCode.DataAccessLayer.IDatabase)">
            <summary>初始化</summary>
            <param name="db"></param>
        </member>
        <member name="M:XCode.Exceptions.XDbException.#ctor(XCode.DataAccessLayer.IDatabase,System.String)">
            <summary>初始化</summary>
            <param name="db"></param>
            <param name="message"></param>
        </member>
        <member name="M:XCode.Exceptions.XDbException.#ctor(XCode.DataAccessLayer.IDatabase,System.String,System.Exception)">
            <summary>初始化</summary>
            <param name="db"></param>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:XCode.Exceptions.XDbException.#ctor(XCode.DataAccessLayer.IDatabase,System.Exception)">
            <summary>初始化</summary>
            <param name="db"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:XCode.Exceptions.XDbMetaDataException">
            <summary>数据库元数据异常</summary>
        </member>
        <member name="P:XCode.Exceptions.XDbMetaDataException.MetaData">
            <summary>数据库元数据</summary>
        </member>
        <member name="M:XCode.Exceptions.XDbMetaDataException.#ctor(XCode.DataAccessLayer.IMetaData)">
            <summary>初始化</summary>
            <param name="metadata"></param>
        </member>
        <member name="M:XCode.Exceptions.XDbMetaDataException.#ctor(XCode.DataAccessLayer.IMetaData,System.String)">
            <summary>初始化</summary>
            <param name="metadata"></param>
            <param name="message"></param>
        </member>
        <member name="M:XCode.Exceptions.XDbMetaDataException.#ctor(XCode.DataAccessLayer.IMetaData,System.String,System.Exception)">
            <summary>初始化</summary>
            <param name="metadata"></param>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:XCode.Exceptions.XDbMetaDataException.#ctor(XCode.DataAccessLayer.IMetaData,System.Exception)">
            <summary>初始化</summary>
            <param name="metadata"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:XCode.Exceptions.XDbSessionException">
            <summary>数据访问层异常</summary>
        </member>
        <member name="P:XCode.Exceptions.XDbSessionException.Session">
            <summary>数据库会话</summary>
        </member>
        <member name="M:XCode.Exceptions.XDbSessionException.#ctor(XCode.DataAccessLayer.IDbSession)">
            <summary>初始化</summary>
            <param name="session"></param>
        </member>
        <member name="M:XCode.Exceptions.XDbSessionException.#ctor(XCode.DataAccessLayer.IDbSession,System.String)">
            <summary>初始化</summary>
            <param name="session"></param>
            <param name="message"></param>
        </member>
        <member name="M:XCode.Exceptions.XDbSessionException.#ctor(XCode.DataAccessLayer.IDbSession,System.String,System.Exception)">
            <summary>初始化</summary>
            <param name="session"></param>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:XCode.Exceptions.XDbSessionException.#ctor(XCode.DataAccessLayer.IDbSession,System.Exception)">
            <summary>初始化</summary>
            <param name="session"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:XCode.Exceptions.XSqlException">
            <summary>数据访问层SQL异常</summary>
        </member>
        <member name="P:XCode.Exceptions.XSqlException.Sql">
            <summary>SQL语句</summary>
        </member>
        <member name="M:XCode.Exceptions.XSqlException.#ctor(System.String,XCode.DataAccessLayer.IDbSession)">
            <summary>初始化</summary>
            <param name="sql"></param>
            <param name="session"></param>
        </member>
        <member name="M:XCode.Exceptions.XSqlException.#ctor(System.String,XCode.DataAccessLayer.IDbSession,System.String)">
            <summary>初始化</summary>
            <param name="sql"></param>
            <param name="session"></param>
            <param name="message"></param>
        </member>
        <member name="M:XCode.Exceptions.XSqlException.#ctor(System.String,XCode.DataAccessLayer.IDbSession,System.String,System.Exception)">
            <summary>初始化</summary>
            <param name="sql"></param>
            <param name="session"></param>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:XCode.Exceptions.XSqlException.#ctor(System.String,XCode.DataAccessLayer.IDbSession,System.Exception)">
            <summary>初始化</summary>
            <param name="sql"></param>
            <param name="session"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:XCode.Exceptions.XSqlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>从序列化信息中读取Sql</summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:XCode.Extension.MyDbCache">
            <summary>数据缓存</summary>
            <summary>数据缓存</summary>
        </member>
        <member name="M:XCode.Extension.MyDbCache.Valid(System.Boolean)">
            <summary>验证数据，通过抛出异常的方式提示验证失败。</summary>
            <param name="isNew">是否插入</param>
        </member>
        <member name="M:XCode.Extension.MyDbCache.FindByName(System.String)">
            <summary>根据名称查找</summary>
            <param name="name">名称</param>
            <returns>实体对象</returns>
        </member>
        <member name="P:XCode.Extension.MyDbCache.Name">
            <summary>名称</summary>
        </member>
        <member name="P:XCode.Extension.MyDbCache.Value">
            <summary>键值</summary>
        </member>
        <member name="P:XCode.Extension.MyDbCache.CreateTime">
            <summary>创建时间</summary>
        </member>
        <member name="P:XCode.Extension.MyDbCache.ExpiredTime">
            <summary>过期时间</summary>
        </member>
        <member name="P:XCode.Extension.MyDbCache.Item(System.String)">
            <summary>获取/设置 字段值</summary>
            <param name="name">字段名</param>
            <returns></returns>
        </member>
        <member name="T:XCode.Extension.MyDbCache._">
            <summary>取得数据缓存字段信息的快捷方式</summary>
        </member>
        <member name="F:XCode.Extension.MyDbCache._.Name">
            <summary>名称</summary>
        </member>
        <member name="F:XCode.Extension.MyDbCache._.Value">
            <summary>键值</summary>
        </member>
        <member name="F:XCode.Extension.MyDbCache._.CreateTime">
            <summary>创建时间</summary>
        </member>
        <member name="F:XCode.Extension.MyDbCache._.ExpiredTime">
            <summary>过期时间</summary>
        </member>
        <member name="T:XCode.Extension.MyDbCache.__">
            <summary>取得数据缓存字段名称的快捷方式</summary>
        </member>
        <member name="F:XCode.Extension.MyDbCache.__.Name">
            <summary>名称</summary>
        </member>
        <member name="F:XCode.Extension.MyDbCache.__.Value">
            <summary>键值</summary>
        </member>
        <member name="F:XCode.Extension.MyDbCache.__.CreateTime">
            <summary>创建时间</summary>
        </member>
        <member name="F:XCode.Extension.MyDbCache.__.ExpiredTime">
            <summary>过期时间</summary>
        </member>
        <member name="T:XCode.Extension.IMyDbCache">
            <summary>数据缓存接口</summary>
        </member>
        <member name="P:XCode.Extension.IMyDbCache.Name">
            <summary>名称</summary>
        </member>
        <member name="P:XCode.Extension.IMyDbCache.Value">
            <summary>键值</summary>
        </member>
        <member name="P:XCode.Extension.IMyDbCache.CreateTime">
            <summary>创建时间</summary>
        </member>
        <member name="P:XCode.Extension.IMyDbCache.ExpiredTime">
            <summary>过期时间</summary>
        </member>
        <member name="P:XCode.Extension.IMyDbCache.Item(System.String)">
            <summary>获取/设置 字段值</summary>
            <param name="name">字段名</param>
            <returns></returns>
        </member>
        <member name="T:XCode.Membership.IManageProvider">
            <summary>管理提供者接口</summary>
            <remarks>
            管理提供者接口主要提供（或统一规范）用户提供者定位、用户查找登录等功能。
            只需要一个实现IManageUser接口的用户类即可实现IManageProvider接口。
            IManageProvider足够精简，使得大多数用户可以自定义实现；
            也因为其简单稳定，大多数需要涉及用户与权限功能的操作，均可以直接使用该接口。
            </remarks>
        </member>
        <member name="P:XCode.Membership.IManageProvider.Current">
            <summary>当前登录用户，设为空则注销登录</summary>
        </member>
        <member name="P:XCode.Membership.IManageProvider.Tenant">
            <summary>当前租户。正在使用的租户</summary>
        </member>
        <member name="P:XCode.Membership.IManageProvider.PasswordProvider">
            <summary>密码提供者</summary>
        </member>
        <member name="M:XCode.Membership.IManageProvider.GetCurrent(System.IServiceProvider)">
            <summary>获取当前用户</summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.IManageProvider.SetCurrent(NewLife.Model.IManageUser,System.IServiceProvider)">
            <summary>设置当前用户</summary>
            <param name="user"></param>
            <param name="context"></param>
        </member>
        <member name="M:XCode.Membership.IManageProvider.GetTenants">
            <summary>当前用户的所有租户</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.IManageProvider.FindByID(System.Object)">
            <summary>根据用户编号查找</summary>
            <param name="userid"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.IManageProvider.FindByName(System.String)">
            <summary>根据用户帐号查找</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.IManageProvider.Login(System.String,System.String,System.Boolean)">
            <summary>登录</summary>
            <param name="username"></param>
            <param name="password"></param>
            <param name="rememberme">是否记住密码</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.IManageProvider.Logout">
            <summary>注销</summary>
        </member>
        <member name="M:XCode.Membership.IManageProvider.Register(System.String,System.String,System.Int32,System.Boolean)">
            <summary>注册用户</summary>
            <param name="username">用户名</param>
            <param name="password">密码</param>
            <param name="roleid">角色</param>
            <param name="enable">是否启用</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.IManageProvider.ChangePassword(System.String,System.String,System.String)">
            <summary>修改密码</summary>
            <param name="username">用户名</param>
            <param name="newPassword">新密码</param>
            <param name="oldPassword">旧密码，如果未指定，则不校验</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.IManageProvider.Has(XCode.Membership.IMenu,XCode.Membership.PermissionFlags[])">
            <summary>当前用户（或租户）是否拥有指定菜单的某些权限</summary>
            <param name="menu"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.IManageProvider.GetService``1">
            <summary>获取服务</summary>
            <remarks>
            其实IServiceProvider有该扩展方法，但是在FX2里面不方面使用，所以这里保留
            </remarks>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="T:XCode.Membership.ManageProvider">
            <summary>管理提供者</summary>
        </member>
        <member name="P:XCode.Membership.ManageProvider.Provider">
            <summary>当前管理提供者</summary>
        </member>
        <member name="P:XCode.Membership.ManageProvider.User">
            <summary>当前登录用户</summary>
        </member>
        <member name="P:XCode.Membership.ManageProvider.Menu">
            <summary>菜单工厂</summary>
        </member>
        <member name="P:XCode.Membership.ManageProvider.UserHost">
            <summary>用户主机</summary>
        </member>
        <member name="P:XCode.Membership.ManageProvider.Current">
            <summary>当前用户</summary>
        </member>
        <member name="P:XCode.Membership.ManageProvider.Tenant">
            <summary>当前租户。正在使用的租户</summary>
        </member>
        <member name="M:XCode.Membership.ManageProvider.GetTenants">
            <summary>当前用户的所有租户</summary>
            <returns></returns>
        </member>
        <member name="P:XCode.Membership.ManageProvider.PasswordProvider">
            <summary>密码提供者</summary>
        </member>
        <member name="M:XCode.Membership.ManageProvider.GetCurrent(System.IServiceProvider)">
            <summary>获取当前用户</summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.ManageProvider.SetCurrent(NewLife.Model.IManageUser,System.IServiceProvider)">
            <summary>设置当前用户</summary>
            <param name="user"></param>
            <param name="context"></param>
        </member>
        <member name="M:XCode.Membership.ManageProvider.FindByID(System.Object)">
            <summary>根据用户编号查找</summary>
            <param name="userid"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.ManageProvider.FindByName(System.String)">
            <summary>根据用户帐号查找</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.ManageProvider.Login(System.String,System.String,System.Boolean)">
            <summary>登录</summary>
            <param name="username"></param>
            <param name="password"></param>
            <param name="rememberme">是否记住密码</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.ManageProvider.LoginCore(System.String,System.String)">
            <summary>核心登录方法</summary>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.ManageProvider.Logout">
            <summary>注销</summary>
        </member>
        <member name="M:XCode.Membership.ManageProvider.Register(System.String,System.String,System.Int32,System.Boolean)">
            <summary>注册用户</summary>
            <param name="username">用户名</param>
            <param name="password">密码</param>
            <param name="roleid">角色</param>
            <param name="enable">是否启用。某些系统可能需要验证审核</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.ManageProvider.ChangePassword(System.String,System.String,System.String)">
            <summary>修改密码</summary>
            <param name="username">用户名</param>
            <param name="newPassword">新密码</param>
            <param name="oldPassword">旧密码，如果未指定，则不校验</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.ManageProvider.Has(XCode.Membership.IMenu,XCode.Membership.PermissionFlags[])">
            <summary>当前用户（或租户）是否拥有指定菜单的某些权限</summary>
            <param name="menu"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.ManageProvider.GetService``1">
            <summary>获取服务</summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.ManageProvider.GetService(System.Type)">
            <summary>获取服务</summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.ManageProvider.GetFactory``1">
            <summary>根据实体类接口获取实体工厂</summary>
            <typeparam name="TIEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="T:XCode.Membership.IMenuFactory">
            <summary>菜单工厂接口</summary>
        </member>
        <member name="P:XCode.Membership.IMenuFactory.Root">
            <summary>根菜单</summary>
        </member>
        <member name="M:XCode.Membership.IMenuFactory.FindByID(System.Int32)">
            <summary>根据编号找到菜单</summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.IMenuFactory.FindByFullName(System.String)">
            <summary>根据全名找到菜单</summary>
            <param name="fullName"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.IMenuFactory.FindByUrl(System.String)">
            <summary>根据Url找到菜单</summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.IMenuFactory.GetMySubMenus(System.Int32,XCode.Membership.IUser,System.Boolean)">
            <summary>获取指定菜单下，当前用户有权访问的子菜单。</summary>
            <param name="menuid"></param>
            <param name="user"></param>
            <param name="inclInvisible"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.Membership.IArea">
            <summary>地区。行政区划数据，最高支持四级地址，9位数字</summary>
        </member>
        <member name="P:XCode.Membership.IArea.ID">
            <summary>编码。行政区划编码</summary>
        </member>
        <member name="P:XCode.Membership.IArea.Name">
            <summary>名称</summary>
        </member>
        <member name="P:XCode.Membership.IArea.FullName">
            <summary>全名</summary>
        </member>
        <member name="P:XCode.Membership.IArea.ParentID">
            <summary>父级</summary>
        </member>
        <member name="P:XCode.Membership.IArea.Level">
            <summary>层级</summary>
        </member>
        <member name="P:XCode.Membership.IArea.Kind">
            <summary>类型。省市县，自治州等</summary>
        </member>
        <member name="P:XCode.Membership.IArea.English">
            <summary>英文名</summary>
        </member>
        <member name="P:XCode.Membership.IArea.PinYin">
            <summary>拼音</summary>
        </member>
        <member name="P:XCode.Membership.IArea.JianPin">
            <summary>简拼</summary>
        </member>
        <member name="P:XCode.Membership.IArea.TelCode">
            <summary>区号。电话区号</summary>
        </member>
        <member name="P:XCode.Membership.IArea.ZipCode">
            <summary>邮编。邮政编码</summary>
        </member>
        <member name="P:XCode.Membership.IArea.Longitude">
            <summary>经度</summary>
        </member>
        <member name="P:XCode.Membership.IArea.Latitude">
            <summary>纬度</summary>
        </member>
        <member name="P:XCode.Membership.IArea.GeoHash">
            <summary>地址编码。字符串前缀相同越多，地理距离越近，8位精度19米，6位610米</summary>
        </member>
        <member name="P:XCode.Membership.IArea.Enable">
            <summary>启用</summary>
        </member>
        <member name="P:XCode.Membership.IArea.CreateTime">
            <summary>创建时间</summary>
        </member>
        <member name="P:XCode.Membership.IArea.UpdateTime">
            <summary>更新时间</summary>
        </member>
        <member name="P:XCode.Membership.IArea.Remark">
            <summary>备注</summary>
        </member>
        <member name="T:XCode.Membership.IDepartment">
            <summary>部门。组织机构，多级树状结构，支持多租户</summary>
        </member>
        <member name="P:XCode.Membership.IDepartment.ID">
            <summary>编号</summary>
        </member>
        <member name="P:XCode.Membership.IDepartment.TenantId">
            <summary>租户</summary>
        </member>
        <member name="P:XCode.Membership.IDepartment.Code">
            <summary>代码</summary>
        </member>
        <member name="P:XCode.Membership.IDepartment.Name">
            <summary>名称</summary>
        </member>
        <member name="P:XCode.Membership.IDepartment.FullName">
            <summary>全名</summary>
        </member>
        <member name="P:XCode.Membership.IDepartment.ParentID">
            <summary>父级</summary>
        </member>
        <member name="P:XCode.Membership.IDepartment.Level">
            <summary>层级。树状结构的层级</summary>
        </member>
        <member name="P:XCode.Membership.IDepartment.Sort">
            <summary>排序。同级内排序</summary>
        </member>
        <member name="P:XCode.Membership.IDepartment.Enable">
            <summary>启用</summary>
        </member>
        <member name="P:XCode.Membership.IDepartment.Visible">
            <summary>可见</summary>
        </member>
        <member name="P:XCode.Membership.IDepartment.ManagerId">
            <summary>管理者</summary>
        </member>
        <member name="P:XCode.Membership.IDepartment.Ex1">
            <summary>扩展1</summary>
        </member>
        <member name="P:XCode.Membership.IDepartment.Ex2">
            <summary>扩展2</summary>
        </member>
        <member name="P:XCode.Membership.IDepartment.Ex3">
            <summary>扩展3</summary>
        </member>
        <member name="P:XCode.Membership.IDepartment.Ex4">
            <summary>扩展4</summary>
        </member>
        <member name="P:XCode.Membership.IDepartment.Ex5">
            <summary>扩展5</summary>
        </member>
        <member name="P:XCode.Membership.IDepartment.Ex6">
            <summary>扩展6</summary>
        </member>
        <member name="P:XCode.Membership.IDepartment.CreateUser">
            <summary>创建者</summary>
        </member>
        <member name="P:XCode.Membership.IDepartment.CreateUserID">
            <summary>创建用户</summary>
        </member>
        <member name="P:XCode.Membership.IDepartment.CreateIP">
            <summary>创建地址</summary>
        </member>
        <member name="P:XCode.Membership.IDepartment.CreateTime">
            <summary>创建时间</summary>
        </member>
        <member name="P:XCode.Membership.IDepartment.UpdateUser">
            <summary>更新者</summary>
        </member>
        <member name="P:XCode.Membership.IDepartment.UpdateUserID">
            <summary>更新用户</summary>
        </member>
        <member name="P:XCode.Membership.IDepartment.UpdateIP">
            <summary>更新地址</summary>
        </member>
        <member name="P:XCode.Membership.IDepartment.UpdateTime">
            <summary>更新时间</summary>
        </member>
        <member name="P:XCode.Membership.IDepartment.Remark">
            <summary>备注</summary>
        </member>
        <member name="T:XCode.Membership.ILog">
            <summary>日志。应用系统审计日志，记录用户的各种操作，禁止修改和删除</summary>
        </member>
        <member name="P:XCode.Membership.ILog.ID">
            <summary>编号</summary>
        </member>
        <member name="P:XCode.Membership.ILog.Category">
            <summary>类别</summary>
        </member>
        <member name="P:XCode.Membership.ILog.Action">
            <summary>操作</summary>
        </member>
        <member name="P:XCode.Membership.ILog.LinkID">
            <summary>链接</summary>
        </member>
        <member name="P:XCode.Membership.ILog.Success">
            <summary>成功</summary>
        </member>
        <member name="P:XCode.Membership.ILog.UserName">
            <summary>用户名</summary>
        </member>
        <member name="P:XCode.Membership.ILog.Ex1">
            <summary>扩展1</summary>
        </member>
        <member name="P:XCode.Membership.ILog.Ex2">
            <summary>扩展2</summary>
        </member>
        <member name="P:XCode.Membership.ILog.Ex3">
            <summary>扩展3</summary>
        </member>
        <member name="P:XCode.Membership.ILog.Ex4">
            <summary>扩展4</summary>
        </member>
        <member name="P:XCode.Membership.ILog.Ex5">
            <summary>扩展5</summary>
        </member>
        <member name="P:XCode.Membership.ILog.Ex6">
            <summary>扩展6</summary>
        </member>
        <member name="P:XCode.Membership.ILog.TraceId">
            <summary>性能追踪。用于APM性能追踪定位，还原该事件的调用链</summary>
        </member>
        <member name="P:XCode.Membership.ILog.CreateUser">
            <summary>创建者</summary>
        </member>
        <member name="P:XCode.Membership.ILog.CreateUserID">
            <summary>创建用户</summary>
        </member>
        <member name="P:XCode.Membership.ILog.CreateIP">
            <summary>创建地址</summary>
        </member>
        <member name="P:XCode.Membership.ILog.CreateTime">
            <summary>时间</summary>
        </member>
        <member name="P:XCode.Membership.ILog.Remark">
            <summary>详细信息</summary>
        </member>
        <member name="T:XCode.Membership.IMenu">
            <summary>菜单。功能权限，大多数时候也是可见页面</summary>
            <summary>菜单接口</summary>
        </member>
        <member name="P:XCode.Membership.IMenu.ID">
            <summary>编号</summary>
        </member>
        <member name="P:XCode.Membership.IMenu.Name">
            <summary>名称</summary>
        </member>
        <member name="P:XCode.Membership.IMenu.DisplayName">
            <summary>显示名</summary>
        </member>
        <member name="P:XCode.Membership.IMenu.FullName">
            <summary>全名</summary>
        </member>
        <member name="P:XCode.Membership.IMenu.ParentID">
            <summary>父编号</summary>
        </member>
        <member name="P:XCode.Membership.IMenu.Url">
            <summary>链接</summary>
        </member>
        <member name="P:XCode.Membership.IMenu.Sort">
            <summary>排序</summary>
        </member>
        <member name="P:XCode.Membership.IMenu.Icon">
            <summary>图标</summary>
        </member>
        <member name="P:XCode.Membership.IMenu.Visible">
            <summary>可见</summary>
        </member>
        <member name="P:XCode.Membership.IMenu.Necessary">
            <summary>必要。必要的菜单，必须至少有角色拥有这些权限，如果没有则自动授权给系统角色</summary>
        </member>
        <member name="P:XCode.Membership.IMenu.NewWindow">
            <summary>新窗口。新窗口打开链接</summary>
        </member>
        <member name="P:XCode.Membership.IMenu.Permission">
            <summary>权限子项。逗号分隔，每个权限子项名值竖线分隔</summary>
        </member>
        <member name="P:XCode.Membership.IMenu.Ex1">
            <summary>扩展1</summary>
        </member>
        <member name="P:XCode.Membership.IMenu.Ex2">
            <summary>扩展2</summary>
        </member>
        <member name="P:XCode.Membership.IMenu.Ex3">
            <summary>扩展3</summary>
        </member>
        <member name="P:XCode.Membership.IMenu.Ex4">
            <summary>扩展4</summary>
        </member>
        <member name="P:XCode.Membership.IMenu.Ex5">
            <summary>扩展5</summary>
        </member>
        <member name="P:XCode.Membership.IMenu.Ex6">
            <summary>扩展6</summary>
        </member>
        <member name="P:XCode.Membership.IMenu.CreateUser">
            <summary>创建者</summary>
        </member>
        <member name="P:XCode.Membership.IMenu.CreateUserID">
            <summary>创建用户</summary>
        </member>
        <member name="P:XCode.Membership.IMenu.CreateIP">
            <summary>创建地址</summary>
        </member>
        <member name="P:XCode.Membership.IMenu.CreateTime">
            <summary>创建时间</summary>
        </member>
        <member name="P:XCode.Membership.IMenu.UpdateUser">
            <summary>更新者</summary>
        </member>
        <member name="P:XCode.Membership.IMenu.UpdateUserID">
            <summary>更新用户</summary>
        </member>
        <member name="P:XCode.Membership.IMenu.UpdateIP">
            <summary>更新地址</summary>
        </member>
        <member name="P:XCode.Membership.IMenu.UpdateTime">
            <summary>更新时间</summary>
        </member>
        <member name="P:XCode.Membership.IMenu.Remark">
            <summary>备注</summary>
        </member>
        <member name="M:XCode.Membership.IMenu.GetFullPath(System.Boolean,System.String,System.Func{XCode.Membership.IMenu,System.String})">
            <summary>取得全路径的实体，由上向下排序</summary>
            <param name="includeSelf">是否包含自己</param>
            <param name="separator">分隔符</param>
            <param name="func">回调</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.IMenu.Add(System.String,System.String,System.String,System.String)">
            <summary>添加子菜单</summary>
            <param name="name"></param>
            <param name="displayName"></param>
            <param name="fullName"></param>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.Membership.IMenu.Parent">
            <summary>父菜单</summary>
        </member>
        <member name="P:XCode.Membership.IMenu.Childs">
            <summary>子菜单</summary>
        </member>
        <member name="P:XCode.Membership.IMenu.AllChilds">
            <summary>子孙菜单</summary>
        </member>
        <member name="M:XCode.Membership.IMenu.FindByPath(System.String)">
            <summary>根据层次路径查找。因为需要指定在某个菜单子级查找路径，所以是成员方法而不是静态方法</summary>
            <param name="path">层次路径</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.IMenu.Up">
            <summary>排序上升</summary>
        </member>
        <member name="M:XCode.Membership.IMenu.Down">
            <summary>排序下降</summary>
        </member>
        <member name="M:XCode.Membership.IMenu.GetSubMenus(System.Int32[],System.Boolean)">
            <summary></summary>
            <param name="filters"></param>
            <param name="inclInvisible">是否包含不可见菜单</param>
            <returns></returns>
        </member>
        <member name="P:XCode.Membership.IMenu.Permissions">
            <summary>可选权限子项</summary>
        </member>
        <member name="T:XCode.Membership.IParameter">
            <summary>字典参数。管理用户或系统全局的名值对数据，常用于参数配置场合</summary>
        </member>
        <member name="P:XCode.Membership.IParameter.ID">
            <summary>编号</summary>
        </member>
        <member name="P:XCode.Membership.IParameter.UserID">
            <summary>用户。按用户区分参数，用户0表示系统级</summary>
        </member>
        <member name="P:XCode.Membership.IParameter.Category">
            <summary>类别</summary>
        </member>
        <member name="P:XCode.Membership.IParameter.Name">
            <summary>名称</summary>
        </member>
        <member name="P:XCode.Membership.IParameter.Value">
            <summary>数值</summary>
        </member>
        <member name="P:XCode.Membership.IParameter.LongValue">
            <summary>长数值</summary>
        </member>
        <member name="P:XCode.Membership.IParameter.Kind">
            <summary>种类。0普通，21列表，22名值</summary>
        </member>
        <member name="P:XCode.Membership.IParameter.Enable">
            <summary>启用</summary>
        </member>
        <member name="P:XCode.Membership.IParameter.Ex1">
            <summary>扩展1</summary>
        </member>
        <member name="P:XCode.Membership.IParameter.Ex2">
            <summary>扩展2</summary>
        </member>
        <member name="P:XCode.Membership.IParameter.Ex3">
            <summary>扩展3</summary>
        </member>
        <member name="P:XCode.Membership.IParameter.Ex4">
            <summary>扩展4</summary>
        </member>
        <member name="P:XCode.Membership.IParameter.Ex5">
            <summary>扩展5</summary>
        </member>
        <member name="P:XCode.Membership.IParameter.Ex6">
            <summary>扩展6</summary>
        </member>
        <member name="P:XCode.Membership.IParameter.CreateUser">
            <summary>创建者</summary>
        </member>
        <member name="P:XCode.Membership.IParameter.CreateUserID">
            <summary>创建用户</summary>
        </member>
        <member name="P:XCode.Membership.IParameter.CreateIP">
            <summary>创建地址</summary>
        </member>
        <member name="P:XCode.Membership.IParameter.CreateTime">
            <summary>创建时间</summary>
        </member>
        <member name="P:XCode.Membership.IParameter.UpdateUser">
            <summary>更新者</summary>
        </member>
        <member name="P:XCode.Membership.IParameter.UpdateUserID">
            <summary>更新用户</summary>
        </member>
        <member name="P:XCode.Membership.IParameter.UpdateIP">
            <summary>更新地址</summary>
        </member>
        <member name="P:XCode.Membership.IParameter.UpdateTime">
            <summary>更新时间</summary>
        </member>
        <member name="P:XCode.Membership.IParameter.Remark">
            <summary>备注</summary>
        </member>
        <member name="T:XCode.Membership.IRole">
            <summary>角色。业务场景中的岗位，功能权限的集合。不管是用户还是租户，都以角色来管理权限</summary>
            <summary>角色</summary>
        </member>
        <member name="P:XCode.Membership.IRole.ID">
            <summary>编号</summary>
        </member>
        <member name="P:XCode.Membership.IRole.Name">
            <summary>名称</summary>
        </member>
        <member name="P:XCode.Membership.IRole.Enable">
            <summary>启用</summary>
        </member>
        <member name="P:XCode.Membership.IRole.IsSystem">
            <summary>系统。用于业务系统开发使用，不受数据权限约束，禁止修改名称或删除</summary>
        </member>
        <member name="P:XCode.Membership.IRole.Permission">
            <summary>权限。对不同资源的权限，逗号分隔，每个资源的权限子项竖线分隔</summary>
        </member>
        <member name="P:XCode.Membership.IRole.Sort">
            <summary>排序</summary>
        </member>
        <member name="P:XCode.Membership.IRole.Ex1">
            <summary>扩展1</summary>
        </member>
        <member name="P:XCode.Membership.IRole.Ex2">
            <summary>扩展2</summary>
        </member>
        <member name="P:XCode.Membership.IRole.Ex3">
            <summary>扩展3</summary>
        </member>
        <member name="P:XCode.Membership.IRole.Ex4">
            <summary>扩展4</summary>
        </member>
        <member name="P:XCode.Membership.IRole.Ex5">
            <summary>扩展5</summary>
        </member>
        <member name="P:XCode.Membership.IRole.Ex6">
            <summary>扩展6</summary>
        </member>
        <member name="P:XCode.Membership.IRole.CreateUser">
            <summary>创建者</summary>
        </member>
        <member name="P:XCode.Membership.IRole.CreateUserID">
            <summary>创建用户</summary>
        </member>
        <member name="P:XCode.Membership.IRole.CreateIP">
            <summary>创建地址</summary>
        </member>
        <member name="P:XCode.Membership.IRole.CreateTime">
            <summary>创建时间</summary>
        </member>
        <member name="P:XCode.Membership.IRole.UpdateUser">
            <summary>更新者</summary>
        </member>
        <member name="P:XCode.Membership.IRole.UpdateUserID">
            <summary>更新用户</summary>
        </member>
        <member name="P:XCode.Membership.IRole.UpdateIP">
            <summary>更新地址</summary>
        </member>
        <member name="P:XCode.Membership.IRole.UpdateTime">
            <summary>更新时间</summary>
        </member>
        <member name="P:XCode.Membership.IRole.Remark">
            <summary>备注</summary>
        </member>
        <member name="P:XCode.Membership.IRole.Permissions">
            <summary>本角色权限集合</summary>
        </member>
        <member name="M:XCode.Membership.IRole.Has(System.Int32,XCode.Membership.PermissionFlags)">
            <summary>是否拥有指定资源的指定权限</summary>
            <param name="resid"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.IRole.Get(System.Int32)">
            <summary>获取权限</summary>
            <param name="resid"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.IRole.Set(System.Int32,XCode.Membership.PermissionFlags)">
            <summary>设置该角色拥有指定资源的指定权限</summary>
            <param name="resid"></param>
            <param name="flag"></param>
        </member>
        <member name="M:XCode.Membership.IRole.Reset(System.Int32,XCode.Membership.PermissionFlags)">
            <summary>重置该角色指定的权限</summary>
            <param name="resid"></param>
            <param name="flag"></param>
        </member>
        <member name="P:XCode.Membership.IRole.Resources">
            <summary>当前角色拥有的资源</summary>
        </member>
        <member name="M:XCode.Membership.IRole.FindByID(System.Int32)">
            <summary>根据编号查找角色</summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.IRole.GetOrAdd(System.String)">
            <summary>根据名称查找角色，若不存在则创建</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.IRole.Save">
            <summary>保存</summary>
            <returns></returns>
        </member>
        <member name="T:XCode.Membership.ITenant">
            <summary>租户。多租户SAAS平台，用于隔离业务数据</summary>
        </member>
        <member name="P:XCode.Membership.ITenant.Id">
            <summary>编号</summary>
        </member>
        <member name="P:XCode.Membership.ITenant.Code">
            <summary>编码。唯一编码</summary>
        </member>
        <member name="P:XCode.Membership.ITenant.Name">
            <summary>名称。显示名称</summary>
        </member>
        <member name="P:XCode.Membership.ITenant.Enable">
            <summary>启用</summary>
        </member>
        <member name="P:XCode.Membership.ITenant.ManagerId">
            <summary>管理者</summary>
        </member>
        <member name="P:XCode.Membership.ITenant.RoleIds">
            <summary>角色组。租户可选的角色集合，不同级别的租户所拥有的角色不一样，高级功能也会不同</summary>
        </member>
        <member name="P:XCode.Membership.ITenant.Logo">
            <summary>图标。附件路径</summary>
        </member>
        <member name="P:XCode.Membership.ITenant.DatabaseName">
            <summary>数据库。分库用的数据库名</summary>
        </member>
        <member name="P:XCode.Membership.ITenant.TableName">
            <summary>数据表。分表用的数据表前缀</summary>
        </member>
        <member name="P:XCode.Membership.ITenant.Expired">
            <summary>过期时间。达到该时间后，自动禁用租户，空表示永不过期</summary>
        </member>
        <member name="P:XCode.Membership.ITenant.Remark">
            <summary>描述</summary>
        </member>
        <member name="T:XCode.Membership.ITenantUser">
            <summary>租户关系。用户选择租户进入系统后，以租户关系角色组替代自有角色组来进行鉴权</summary>
            <summary>租户关系</summary>
        </member>
        <member name="P:XCode.Membership.ITenantUser.Id">
            <summary>编号</summary>
        </member>
        <member name="P:XCode.Membership.ITenantUser.TenantId">
            <summary>租户</summary>
        </member>
        <member name="P:XCode.Membership.ITenantUser.UserId">
            <summary>用户</summary>
        </member>
        <member name="P:XCode.Membership.ITenantUser.Enable">
            <summary>启用</summary>
        </member>
        <member name="P:XCode.Membership.ITenantUser.RoleId">
            <summary>角色。用户在该租户所对应的主要角色，替换用户自身的角色组</summary>
        </member>
        <member name="P:XCode.Membership.ITenantUser.RoleIds">
            <summary>角色组。次要角色集合</summary>
        </member>
        <member name="P:XCode.Membership.ITenantUser.Remark">
            <summary>描述</summary>
        </member>
        <member name="P:XCode.Membership.ITenantUser.Role">
            <summary>角色</summary>
        </member>
        <member name="P:XCode.Membership.ITenantUser.Roles">
            <summary>角色集合</summary>
        </member>
        <member name="P:XCode.Membership.ITenantUser.RoleName">
            <summary>角色名</summary>
        </member>
        <member name="M:XCode.Membership.ITenantUser.Has(XCode.Membership.IMenu,XCode.Membership.PermissionFlags[])">
            <summary>用户是否拥有当前菜单的指定权限</summary>
            <param name="menu">指定菜单</param>
            <param name="flags">是否拥有多个权限中的任意一个，或的关系。如果需要表示与的关系，可以传入一个多权限位合并</param>
            <returns></returns>
        </member>
        <member name="T:XCode.Membership.IUser">
            <summary>用户。用户帐号信息，以身份验证为中心，拥有多种角色，可加入多个租户</summary>
            <summary>用户</summary>
        </member>
        <member name="P:XCode.Membership.IUser.ID">
            <summary>编号</summary>
        </member>
        <member name="P:XCode.Membership.IUser.Name">
            <summary>名称。登录用户名</summary>
        </member>
        <member name="P:XCode.Membership.IUser.Password">
            <summary>密码</summary>
        </member>
        <member name="P:XCode.Membership.IUser.DisplayName">
            <summary>昵称</summary>
        </member>
        <member name="P:XCode.Membership.IUser.Sex">
            <summary>性别。未知、男、女</summary>
        </member>
        <member name="P:XCode.Membership.IUser.Mail">
            <summary>邮件。支持登录</summary>
        </member>
        <member name="P:XCode.Membership.IUser.Mobile">
            <summary>手机。支持登录</summary>
        </member>
        <member name="P:XCode.Membership.IUser.Code">
            <summary>代码。身份证、员工编码等，支持登录</summary>
        </member>
        <member name="P:XCode.Membership.IUser.AreaId">
            <summary>地区。省市区</summary>
        </member>
        <member name="P:XCode.Membership.IUser.Avatar">
            <summary>头像</summary>
        </member>
        <member name="P:XCode.Membership.IUser.RoleID">
            <summary>角色。主要角色</summary>
        </member>
        <member name="P:XCode.Membership.IUser.RoleIds">
            <summary>角色组。次要角色集合</summary>
        </member>
        <member name="P:XCode.Membership.IUser.DepartmentID">
            <summary>部门。组织机构</summary>
        </member>
        <member name="P:XCode.Membership.IUser.Online">
            <summary>在线</summary>
        </member>
        <member name="P:XCode.Membership.IUser.Enable">
            <summary>启用</summary>
        </member>
        <member name="P:XCode.Membership.IUser.Age">
            <summary>年龄。周岁</summary>
        </member>
        <member name="P:XCode.Membership.IUser.Birthday">
            <summary>生日。公历年月日</summary>
        </member>
        <member name="P:XCode.Membership.IUser.Logins">
            <summary>登录次数</summary>
        </member>
        <member name="P:XCode.Membership.IUser.LastLogin">
            <summary>最后登录</summary>
        </member>
        <member name="P:XCode.Membership.IUser.LastLoginIP">
            <summary>最后登录IP</summary>
        </member>
        <member name="P:XCode.Membership.IUser.RegisterTime">
            <summary>注册时间</summary>
        </member>
        <member name="P:XCode.Membership.IUser.RegisterIP">
            <summary>注册IP</summary>
        </member>
        <member name="P:XCode.Membership.IUser.OnlineTime">
            <summary>在线时间。累计在线总时间，单位秒</summary>
        </member>
        <member name="P:XCode.Membership.IUser.Ex1">
            <summary>扩展1</summary>
        </member>
        <member name="P:XCode.Membership.IUser.Ex2">
            <summary>扩展2</summary>
        </member>
        <member name="P:XCode.Membership.IUser.Ex3">
            <summary>扩展3</summary>
        </member>
        <member name="P:XCode.Membership.IUser.Ex4">
            <summary>扩展4</summary>
        </member>
        <member name="P:XCode.Membership.IUser.Ex5">
            <summary>扩展5</summary>
        </member>
        <member name="P:XCode.Membership.IUser.Ex6">
            <summary>扩展6</summary>
        </member>
        <member name="P:XCode.Membership.IUser.Remark">
            <summary>备注</summary>
        </member>
        <member name="P:XCode.Membership.IUser.Role">
            <summary>角色</summary>
        </member>
        <member name="P:XCode.Membership.IUser.Roles">
            <summary>角色集合</summary>
        </member>
        <member name="P:XCode.Membership.IUser.RoleName">
            <summary>角色名</summary>
        </member>
        <member name="M:XCode.Membership.IUser.Has(XCode.Membership.IMenu,XCode.Membership.PermissionFlags[])">
            <summary>用户是否拥有当前菜单的指定权限</summary>
            <param name="menu">指定菜单</param>
            <param name="flags">是否拥有多个权限中的任意一个，或的关系。如果需要表示与的关系，可以传入一个多权限位合并</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.IUser.Logout">
            <summary>注销</summary>
        </member>
        <member name="M:XCode.Membership.IUser.Save">
            <summary>保存</summary>
        </member>
        <member name="T:XCode.Membership.ITenantSource">
            <summary>租户数据源接口，指示该类带有租户标识TenantId</summary>
        </member>
        <member name="P:XCode.Membership.ITenantSource.TenantId">
            <summary>租户标识</summary>
        </member>
        <member name="T:XCode.Membership.TenantContext">
            <summary>租户上下文</summary>
            <remarks>
            在实体对象插入时，补充或校验租户标识；
            在实体对象更新或删除时，校验租户标识；
            在实体查询时，补充租户查询条件；
            </remarks>
        </member>
        <member name="P:XCode.Membership.TenantContext.TenantId">
            <summary>租户标识</summary>
        </member>
        <member name="P:XCode.Membership.TenantContext.Current">
            <summary>当前租户上下文</summary>
        </member>
        <member name="P:XCode.Membership.TenantContext.CurrentId">
            <summary>当前租户标识。无效时返回0</summary>
        </member>
        <member name="T:XCode.Membership.TenantSourceHelper">
            <summary>多租户助手</summary>
        </member>
        <member name="T:XCode.Membership.TenantModule">
            <summary>租户过滤器。添加修改时自动设置租户标识</summary>
        </member>
        <member name="M:XCode.Membership.TenantModule.OnInit(System.Type)">
            <summary>初始化。检查是否匹配</summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.TenantModule.OnCreate(XCode.IEntity,System.Boolean)">
            <summary>创建实体对象</summary>
            <param name="entity"></param>
            <param name="forEdit"></param>
        </member>
        <member name="M:XCode.Membership.TenantModule.OnValid(XCode.IEntity,XCode.DataMethod)">
            <summary>验证数据，自动加上创建和更新的信息</summary>
            <param name="entity"></param>
            <param name="method"></param>
        </member>
        <member name="T:XCode.Membership.LogEntity`1">
            <summary>日志实体类基类</summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:XCode.Membership.LogEntity`1.Insert">
            <summary>添加时写日志</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.LogEntity`1.Update">
            <summary>修改时写日志</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.LogEntity`1.Delete">
            <summary>删除时写日志</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.LogEntity`1.WriteLog(System.String,System.Boolean,System.String)">
            <summary>写日志</summary>
            <param name="action">操作</param>
            <param name="success">成功</param>
            <param name="remark">备注</param>
        </member>
        <member name="T:XCode.Membership.LogProvider">
            <summary>日志提供者。提供业务日志输出到数据库的功能</summary>
        </member>
        <member name="M:XCode.Membership.LogProvider.WriteLog(System.String,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>写日志</summary>
            <param name="category">类型</param>
            <param name="action">操作</param>
            <param name="remark">备注</param>
            <param name="userid">用户</param>
            <param name="name">名称</param>
            <param name="ip">地址</param>
        </member>
        <member name="M:XCode.Membership.LogProvider.WriteLog(System.Type,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>写日志</summary>
            <param name="type">类型</param>
            <param name="action">操作</param>
            <param name="remark">备注</param>
            <param name="userid">用户</param>
            <param name="name">名称</param>
            <param name="ip">地址</param>
        </member>
        <member name="M:XCode.Membership.LogProvider.CreateLog(System.String,System.String,System.Boolean,System.String,System.Int32,System.String,System.String)">
            <summary>创建日志，未写入</summary>
            <param name="category">类型</param>
            <param name="action">操作</param>
            <param name="success">成功</param>
            <param name="remark">备注</param>
            <param name="userid">用户</param>
            <param name="name">名称</param>
            <param name="ip">地址</param>
        </member>
        <member name="M:XCode.Membership.LogProvider.CreateLog(System.Type,System.String,System.Boolean,System.String,System.Int32,System.String,System.String,System.Int64)">
            <summary>创建日志，未写入</summary>
            <param name="type">实体类型</param>
            <param name="action">操作</param>
            <param name="success">成功</param>
            <param name="remark">备注</param>
            <param name="userid">用户</param>
            <param name="name">名称</param>
            <param name="ip">地址</param>
            <param name="linkid">关联编号</param>
        </member>
        <member name="M:XCode.Membership.LogProvider.WriteLog(System.String,System.String,System.Boolean,System.String,System.Int32,System.String,System.String)">
            <summary>写日志</summary>
            <param name="category">类型</param>
            <param name="action">操作</param>
            <param name="success">成功</param>
            <param name="remark">备注</param>
            <param name="userid">用户</param>
            <param name="name">名称</param>
            <param name="ip">地址</param>
        </member>
        <member name="M:XCode.Membership.LogProvider.WriteLog(System.Type,System.String,System.Boolean,System.String,System.Int32,System.String,System.String)">
            <summary>写日志</summary>
            <param name="type">类型</param>
            <param name="action">操作</param>
            <param name="success">成功</param>
            <param name="remark">备注</param>
            <param name="userid">用户</param>
            <param name="name">名称</param>
            <param name="ip">地址</param>
        </member>
        <member name="M:XCode.Membership.LogProvider.WriteLog(System.String,XCode.IEntity,System.String)">
            <summary>输出实体对象日志</summary>
            <param name="action">操作</param>
            <param name="entity">实体</param>
            <param name="error">错误信息</param>
        </member>
        <member name="P:XCode.Membership.LogProvider.Enable">
            <summary>是否使用日志</summary>
        </member>
        <member name="M:XCode.Membership.LogProvider.AsLog(System.String)">
            <summary>转为标准日志接口</summary>
            <param name="category">日志分类</param>
            <returns></returns>
        </member>
        <member name="P:XCode.Membership.LogProvider.Provider">
            <summary>当前成员提供者</summary>
        </member>
        <member name="P:XCode.Membership.LogProvider.Provider2">
            <summary>当前用户提供者</summary>
        </member>
        <member name="T:XCode.Membership.AreaModel">
            <summary>地区。行政区划数据，最高支持四级地址，9位数字</summary>
        </member>
        <member name="P:XCode.Membership.AreaModel.ID">
            <summary>编码。行政区划编码</summary>
        </member>
        <member name="P:XCode.Membership.AreaModel.Name">
            <summary>名称</summary>
        </member>
        <member name="P:XCode.Membership.AreaModel.FullName">
            <summary>全名</summary>
        </member>
        <member name="P:XCode.Membership.AreaModel.ParentID">
            <summary>父级</summary>
        </member>
        <member name="P:XCode.Membership.AreaModel.Level">
            <summary>层级</summary>
        </member>
        <member name="P:XCode.Membership.AreaModel.Kind">
            <summary>类型。省市县，自治州等</summary>
        </member>
        <member name="P:XCode.Membership.AreaModel.English">
            <summary>英文名</summary>
        </member>
        <member name="P:XCode.Membership.AreaModel.PinYin">
            <summary>拼音</summary>
        </member>
        <member name="P:XCode.Membership.AreaModel.JianPin">
            <summary>简拼</summary>
        </member>
        <member name="P:XCode.Membership.AreaModel.TelCode">
            <summary>区号。电话区号</summary>
        </member>
        <member name="P:XCode.Membership.AreaModel.ZipCode">
            <summary>邮编。邮政编码</summary>
        </member>
        <member name="P:XCode.Membership.AreaModel.Longitude">
            <summary>经度</summary>
        </member>
        <member name="P:XCode.Membership.AreaModel.Latitude">
            <summary>纬度</summary>
        </member>
        <member name="P:XCode.Membership.AreaModel.GeoHash">
            <summary>地址编码。字符串前缀相同越多，地理距离越近，8位精度19米，6位610米</summary>
        </member>
        <member name="P:XCode.Membership.AreaModel.Enable">
            <summary>启用</summary>
        </member>
        <member name="P:XCode.Membership.AreaModel.CreateTime">
            <summary>创建时间</summary>
        </member>
        <member name="P:XCode.Membership.AreaModel.UpdateTime">
            <summary>更新时间</summary>
        </member>
        <member name="P:XCode.Membership.AreaModel.Remark">
            <summary>备注</summary>
        </member>
        <member name="P:XCode.Membership.AreaModel.Item(System.String)">
            <summary>获取/设置 字段值</summary>
            <param name="name">字段名</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.AreaModel.Copy(XCode.Membership.IArea)">
            <summary>拷贝模型对象</summary>
            <param name="model">模型</param>
        </member>
        <member name="T:XCode.Membership.DepartmentModel">
            <summary>部门。组织机构，多级树状结构，支持多租户</summary>
        </member>
        <member name="P:XCode.Membership.DepartmentModel.ID">
            <summary>编号</summary>
        </member>
        <member name="P:XCode.Membership.DepartmentModel.TenantId">
            <summary>租户</summary>
        </member>
        <member name="P:XCode.Membership.DepartmentModel.Code">
            <summary>代码</summary>
        </member>
        <member name="P:XCode.Membership.DepartmentModel.Name">
            <summary>名称</summary>
        </member>
        <member name="P:XCode.Membership.DepartmentModel.FullName">
            <summary>全名</summary>
        </member>
        <member name="P:XCode.Membership.DepartmentModel.ParentID">
            <summary>父级</summary>
        </member>
        <member name="P:XCode.Membership.DepartmentModel.Level">
            <summary>层级。树状结构的层级</summary>
        </member>
        <member name="P:XCode.Membership.DepartmentModel.Sort">
            <summary>排序。同级内排序</summary>
        </member>
        <member name="P:XCode.Membership.DepartmentModel.Enable">
            <summary>启用</summary>
        </member>
        <member name="P:XCode.Membership.DepartmentModel.Visible">
            <summary>可见</summary>
        </member>
        <member name="P:XCode.Membership.DepartmentModel.ManagerId">
            <summary>管理者</summary>
        </member>
        <member name="P:XCode.Membership.DepartmentModel.Ex1">
            <summary>扩展1</summary>
        </member>
        <member name="P:XCode.Membership.DepartmentModel.Ex2">
            <summary>扩展2</summary>
        </member>
        <member name="P:XCode.Membership.DepartmentModel.Ex3">
            <summary>扩展3</summary>
        </member>
        <member name="P:XCode.Membership.DepartmentModel.Ex4">
            <summary>扩展4</summary>
        </member>
        <member name="P:XCode.Membership.DepartmentModel.Ex5">
            <summary>扩展5</summary>
        </member>
        <member name="P:XCode.Membership.DepartmentModel.Ex6">
            <summary>扩展6</summary>
        </member>
        <member name="P:XCode.Membership.DepartmentModel.CreateUser">
            <summary>创建者</summary>
        </member>
        <member name="P:XCode.Membership.DepartmentModel.CreateUserID">
            <summary>创建用户</summary>
        </member>
        <member name="P:XCode.Membership.DepartmentModel.CreateIP">
            <summary>创建地址</summary>
        </member>
        <member name="P:XCode.Membership.DepartmentModel.CreateTime">
            <summary>创建时间</summary>
        </member>
        <member name="P:XCode.Membership.DepartmentModel.UpdateUser">
            <summary>更新者</summary>
        </member>
        <member name="P:XCode.Membership.DepartmentModel.UpdateUserID">
            <summary>更新用户</summary>
        </member>
        <member name="P:XCode.Membership.DepartmentModel.UpdateIP">
            <summary>更新地址</summary>
        </member>
        <member name="P:XCode.Membership.DepartmentModel.UpdateTime">
            <summary>更新时间</summary>
        </member>
        <member name="P:XCode.Membership.DepartmentModel.Remark">
            <summary>备注</summary>
        </member>
        <member name="P:XCode.Membership.DepartmentModel.Item(System.String)">
            <summary>获取/设置 字段值</summary>
            <param name="name">字段名</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.DepartmentModel.Copy(XCode.Membership.IDepartment)">
            <summary>拷贝模型对象</summary>
            <param name="model">模型</param>
        </member>
        <member name="T:XCode.Membership.LogModel">
            <summary>日志。应用系统审计日志，记录用户的各种操作，禁止修改和删除</summary>
        </member>
        <member name="P:XCode.Membership.LogModel.ID">
            <summary>编号</summary>
        </member>
        <member name="P:XCode.Membership.LogModel.Category">
            <summary>类别</summary>
        </member>
        <member name="P:XCode.Membership.LogModel.Action">
            <summary>操作</summary>
        </member>
        <member name="P:XCode.Membership.LogModel.LinkID">
            <summary>链接</summary>
        </member>
        <member name="P:XCode.Membership.LogModel.Success">
            <summary>成功</summary>
        </member>
        <member name="P:XCode.Membership.LogModel.UserName">
            <summary>用户名</summary>
        </member>
        <member name="P:XCode.Membership.LogModel.Ex1">
            <summary>扩展1</summary>
        </member>
        <member name="P:XCode.Membership.LogModel.Ex2">
            <summary>扩展2</summary>
        </member>
        <member name="P:XCode.Membership.LogModel.Ex3">
            <summary>扩展3</summary>
        </member>
        <member name="P:XCode.Membership.LogModel.Ex4">
            <summary>扩展4</summary>
        </member>
        <member name="P:XCode.Membership.LogModel.Ex5">
            <summary>扩展5</summary>
        </member>
        <member name="P:XCode.Membership.LogModel.Ex6">
            <summary>扩展6</summary>
        </member>
        <member name="P:XCode.Membership.LogModel.TraceId">
            <summary>性能追踪。用于APM性能追踪定位，还原该事件的调用链</summary>
        </member>
        <member name="P:XCode.Membership.LogModel.CreateUser">
            <summary>创建者</summary>
        </member>
        <member name="P:XCode.Membership.LogModel.CreateUserID">
            <summary>创建用户</summary>
        </member>
        <member name="P:XCode.Membership.LogModel.CreateIP">
            <summary>创建地址</summary>
        </member>
        <member name="P:XCode.Membership.LogModel.CreateTime">
            <summary>时间</summary>
        </member>
        <member name="P:XCode.Membership.LogModel.Remark">
            <summary>详细信息</summary>
        </member>
        <member name="P:XCode.Membership.LogModel.Item(System.String)">
            <summary>获取/设置 字段值</summary>
            <param name="name">字段名</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.LogModel.Copy(XCode.Membership.ILog)">
            <summary>拷贝模型对象</summary>
            <param name="model">模型</param>
        </member>
        <member name="T:XCode.Membership.MenuModel">
            <summary>菜单。功能权限，大多数时候也是可见页面</summary>
        </member>
        <member name="P:XCode.Membership.MenuModel.ID">
            <summary>编号</summary>
        </member>
        <member name="P:XCode.Membership.MenuModel.Name">
            <summary>名称</summary>
        </member>
        <member name="P:XCode.Membership.MenuModel.DisplayName">
            <summary>显示名</summary>
        </member>
        <member name="P:XCode.Membership.MenuModel.FullName">
            <summary>全名</summary>
        </member>
        <member name="P:XCode.Membership.MenuModel.ParentID">
            <summary>父编号</summary>
        </member>
        <member name="P:XCode.Membership.MenuModel.Url">
            <summary>链接</summary>
        </member>
        <member name="P:XCode.Membership.MenuModel.Sort">
            <summary>排序</summary>
        </member>
        <member name="P:XCode.Membership.MenuModel.Icon">
            <summary>图标</summary>
        </member>
        <member name="P:XCode.Membership.MenuModel.Visible">
            <summary>可见</summary>
        </member>
        <member name="P:XCode.Membership.MenuModel.Necessary">
            <summary>必要。必要的菜单，必须至少有角色拥有这些权限，如果没有则自动授权给系统角色</summary>
        </member>
        <member name="P:XCode.Membership.MenuModel.NewWindow">
            <summary>新窗口。新窗口打开链接</summary>
        </member>
        <member name="P:XCode.Membership.MenuModel.Permission">
            <summary>权限子项。逗号分隔，每个权限子项名值竖线分隔</summary>
        </member>
        <member name="P:XCode.Membership.MenuModel.Ex1">
            <summary>扩展1</summary>
        </member>
        <member name="P:XCode.Membership.MenuModel.Ex2">
            <summary>扩展2</summary>
        </member>
        <member name="P:XCode.Membership.MenuModel.Ex3">
            <summary>扩展3</summary>
        </member>
        <member name="P:XCode.Membership.MenuModel.Ex4">
            <summary>扩展4</summary>
        </member>
        <member name="P:XCode.Membership.MenuModel.Ex5">
            <summary>扩展5</summary>
        </member>
        <member name="P:XCode.Membership.MenuModel.Ex6">
            <summary>扩展6</summary>
        </member>
        <member name="P:XCode.Membership.MenuModel.CreateUser">
            <summary>创建者</summary>
        </member>
        <member name="P:XCode.Membership.MenuModel.CreateUserID">
            <summary>创建用户</summary>
        </member>
        <member name="P:XCode.Membership.MenuModel.CreateIP">
            <summary>创建地址</summary>
        </member>
        <member name="P:XCode.Membership.MenuModel.CreateTime">
            <summary>创建时间</summary>
        </member>
        <member name="P:XCode.Membership.MenuModel.UpdateUser">
            <summary>更新者</summary>
        </member>
        <member name="P:XCode.Membership.MenuModel.UpdateUserID">
            <summary>更新用户</summary>
        </member>
        <member name="P:XCode.Membership.MenuModel.UpdateIP">
            <summary>更新地址</summary>
        </member>
        <member name="P:XCode.Membership.MenuModel.UpdateTime">
            <summary>更新时间</summary>
        </member>
        <member name="P:XCode.Membership.MenuModel.Remark">
            <summary>备注</summary>
        </member>
        <member name="P:XCode.Membership.MenuModel.Item(System.String)">
            <summary>获取/设置 字段值</summary>
            <param name="name">字段名</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.MenuModel.Copy(XCode.Membership.IMenu)">
            <summary>拷贝模型对象</summary>
            <param name="model">模型</param>
        </member>
        <member name="T:XCode.Membership.ParameterModel">
            <summary>字典参数。管理用户或系统全局的名值对数据，常用于参数配置场合</summary>
        </member>
        <member name="P:XCode.Membership.ParameterModel.ID">
            <summary>编号</summary>
        </member>
        <member name="P:XCode.Membership.ParameterModel.UserID">
            <summary>用户。按用户区分参数，用户0表示系统级</summary>
        </member>
        <member name="P:XCode.Membership.ParameterModel.Category">
            <summary>类别</summary>
        </member>
        <member name="P:XCode.Membership.ParameterModel.Name">
            <summary>名称</summary>
        </member>
        <member name="P:XCode.Membership.ParameterModel.Value">
            <summary>数值</summary>
        </member>
        <member name="P:XCode.Membership.ParameterModel.LongValue">
            <summary>长数值</summary>
        </member>
        <member name="P:XCode.Membership.ParameterModel.Kind">
            <summary>种类。0普通，21列表，22名值</summary>
        </member>
        <member name="P:XCode.Membership.ParameterModel.Enable">
            <summary>启用</summary>
        </member>
        <member name="P:XCode.Membership.ParameterModel.Ex1">
            <summary>扩展1</summary>
        </member>
        <member name="P:XCode.Membership.ParameterModel.Ex2">
            <summary>扩展2</summary>
        </member>
        <member name="P:XCode.Membership.ParameterModel.Ex3">
            <summary>扩展3</summary>
        </member>
        <member name="P:XCode.Membership.ParameterModel.Ex4">
            <summary>扩展4</summary>
        </member>
        <member name="P:XCode.Membership.ParameterModel.Ex5">
            <summary>扩展5</summary>
        </member>
        <member name="P:XCode.Membership.ParameterModel.Ex6">
            <summary>扩展6</summary>
        </member>
        <member name="P:XCode.Membership.ParameterModel.CreateUser">
            <summary>创建者</summary>
        </member>
        <member name="P:XCode.Membership.ParameterModel.CreateUserID">
            <summary>创建用户</summary>
        </member>
        <member name="P:XCode.Membership.ParameterModel.CreateIP">
            <summary>创建地址</summary>
        </member>
        <member name="P:XCode.Membership.ParameterModel.CreateTime">
            <summary>创建时间</summary>
        </member>
        <member name="P:XCode.Membership.ParameterModel.UpdateUser">
            <summary>更新者</summary>
        </member>
        <member name="P:XCode.Membership.ParameterModel.UpdateUserID">
            <summary>更新用户</summary>
        </member>
        <member name="P:XCode.Membership.ParameterModel.UpdateIP">
            <summary>更新地址</summary>
        </member>
        <member name="P:XCode.Membership.ParameterModel.UpdateTime">
            <summary>更新时间</summary>
        </member>
        <member name="P:XCode.Membership.ParameterModel.Remark">
            <summary>备注</summary>
        </member>
        <member name="P:XCode.Membership.ParameterModel.Item(System.String)">
            <summary>获取/设置 字段值</summary>
            <param name="name">字段名</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.ParameterModel.Copy(XCode.Membership.IParameter)">
            <summary>拷贝模型对象</summary>
            <param name="model">模型</param>
        </member>
        <member name="T:XCode.Membership.RoleModel">
            <summary>角色。业务场景中的岗位，功能权限的集合。不管是用户还是租户，都以角色来管理权限</summary>
        </member>
        <member name="P:XCode.Membership.RoleModel.ID">
            <summary>编号</summary>
        </member>
        <member name="P:XCode.Membership.RoleModel.Name">
            <summary>名称</summary>
        </member>
        <member name="P:XCode.Membership.RoleModel.Enable">
            <summary>启用</summary>
        </member>
        <member name="P:XCode.Membership.RoleModel.IsSystem">
            <summary>系统。用于业务系统开发使用，不受数据权限约束，禁止修改名称或删除</summary>
        </member>
        <member name="P:XCode.Membership.RoleModel.Permission">
            <summary>权限。对不同资源的权限，逗号分隔，每个资源的权限子项竖线分隔</summary>
        </member>
        <member name="P:XCode.Membership.RoleModel.Sort">
            <summary>排序</summary>
        </member>
        <member name="P:XCode.Membership.RoleModel.Ex1">
            <summary>扩展1</summary>
        </member>
        <member name="P:XCode.Membership.RoleModel.Ex2">
            <summary>扩展2</summary>
        </member>
        <member name="P:XCode.Membership.RoleModel.Ex3">
            <summary>扩展3</summary>
        </member>
        <member name="P:XCode.Membership.RoleModel.Ex4">
            <summary>扩展4</summary>
        </member>
        <member name="P:XCode.Membership.RoleModel.Ex5">
            <summary>扩展5</summary>
        </member>
        <member name="P:XCode.Membership.RoleModel.Ex6">
            <summary>扩展6</summary>
        </member>
        <member name="P:XCode.Membership.RoleModel.CreateUser">
            <summary>创建者</summary>
        </member>
        <member name="P:XCode.Membership.RoleModel.CreateUserID">
            <summary>创建用户</summary>
        </member>
        <member name="P:XCode.Membership.RoleModel.CreateIP">
            <summary>创建地址</summary>
        </member>
        <member name="P:XCode.Membership.RoleModel.CreateTime">
            <summary>创建时间</summary>
        </member>
        <member name="P:XCode.Membership.RoleModel.UpdateUser">
            <summary>更新者</summary>
        </member>
        <member name="P:XCode.Membership.RoleModel.UpdateUserID">
            <summary>更新用户</summary>
        </member>
        <member name="P:XCode.Membership.RoleModel.UpdateIP">
            <summary>更新地址</summary>
        </member>
        <member name="P:XCode.Membership.RoleModel.UpdateTime">
            <summary>更新时间</summary>
        </member>
        <member name="P:XCode.Membership.RoleModel.Remark">
            <summary>备注</summary>
        </member>
        <member name="P:XCode.Membership.RoleModel.Item(System.String)">
            <summary>获取/设置 字段值</summary>
            <param name="name">字段名</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.RoleModel.Copy(XCode.Membership.IRole)">
            <summary>拷贝模型对象</summary>
            <param name="model">模型</param>
        </member>
        <member name="T:XCode.Membership.TenantModel">
            <summary>租户。多租户SAAS平台，用于隔离业务数据</summary>
        </member>
        <member name="P:XCode.Membership.TenantModel.Id">
            <summary>编号</summary>
        </member>
        <member name="P:XCode.Membership.TenantModel.Code">
            <summary>编码。唯一编码</summary>
        </member>
        <member name="P:XCode.Membership.TenantModel.Name">
            <summary>名称。显示名称</summary>
        </member>
        <member name="P:XCode.Membership.TenantModel.Enable">
            <summary>启用</summary>
        </member>
        <member name="P:XCode.Membership.TenantModel.ManagerId">
            <summary>管理者</summary>
        </member>
        <member name="P:XCode.Membership.TenantModel.RoleIds">
            <summary>角色组。租户可选的角色集合，不同级别的租户所拥有的角色不一样，高级功能也会不同</summary>
        </member>
        <member name="P:XCode.Membership.TenantModel.Logo">
            <summary>图标。附件路径</summary>
        </member>
        <member name="P:XCode.Membership.TenantModel.DatabaseName">
            <summary>数据库。分库用的数据库名</summary>
        </member>
        <member name="P:XCode.Membership.TenantModel.TableName">
            <summary>数据表。分表用的数据表前缀</summary>
        </member>
        <member name="P:XCode.Membership.TenantModel.Expired">
            <summary>过期时间。达到该时间后，自动禁用租户，空表示永不过期</summary>
        </member>
        <member name="P:XCode.Membership.TenantModel.Remark">
            <summary>描述</summary>
        </member>
        <member name="P:XCode.Membership.TenantModel.Item(System.String)">
            <summary>获取/设置 字段值</summary>
            <param name="name">字段名</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.TenantModel.Copy(XCode.Membership.ITenant)">
            <summary>拷贝模型对象</summary>
            <param name="model">模型</param>
        </member>
        <member name="T:XCode.Membership.TenantUserModel">
            <summary>租户关系。用户选择租户进入系统后，以租户关系角色组替代自有角色组来进行鉴权</summary>
        </member>
        <member name="P:XCode.Membership.TenantUserModel.Id">
            <summary>编号</summary>
        </member>
        <member name="P:XCode.Membership.TenantUserModel.TenantId">
            <summary>租户</summary>
        </member>
        <member name="P:XCode.Membership.TenantUserModel.UserId">
            <summary>用户</summary>
        </member>
        <member name="P:XCode.Membership.TenantUserModel.Enable">
            <summary>启用</summary>
        </member>
        <member name="P:XCode.Membership.TenantUserModel.RoleId">
            <summary>角色。用户在该租户所对应的主要角色，替换用户自身的角色组</summary>
        </member>
        <member name="P:XCode.Membership.TenantUserModel.RoleIds">
            <summary>角色组。次要角色集合</summary>
        </member>
        <member name="P:XCode.Membership.TenantUserModel.Remark">
            <summary>描述</summary>
        </member>
        <member name="P:XCode.Membership.TenantUserModel.Item(System.String)">
            <summary>获取/设置 字段值</summary>
            <param name="name">字段名</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.TenantUserModel.Copy(XCode.Membership.ITenantUser)">
            <summary>拷贝模型对象</summary>
            <param name="model">模型</param>
        </member>
        <member name="T:XCode.Membership.UserModel">
            <summary>用户。用户帐号信息，以身份验证为中心，拥有多种角色，可加入多个租户</summary>
        </member>
        <member name="P:XCode.Membership.UserModel.ID">
            <summary>编号</summary>
        </member>
        <member name="P:XCode.Membership.UserModel.Name">
            <summary>名称。登录用户名</summary>
        </member>
        <member name="P:XCode.Membership.UserModel.Password">
            <summary>密码</summary>
        </member>
        <member name="P:XCode.Membership.UserModel.DisplayName">
            <summary>昵称</summary>
        </member>
        <member name="P:XCode.Membership.UserModel.Sex">
            <summary>性别。未知、男、女</summary>
        </member>
        <member name="P:XCode.Membership.UserModel.Mail">
            <summary>邮件。支持登录</summary>
        </member>
        <member name="P:XCode.Membership.UserModel.Mobile">
            <summary>手机。支持登录</summary>
        </member>
        <member name="P:XCode.Membership.UserModel.Code">
            <summary>代码。身份证、员工编码等，支持登录</summary>
        </member>
        <member name="P:XCode.Membership.UserModel.AreaId">
            <summary>地区。省市区</summary>
        </member>
        <member name="P:XCode.Membership.UserModel.Avatar">
            <summary>头像</summary>
        </member>
        <member name="P:XCode.Membership.UserModel.RoleID">
            <summary>角色。主要角色</summary>
        </member>
        <member name="P:XCode.Membership.UserModel.RoleIds">
            <summary>角色组。次要角色集合</summary>
        </member>
        <member name="P:XCode.Membership.UserModel.DepartmentID">
            <summary>部门。组织机构</summary>
        </member>
        <member name="P:XCode.Membership.UserModel.Online">
            <summary>在线</summary>
        </member>
        <member name="P:XCode.Membership.UserModel.Enable">
            <summary>启用</summary>
        </member>
        <member name="P:XCode.Membership.UserModel.Age">
            <summary>年龄。周岁</summary>
        </member>
        <member name="P:XCode.Membership.UserModel.Birthday">
            <summary>生日。公历年月日</summary>
        </member>
        <member name="P:XCode.Membership.UserModel.Logins">
            <summary>登录次数</summary>
        </member>
        <member name="P:XCode.Membership.UserModel.LastLogin">
            <summary>最后登录</summary>
        </member>
        <member name="P:XCode.Membership.UserModel.LastLoginIP">
            <summary>最后登录IP</summary>
        </member>
        <member name="P:XCode.Membership.UserModel.RegisterTime">
            <summary>注册时间</summary>
        </member>
        <member name="P:XCode.Membership.UserModel.RegisterIP">
            <summary>注册IP</summary>
        </member>
        <member name="P:XCode.Membership.UserModel.OnlineTime">
            <summary>在线时间。累计在线总时间，单位秒</summary>
        </member>
        <member name="P:XCode.Membership.UserModel.Ex1">
            <summary>扩展1</summary>
        </member>
        <member name="P:XCode.Membership.UserModel.Ex2">
            <summary>扩展2</summary>
        </member>
        <member name="P:XCode.Membership.UserModel.Ex3">
            <summary>扩展3</summary>
        </member>
        <member name="P:XCode.Membership.UserModel.Ex4">
            <summary>扩展4</summary>
        </member>
        <member name="P:XCode.Membership.UserModel.Ex5">
            <summary>扩展5</summary>
        </member>
        <member name="P:XCode.Membership.UserModel.Ex6">
            <summary>扩展6</summary>
        </member>
        <member name="P:XCode.Membership.UserModel.Remark">
            <summary>备注</summary>
        </member>
        <member name="P:XCode.Membership.UserModel.Item(System.String)">
            <summary>获取/设置 字段值</summary>
            <param name="name">字段名</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.UserModel.Copy(XCode.Membership.IUser)">
            <summary>拷贝模型对象</summary>
            <param name="model">模型</param>
        </member>
        <member name="T:XCode.Membership.ParameterKinds">
            <summary>参数数据类型</summary>
        </member>
        <member name="F:XCode.Membership.ParameterKinds.Normal">
            <summary>普通</summary>
        </member>
        <member name="F:XCode.Membership.ParameterKinds.Boolean">
            <summary>布尔型</summary>
        </member>
        <member name="F:XCode.Membership.ParameterKinds.Int">
            <summary>整数</summary>
        </member>
        <member name="F:XCode.Membership.ParameterKinds.Double">
            <summary>浮点数</summary>
        </member>
        <member name="F:XCode.Membership.ParameterKinds.DateTime">
            <summary>时间日期</summary>
        </member>
        <member name="F:XCode.Membership.ParameterKinds.String">
            <summary>字符串</summary>
        </member>
        <member name="F:XCode.Membership.ParameterKinds.List">
            <summary>列表</summary>
        </member>
        <member name="F:XCode.Membership.ParameterKinds.Hash">
            <summary>哈希</summary>
        </member>
        <member name="T:XCode.Membership.PermissionFlags">
            <summary>操作权限</summary>
        </member>
        <member name="F:XCode.Membership.PermissionFlags.None">
            <summary>无权限</summary>
        </member>
        <member name="F:XCode.Membership.PermissionFlags.Detail">
            <summary>查看权限</summary>
        </member>
        <member name="F:XCode.Membership.PermissionFlags.Insert">
            <summary>添加权限</summary>
        </member>
        <member name="F:XCode.Membership.PermissionFlags.Update">
            <summary>修改权限</summary>
        </member>
        <member name="F:XCode.Membership.PermissionFlags.Delete">
            <summary>删除权限</summary>
        </member>
        <member name="F:XCode.Membership.PermissionFlags.All">
            <summary>所有权限</summary>
        </member>
        <member name="T:XCode.Membership.SexKinds">
            <summary>性别</summary>
        </member>
        <member name="F:XCode.Membership.SexKinds.未知">
            <summary>未知</summary>
        </member>
        <member name="F:XCode.Membership.SexKinds.男">
            <summary>男</summary>
        </member>
        <member name="F:XCode.Membership.SexKinds.女">
            <summary>女</summary>
        </member>
        <member name="T:XCode.Membership.Area">
            <summary>地区。行政区划数据</summary>
            <remarks>
            民政局 http://www.mca.gov.cn/article/sj/xzqh/2020/2020/2020092500801.html
            统计局 http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2019/index.html
            
            民政局 http://www.mca.gov.cn/article/sj/xzqh/2019/2019/201912251506.html
            统计局 http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2018/index.html
            </remarks>
            <summary>地区。行政区划数据，最高支持四级地址，9位数字</summary>
        </member>
        <member name="M:XCode.Membership.Area.Valid(XCode.DataMethod)">
            <summary>验证并修补数据，返回验证结果，或者通过抛出异常的方式提示验证失败。</summary>
            <param name="method">添删改方法</param>
        </member>
        <member name="M:XCode.Membership.Area.InitData">
            <summary>初始化数据</summary>
        </member>
        <member name="P:XCode.Membership.Area.Root">
            <summary>顶级根。它的Childs就是各个省份</summary>
        </member>
        <member name="P:XCode.Membership.Area.Parent">
            <summary>父级</summary>
        </member>
        <member name="P:XCode.Membership.Area.AllParents">
            <summary>所有父级，从高到底</summary>
        </member>
        <member name="P:XCode.Membership.Area.ParentPath">
            <summary>父级路径</summary>
        </member>
        <member name="P:XCode.Membership.Area.Path">
            <summary>路径</summary>
        </member>
        <member name="P:XCode.Membership.Area.Childs">
            <summary>下级地区</summary>
        </member>
        <member name="P:XCode.Membership.Area.AllChilds">
            <summary>子孙级区域。支持省市区，不支持乡镇街道</summary>
        </member>
        <member name="P:XCode.Membership.Area.IsVirtual">
            <summary>是否虚拟地区</summary>
        </member>
        <member name="M:XCode.Membership.Area.FindByID(System.Int32)">
            <summary>根据编号查找</summary>
            <param name="id">编号</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:XCode.Membership.Area.FindByIDs(System.Int32[])">
            <summary>根据ID列表数组查询，一般先后查街道、区县、城市、省份</summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Area.FindByName(System.Int32,System.String)">
            <summary>在指定地区下根据名称查找</summary>
            <param name="parentId">父级</param>
            <param name="name">名称</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:XCode.Membership.Area.FindAllByName(System.String)">
            <summary>根据名称查询三级地区，可能有多个地区同名</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Area.FindByNames(System.String[])">
            <summary>根据名称列表数组查询，依次查省份、城市、区县、街道</summary>
            <param name="names">名称列表</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Area.FindByFullName(System.String)">
            <summary>根据名称从高向低分级查找，广度搜索，仅搜索三级</summary>
            <param name="name">名称</param>
            <returns>实体列表</returns>
        </member>
        <member name="F:XCode.Membership.Area._pcache">
            <summary>根据父级查子级，专属缓存</summary>
        </member>
        <member name="M:XCode.Membership.Area.FindAllByParentID(System.Int32)">
            <summary>根据父级查找。三级地区使用实体缓存，四级地区使用专属缓存</summary>
            <param name="parentid">父级</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:XCode.Membership.Area.FindAllByPinYin(System.String)">
            <summary>根据拼音查找</summary>
            <param name="pinYin">拼音</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:XCode.Membership.Area.FindAllByJianPin(System.String)">
            <summary>根据简拼查找</summary>
            <param name="jianPin">简拼</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:XCode.Membership.Area.FindAllByGeoHash(System.String)">
            <summary>根据地址编码查找</summary>
            <param name="geoHash">地址编码</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:XCode.Membership.Area.Search(System.Int32,System.Int32,System.Int32,System.Int32,System.Nullable{System.Boolean},System.String,System.DateTime,System.DateTime,NewLife.Data.PageParameter)">
            <summary>高级查询</summary>
            <param name="parentid">父级</param>
            <param name="level"></param>
            <param name="idstart"></param>
            <param name="idend"></param>
            <param name="enable"></param>
            <param name="key"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Area.Search(System.Int32,System.String,System.Nullable{System.Boolean},System.Int32)">
            <summary>根据条件模糊搜索</summary>
            <param name="parentid">在指定级别下搜索，-1表示所有，非负数时支持字符串相似搜索</param>
            <param name="key"></param>
            <param name="enable"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Area.MatchAddress(System.String,System.Int32)">
            <summary>搜索地址所属地区（模糊匹配）</summary>
            <param name="address"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Area.SearchIP(System.String,System.Int32)">
            <summary>根据IP地址搜索地区</summary>
            <param name="ip"></param>
            <param name="maxLevel">最大层级，默认3级</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Area.SearchAddress(System.String,System.Int32)">
            <summary>根据地址搜索地区，2字符逐级进行前缀匹配，支持越级</summary>
            <remarks>
            支持越级搜索，例如“上海市华新中学”，越过市辖区和青浦区两级，最终匹配华新镇
            </remarks>
            <param name="address">省市区地址</param>
            <param name="maxLevel">最大层级，默认3级</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Area.FindAddress(XCode.Membership.Area,System.String,System.Int32)">
            <summary>在指定区域下按地址查找地区，前缀匹配</summary>
            <param name="root"></param>
            <param name="address"></param>
            <param name="maxLevel"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Area.Create(System.Int32,System.String,System.Int32,System.String)">
            <summary>查找或创建地区</summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="parentid"></param>
            <param name="remark"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Area.Preload">
            <summary>扫描预热数据</summary>
        </member>
        <member name="M:XCode.Membership.Area.ScanFixLevel">
            <summary>扫描并修正级别为0的数据</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Area.Parse(System.String)">
            <summary>从内容中分析得到地区。以民政部颁布的行政区划代码为准</summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Area.ParseLevel4(System.String)">
            <summary>分析得到四级地区</summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Area.ParseAndSave(System.String)">
            <summary>从内容中分析得到地区并保存。以民政部颁布的行政区划代码为准</summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Area.FetchAndSave(System.String)">
            <summary>抓取并保存数据</summary>
            <param name="url">民政局行政区划统计数据</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Area.MergeLevel3(System.Collections.Generic.IList{XCode.Membership.Area},System.Boolean,System.Boolean)">
            <summary>合并三级地区的数据</summary>
            <param name="list">外部数据源</param>
            <param name="addLose">是否添加缺失数据</param>
            <param name="enable">新增节点是否启用</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Area.MergeLevel4(System.Collections.Generic.IList{XCode.Membership.Area},System.Boolean,System.Boolean)">
            <summary>合并四级地区的数据</summary>
            <param name="list">外部数据源</param>
            <param name="addLose">是否添加缺失数据</param>
            <param name="enable">新增节点是否启用</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Area.Import(System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>从Csv文件导入并合并数据</summary>
            <param name="csvFile">Csv文件</param>
            <param name="addLose">是否添加缺失数据</param>
            <param name="level">需要导入的最高等级</param>
            <param name="enable">新增节点是否启用</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Area.Export(System.String,System.Int32)">
            <summary>导出数据到Csv文件</summary>
            <param name="csvFile"></param>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Area.GetBig">
            <summary>所属大区</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Area.FixLevel">
            <summary>修正等级</summary>
        </member>
        <member name="M:XCode.Membership.Area.FixName">
            <summary>修正名称</summary>
        </member>
        <member name="P:XCode.Membership.Area.ID">
            <summary>编码。行政区划编码</summary>
        </member>
        <member name="P:XCode.Membership.Area.Name">
            <summary>名称</summary>
        </member>
        <member name="P:XCode.Membership.Area.FullName">
            <summary>全名</summary>
        </member>
        <member name="P:XCode.Membership.Area.ParentID">
            <summary>父级</summary>
        </member>
        <member name="P:XCode.Membership.Area.Level">
            <summary>层级</summary>
        </member>
        <member name="P:XCode.Membership.Area.Kind">
            <summary>类型。省市县，自治州等</summary>
        </member>
        <member name="P:XCode.Membership.Area.English">
            <summary>英文名</summary>
        </member>
        <member name="P:XCode.Membership.Area.PinYin">
            <summary>拼音</summary>
        </member>
        <member name="P:XCode.Membership.Area.JianPin">
            <summary>简拼</summary>
        </member>
        <member name="P:XCode.Membership.Area.TelCode">
            <summary>区号。电话区号</summary>
        </member>
        <member name="P:XCode.Membership.Area.ZipCode">
            <summary>邮编。邮政编码</summary>
        </member>
        <member name="P:XCode.Membership.Area.Longitude">
            <summary>经度</summary>
        </member>
        <member name="P:XCode.Membership.Area.Latitude">
            <summary>纬度</summary>
        </member>
        <member name="P:XCode.Membership.Area.GeoHash">
            <summary>地址编码。字符串前缀相同越多，地理距离越近，8位精度19米，6位610米</summary>
        </member>
        <member name="P:XCode.Membership.Area.Enable">
            <summary>启用</summary>
        </member>
        <member name="P:XCode.Membership.Area.CreateTime">
            <summary>创建时间</summary>
        </member>
        <member name="P:XCode.Membership.Area.UpdateTime">
            <summary>更新时间</summary>
        </member>
        <member name="P:XCode.Membership.Area.Remark">
            <summary>备注</summary>
        </member>
        <member name="M:XCode.Membership.Area.Copy(XCode.Membership.AreaModel)">
            <summary>拷贝模型对象</summary>
            <param name="model">模型</param>
        </member>
        <member name="P:XCode.Membership.Area.Item(System.String)">
            <summary>获取/设置 字段值</summary>
            <param name="name">字段名</param>
            <returns></returns>
        </member>
        <member name="T:XCode.Membership.Area._">
            <summary>取得地区字段信息的快捷方式</summary>
        </member>
        <member name="F:XCode.Membership.Area._.ID">
            <summary>编码。行政区划编码</summary>
        </member>
        <member name="F:XCode.Membership.Area._.Name">
            <summary>名称</summary>
        </member>
        <member name="F:XCode.Membership.Area._.FullName">
            <summary>全名</summary>
        </member>
        <member name="F:XCode.Membership.Area._.ParentID">
            <summary>父级</summary>
        </member>
        <member name="F:XCode.Membership.Area._.Level">
            <summary>层级</summary>
        </member>
        <member name="F:XCode.Membership.Area._.Kind">
            <summary>类型。省市县，自治州等</summary>
        </member>
        <member name="F:XCode.Membership.Area._.English">
            <summary>英文名</summary>
        </member>
        <member name="F:XCode.Membership.Area._.PinYin">
            <summary>拼音</summary>
        </member>
        <member name="F:XCode.Membership.Area._.JianPin">
            <summary>简拼</summary>
        </member>
        <member name="F:XCode.Membership.Area._.TelCode">
            <summary>区号。电话区号</summary>
        </member>
        <member name="F:XCode.Membership.Area._.ZipCode">
            <summary>邮编。邮政编码</summary>
        </member>
        <member name="F:XCode.Membership.Area._.Longitude">
            <summary>经度</summary>
        </member>
        <member name="F:XCode.Membership.Area._.Latitude">
            <summary>纬度</summary>
        </member>
        <member name="F:XCode.Membership.Area._.GeoHash">
            <summary>地址编码。字符串前缀相同越多，地理距离越近，8位精度19米，6位610米</summary>
        </member>
        <member name="F:XCode.Membership.Area._.Enable">
            <summary>启用</summary>
        </member>
        <member name="F:XCode.Membership.Area._.CreateTime">
            <summary>创建时间</summary>
        </member>
        <member name="F:XCode.Membership.Area._.UpdateTime">
            <summary>更新时间</summary>
        </member>
        <member name="F:XCode.Membership.Area._.Remark">
            <summary>备注</summary>
        </member>
        <member name="T:XCode.Membership.Area.__">
            <summary>取得地区字段名称的快捷方式</summary>
        </member>
        <member name="F:XCode.Membership.Area.__.ID">
            <summary>编码。行政区划编码</summary>
        </member>
        <member name="F:XCode.Membership.Area.__.Name">
            <summary>名称</summary>
        </member>
        <member name="F:XCode.Membership.Area.__.FullName">
            <summary>全名</summary>
        </member>
        <member name="F:XCode.Membership.Area.__.ParentID">
            <summary>父级</summary>
        </member>
        <member name="F:XCode.Membership.Area.__.Level">
            <summary>层级</summary>
        </member>
        <member name="F:XCode.Membership.Area.__.Kind">
            <summary>类型。省市县，自治州等</summary>
        </member>
        <member name="F:XCode.Membership.Area.__.English">
            <summary>英文名</summary>
        </member>
        <member name="F:XCode.Membership.Area.__.PinYin">
            <summary>拼音</summary>
        </member>
        <member name="F:XCode.Membership.Area.__.JianPin">
            <summary>简拼</summary>
        </member>
        <member name="F:XCode.Membership.Area.__.TelCode">
            <summary>区号。电话区号</summary>
        </member>
        <member name="F:XCode.Membership.Area.__.ZipCode">
            <summary>邮编。邮政编码</summary>
        </member>
        <member name="F:XCode.Membership.Area.__.Longitude">
            <summary>经度</summary>
        </member>
        <member name="F:XCode.Membership.Area.__.Latitude">
            <summary>纬度</summary>
        </member>
        <member name="F:XCode.Membership.Area.__.GeoHash">
            <summary>地址编码。字符串前缀相同越多，地理距离越近，8位精度19米，6位610米</summary>
        </member>
        <member name="F:XCode.Membership.Area.__.Enable">
            <summary>启用</summary>
        </member>
        <member name="F:XCode.Membership.Area.__.CreateTime">
            <summary>创建时间</summary>
        </member>
        <member name="F:XCode.Membership.Area.__.UpdateTime">
            <summary>更新时间</summary>
        </member>
        <member name="F:XCode.Membership.Area.__.Remark">
            <summary>备注</summary>
        </member>
        <member name="T:XCode.Membership.Parameter">
            <summary>字典参数</summary>
            <summary>字典参数。管理用户或系统全局的名值对数据，常用于参数配置场合</summary>
        </member>
        <member name="M:XCode.Membership.Parameter.FindByID(System.Int32)">
            <summary>根据编号查找</summary>
            <param name="id">编号</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:XCode.Membership.Parameter.FindAllByUserID(System.Int32)">
            <summary>根据用户查找</summary>
            <param name="userId">用户</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:XCode.Membership.Parameter.FindAllByUserID(System.Int32,System.String)">
            <summary>根据用户查找</summary>
            <param name="userId">用户</param>
            <param name="category">分类</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:XCode.Membership.Parameter.FindAllByCategoryAndName(System.String,System.String)">
            <summary>根据类别、名称查找</summary>
            <param name="category">类别</param>
            <param name="name">名称</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:XCode.Membership.Parameter.FindByUserIDAndCategoryAndName(System.Int32,System.String,System.String)">
            <summary>根据用户、类别、名称查找</summary>
            <param name="userId">用户</param>
            <param name="category">类别</param>
            <param name="name">名称</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:XCode.Membership.Parameter.Search(System.Int32,System.String,System.Nullable{System.Boolean},System.String,NewLife.Data.PageParameter)">
            <summary>高级搜索</summary>
            <param name="userId"></param>
            <param name="category"></param>
            <param name="enable"></param>
            <param name="key"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Parameter.GetOrAdd(System.Int32,System.String,System.String,System.String)">
            <summary>获取 或 添加 参数，支持指定默认值</summary>
            <param name="userId"></param>
            <param name="category"></param>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Parameter.GetValue">
            <summary>根据种类返回数据</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Parameter.SetValue(System.Object)">
            <summary>设置数据，自动识别种类</summary>
            <param name="value"></param>
        </member>
        <member name="M:XCode.Membership.Parameter.GetList``1">
            <summary>获取列表</summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Parameter.GetHash``2">
            <summary>获取名值对</summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Parameter.SetList(System.Collections.IList)">
            <summary>设置列表</summary>
            <param name="list"></param>
        </member>
        <member name="M:XCode.Membership.Parameter.SetHash(System.Collections.IDictionary)">
            <summary>设置名值对</summary>
            <param name="dic"></param>
        </member>
        <member name="P:XCode.Membership.Parameter.ID">
            <summary>编号</summary>
        </member>
        <member name="P:XCode.Membership.Parameter.UserID">
            <summary>用户。按用户区分参数，用户0表示系统级</summary>
        </member>
        <member name="P:XCode.Membership.Parameter.Category">
            <summary>类别</summary>
        </member>
        <member name="P:XCode.Membership.Parameter.Name">
            <summary>名称</summary>
        </member>
        <member name="P:XCode.Membership.Parameter.Value">
            <summary>数值</summary>
        </member>
        <member name="P:XCode.Membership.Parameter.LongValue">
            <summary>长数值</summary>
        </member>
        <member name="P:XCode.Membership.Parameter.Kind">
            <summary>种类。0普通，21列表，22名值</summary>
        </member>
        <member name="P:XCode.Membership.Parameter.Enable">
            <summary>启用</summary>
        </member>
        <member name="P:XCode.Membership.Parameter.Ex1">
            <summary>扩展1</summary>
        </member>
        <member name="P:XCode.Membership.Parameter.Ex2">
            <summary>扩展2</summary>
        </member>
        <member name="P:XCode.Membership.Parameter.Ex3">
            <summary>扩展3</summary>
        </member>
        <member name="P:XCode.Membership.Parameter.Ex4">
            <summary>扩展4</summary>
        </member>
        <member name="P:XCode.Membership.Parameter.Ex5">
            <summary>扩展5</summary>
        </member>
        <member name="P:XCode.Membership.Parameter.Ex6">
            <summary>扩展6</summary>
        </member>
        <member name="P:XCode.Membership.Parameter.CreateUser">
            <summary>创建者</summary>
        </member>
        <member name="P:XCode.Membership.Parameter.CreateUserID">
            <summary>创建用户</summary>
        </member>
        <member name="P:XCode.Membership.Parameter.CreateIP">
            <summary>创建地址</summary>
        </member>
        <member name="P:XCode.Membership.Parameter.CreateTime">
            <summary>创建时间</summary>
        </member>
        <member name="P:XCode.Membership.Parameter.UpdateUser">
            <summary>更新者</summary>
        </member>
        <member name="P:XCode.Membership.Parameter.UpdateUserID">
            <summary>更新用户</summary>
        </member>
        <member name="P:XCode.Membership.Parameter.UpdateIP">
            <summary>更新地址</summary>
        </member>
        <member name="P:XCode.Membership.Parameter.UpdateTime">
            <summary>更新时间</summary>
        </member>
        <member name="P:XCode.Membership.Parameter.Remark">
            <summary>备注</summary>
        </member>
        <member name="M:XCode.Membership.Parameter.Copy(XCode.Membership.ParameterModel)">
            <summary>拷贝模型对象</summary>
            <param name="model">模型</param>
        </member>
        <member name="P:XCode.Membership.Parameter.Item(System.String)">
            <summary>获取/设置 字段值</summary>
            <param name="name">字段名</param>
            <returns></returns>
        </member>
        <member name="P:XCode.Membership.Parameter.User">
            <summary>用户</summary>
        </member>
        <member name="P:XCode.Membership.Parameter.UserName">
            <summary>用户</summary>
        </member>
        <member name="T:XCode.Membership.Parameter._">
            <summary>取得字典参数字段信息的快捷方式</summary>
        </member>
        <member name="F:XCode.Membership.Parameter._.ID">
            <summary>编号</summary>
        </member>
        <member name="F:XCode.Membership.Parameter._.UserID">
            <summary>用户。按用户区分参数，用户0表示系统级</summary>
        </member>
        <member name="F:XCode.Membership.Parameter._.Category">
            <summary>类别</summary>
        </member>
        <member name="F:XCode.Membership.Parameter._.Name">
            <summary>名称</summary>
        </member>
        <member name="F:XCode.Membership.Parameter._.Value">
            <summary>数值</summary>
        </member>
        <member name="F:XCode.Membership.Parameter._.LongValue">
            <summary>长数值</summary>
        </member>
        <member name="F:XCode.Membership.Parameter._.Kind">
            <summary>种类。0普通，21列表，22名值</summary>
        </member>
        <member name="F:XCode.Membership.Parameter._.Enable">
            <summary>启用</summary>
        </member>
        <member name="F:XCode.Membership.Parameter._.Ex1">
            <summary>扩展1</summary>
        </member>
        <member name="F:XCode.Membership.Parameter._.Ex2">
            <summary>扩展2</summary>
        </member>
        <member name="F:XCode.Membership.Parameter._.Ex3">
            <summary>扩展3</summary>
        </member>
        <member name="F:XCode.Membership.Parameter._.Ex4">
            <summary>扩展4</summary>
        </member>
        <member name="F:XCode.Membership.Parameter._.Ex5">
            <summary>扩展5</summary>
        </member>
        <member name="F:XCode.Membership.Parameter._.Ex6">
            <summary>扩展6</summary>
        </member>
        <member name="F:XCode.Membership.Parameter._.CreateUser">
            <summary>创建者</summary>
        </member>
        <member name="F:XCode.Membership.Parameter._.CreateUserID">
            <summary>创建用户</summary>
        </member>
        <member name="F:XCode.Membership.Parameter._.CreateIP">
            <summary>创建地址</summary>
        </member>
        <member name="F:XCode.Membership.Parameter._.CreateTime">
            <summary>创建时间</summary>
        </member>
        <member name="F:XCode.Membership.Parameter._.UpdateUser">
            <summary>更新者</summary>
        </member>
        <member name="F:XCode.Membership.Parameter._.UpdateUserID">
            <summary>更新用户</summary>
        </member>
        <member name="F:XCode.Membership.Parameter._.UpdateIP">
            <summary>更新地址</summary>
        </member>
        <member name="F:XCode.Membership.Parameter._.UpdateTime">
            <summary>更新时间</summary>
        </member>
        <member name="F:XCode.Membership.Parameter._.Remark">
            <summary>备注</summary>
        </member>
        <member name="T:XCode.Membership.Parameter.__">
            <summary>取得字典参数字段名称的快捷方式</summary>
        </member>
        <member name="F:XCode.Membership.Parameter.__.ID">
            <summary>编号</summary>
        </member>
        <member name="F:XCode.Membership.Parameter.__.UserID">
            <summary>用户。按用户区分参数，用户0表示系统级</summary>
        </member>
        <member name="F:XCode.Membership.Parameter.__.Category">
            <summary>类别</summary>
        </member>
        <member name="F:XCode.Membership.Parameter.__.Name">
            <summary>名称</summary>
        </member>
        <member name="F:XCode.Membership.Parameter.__.Value">
            <summary>数值</summary>
        </member>
        <member name="F:XCode.Membership.Parameter.__.LongValue">
            <summary>长数值</summary>
        </member>
        <member name="F:XCode.Membership.Parameter.__.Kind">
            <summary>种类。0普通，21列表，22名值</summary>
        </member>
        <member name="F:XCode.Membership.Parameter.__.Enable">
            <summary>启用</summary>
        </member>
        <member name="F:XCode.Membership.Parameter.__.Ex1">
            <summary>扩展1</summary>
        </member>
        <member name="F:XCode.Membership.Parameter.__.Ex2">
            <summary>扩展2</summary>
        </member>
        <member name="F:XCode.Membership.Parameter.__.Ex3">
            <summary>扩展3</summary>
        </member>
        <member name="F:XCode.Membership.Parameter.__.Ex4">
            <summary>扩展4</summary>
        </member>
        <member name="F:XCode.Membership.Parameter.__.Ex5">
            <summary>扩展5</summary>
        </member>
        <member name="F:XCode.Membership.Parameter.__.Ex6">
            <summary>扩展6</summary>
        </member>
        <member name="F:XCode.Membership.Parameter.__.CreateUser">
            <summary>创建者</summary>
        </member>
        <member name="F:XCode.Membership.Parameter.__.CreateUserID">
            <summary>创建用户</summary>
        </member>
        <member name="F:XCode.Membership.Parameter.__.CreateIP">
            <summary>创建地址</summary>
        </member>
        <member name="F:XCode.Membership.Parameter.__.CreateTime">
            <summary>创建时间</summary>
        </member>
        <member name="F:XCode.Membership.Parameter.__.UpdateUser">
            <summary>更新者</summary>
        </member>
        <member name="F:XCode.Membership.Parameter.__.UpdateUserID">
            <summary>更新用户</summary>
        </member>
        <member name="F:XCode.Membership.Parameter.__.UpdateIP">
            <summary>更新地址</summary>
        </member>
        <member name="F:XCode.Membership.Parameter.__.UpdateTime">
            <summary>更新时间</summary>
        </member>
        <member name="F:XCode.Membership.Parameter.__.Remark">
            <summary>备注</summary>
        </member>
        <member name="T:XCode.Membership.Log">
            <summary>日志</summary>
            <summary>日志。应用系统审计日志，记录用户的各种操作，禁止修改和删除</summary>
        </member>
        <member name="M:XCode.Membership.Log.Valid(XCode.DataMethod)">
            <summary>验证并修补数据，返回验证结果，或者通过抛出异常的方式提示验证失败。</summary>
            <param name="method">添删改方法</param>
        </member>
        <member name="M:XCode.Membership.Log.OnUpdate">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Log.OnDelete">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Log.Search(System.String,System.Int32,System.String,System.DateTime,System.DateTime,NewLife.Data.PageParameter)">
            <summary>查询</summary>
            <param name="key"></param>
            <param name="userid"></param>
            <param name="category"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Log.Search(System.String,System.String,System.Nullable{System.Boolean},System.Int32,System.DateTime,System.DateTime,System.String,NewLife.Data.PageParameter)">
            <summary>查询</summary>
            <param name="category"></param>
            <param name="action"></param>
            <param name="success"></param>
            <param name="userid"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="key"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Log.Search(System.String,System.String,System.Int64,System.Nullable{System.Boolean},System.Int32,System.DateTime,System.DateTime,System.String,NewLife.Data.PageParameter)">
            <summary>查询</summary>
            <param name="category"></param>
            <param name="action"></param>
            <param name="linkId"></param>
            <param name="success"></param>
            <param name="userid"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="key"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Log.FindByID(System.Int64)">
            <summary>根据编号查找</summary>
            <param name="id">编号</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:XCode.Membership.Log.FindAllByCreateUserIDAndID(System.Int32,System.Int64)">
            <summary>根据创建用户、编号查找</summary>
            <param name="createUserId">创建用户</param>
            <param name="id">编号</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:XCode.Membership.Log.FindAllByActionAndCategory(System.String,System.String)">
            <summary>根据操作、类别查找</summary>
            <param name="action">操作</param>
            <param name="category">类别</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:XCode.Membership.Log.FindAllByCategoryAndLinkID(System.String,System.Int64)">
            <summary>根据类别、链接查找</summary>
            <param name="category">类别</param>
            <param name="linkId">链接</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:XCode.Membership.Log.FindAllByCreateUserID(System.Int32)">
            <summary>根据创建用户查找</summary>
            <param name="createUserId">创建用户</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:XCode.Membership.Log.FindAllCategoryName">
            <summary>获取所有类别名称，最近30天</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Log.FindAllActionName">
            <summary>获取所有操作名称，最近30天</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Log.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="P:XCode.Membership.Log.ID">
            <summary>编号</summary>
        </member>
        <member name="P:XCode.Membership.Log.Category">
            <summary>类别</summary>
        </member>
        <member name="P:XCode.Membership.Log.Action">
            <summary>操作</summary>
        </member>
        <member name="P:XCode.Membership.Log.LinkID">
            <summary>链接</summary>
        </member>
        <member name="P:XCode.Membership.Log.Success">
            <summary>成功</summary>
        </member>
        <member name="P:XCode.Membership.Log.UserName">
            <summary>用户名</summary>
        </member>
        <member name="P:XCode.Membership.Log.Ex1">
            <summary>扩展1</summary>
        </member>
        <member name="P:XCode.Membership.Log.Ex2">
            <summary>扩展2</summary>
        </member>
        <member name="P:XCode.Membership.Log.Ex3">
            <summary>扩展3</summary>
        </member>
        <member name="P:XCode.Membership.Log.Ex4">
            <summary>扩展4</summary>
        </member>
        <member name="P:XCode.Membership.Log.Ex5">
            <summary>扩展5</summary>
        </member>
        <member name="P:XCode.Membership.Log.Ex6">
            <summary>扩展6</summary>
        </member>
        <member name="P:XCode.Membership.Log.TraceId">
            <summary>性能追踪。用于APM性能追踪定位，还原该事件的调用链</summary>
        </member>
        <member name="P:XCode.Membership.Log.CreateUser">
            <summary>创建者</summary>
        </member>
        <member name="P:XCode.Membership.Log.CreateUserID">
            <summary>创建用户</summary>
        </member>
        <member name="P:XCode.Membership.Log.CreateIP">
            <summary>创建地址</summary>
        </member>
        <member name="P:XCode.Membership.Log.CreateTime">
            <summary>时间</summary>
        </member>
        <member name="P:XCode.Membership.Log.Remark">
            <summary>详细信息</summary>
        </member>
        <member name="M:XCode.Membership.Log.Copy(XCode.Membership.LogModel)">
            <summary>拷贝模型对象</summary>
            <param name="model">模型</param>
        </member>
        <member name="P:XCode.Membership.Log.Item(System.String)">
            <summary>获取/设置 字段值</summary>
            <param name="name">字段名</param>
            <returns></returns>
        </member>
        <member name="P:XCode.Membership.Log.MyCreateUser">
            <summary>创建用户</summary>
        </member>
        <member name="P:XCode.Membership.Log.CreateUserName">
            <summary>创建用户</summary>
        </member>
        <member name="T:XCode.Membership.Log._">
            <summary>取得日志字段信息的快捷方式</summary>
        </member>
        <member name="F:XCode.Membership.Log._.ID">
            <summary>编号</summary>
        </member>
        <member name="F:XCode.Membership.Log._.Category">
            <summary>类别</summary>
        </member>
        <member name="F:XCode.Membership.Log._.Action">
            <summary>操作</summary>
        </member>
        <member name="F:XCode.Membership.Log._.LinkID">
            <summary>链接</summary>
        </member>
        <member name="F:XCode.Membership.Log._.Success">
            <summary>成功</summary>
        </member>
        <member name="F:XCode.Membership.Log._.UserName">
            <summary>用户名</summary>
        </member>
        <member name="F:XCode.Membership.Log._.Ex1">
            <summary>扩展1</summary>
        </member>
        <member name="F:XCode.Membership.Log._.Ex2">
            <summary>扩展2</summary>
        </member>
        <member name="F:XCode.Membership.Log._.Ex3">
            <summary>扩展3</summary>
        </member>
        <member name="F:XCode.Membership.Log._.Ex4">
            <summary>扩展4</summary>
        </member>
        <member name="F:XCode.Membership.Log._.Ex5">
            <summary>扩展5</summary>
        </member>
        <member name="F:XCode.Membership.Log._.Ex6">
            <summary>扩展6</summary>
        </member>
        <member name="F:XCode.Membership.Log._.TraceId">
            <summary>性能追踪。用于APM性能追踪定位，还原该事件的调用链</summary>
        </member>
        <member name="F:XCode.Membership.Log._.CreateUser">
            <summary>创建者</summary>
        </member>
        <member name="F:XCode.Membership.Log._.CreateUserID">
            <summary>创建用户</summary>
        </member>
        <member name="F:XCode.Membership.Log._.CreateIP">
            <summary>创建地址</summary>
        </member>
        <member name="F:XCode.Membership.Log._.CreateTime">
            <summary>时间</summary>
        </member>
        <member name="F:XCode.Membership.Log._.Remark">
            <summary>详细信息</summary>
        </member>
        <member name="T:XCode.Membership.Log.__">
            <summary>取得日志字段名称的快捷方式</summary>
        </member>
        <member name="F:XCode.Membership.Log.__.ID">
            <summary>编号</summary>
        </member>
        <member name="F:XCode.Membership.Log.__.Category">
            <summary>类别</summary>
        </member>
        <member name="F:XCode.Membership.Log.__.Action">
            <summary>操作</summary>
        </member>
        <member name="F:XCode.Membership.Log.__.LinkID">
            <summary>链接</summary>
        </member>
        <member name="F:XCode.Membership.Log.__.Success">
            <summary>成功</summary>
        </member>
        <member name="F:XCode.Membership.Log.__.UserName">
            <summary>用户名</summary>
        </member>
        <member name="F:XCode.Membership.Log.__.Ex1">
            <summary>扩展1</summary>
        </member>
        <member name="F:XCode.Membership.Log.__.Ex2">
            <summary>扩展2</summary>
        </member>
        <member name="F:XCode.Membership.Log.__.Ex3">
            <summary>扩展3</summary>
        </member>
        <member name="F:XCode.Membership.Log.__.Ex4">
            <summary>扩展4</summary>
        </member>
        <member name="F:XCode.Membership.Log.__.Ex5">
            <summary>扩展5</summary>
        </member>
        <member name="F:XCode.Membership.Log.__.Ex6">
            <summary>扩展6</summary>
        </member>
        <member name="F:XCode.Membership.Log.__.TraceId">
            <summary>性能追踪。用于APM性能追踪定位，还原该事件的调用链</summary>
        </member>
        <member name="F:XCode.Membership.Log.__.CreateUser">
            <summary>创建者</summary>
        </member>
        <member name="F:XCode.Membership.Log.__.CreateUserID">
            <summary>创建用户</summary>
        </member>
        <member name="F:XCode.Membership.Log.__.CreateIP">
            <summary>创建地址</summary>
        </member>
        <member name="F:XCode.Membership.Log.__.CreateTime">
            <summary>时间</summary>
        </member>
        <member name="F:XCode.Membership.Log.__.Remark">
            <summary>详细信息</summary>
        </member>
        <member name="T:XCode.Membership.User">
            <summary>管理员</summary>
            <remarks>
            基础实体类应该是只有一个泛型参数的，需要用到别的类型时，可以继承一个，也可以通过虚拟重载等手段让基类实现
            </remarks>
            <summary>用户。用户帐号信息，以身份验证为中心，拥有多种角色，可加入多个租户</summary>
        </member>
        <member name="M:XCode.Membership.User.InitData">
            <summary>首次连接数据库时初始化数据，仅用于实体类重载，用户不应该调用该方法</summary>
        </member>
        <member name="M:XCode.Membership.User.Valid(XCode.DataMethod)">
            <summary>验证并修补数据，返回验证结果，或者通过抛出异常的方式提示验证失败。</summary>
            <param name="method">添删改方法</param>
        </member>
        <member name="M:XCode.Membership.User.OnDelete">
            <summary>删除用户</summary>
            <returns></returns>
        </member>
        <member name="P:XCode.Membership.User.LastLoginAddress">
            <summary>物理地址</summary>
        </member>
        <member name="P:XCode.Membership.User.AreaName">
            <summary>
            地区名
            </summary>
        </member>
        <member name="M:XCode.Membership.User.FindByID(System.Int32)">
            <summary>根据编号查找</summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.User.FindByName(System.String)">
            <summary>根据名称查找</summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.User.FindByMail(System.String)">
            <summary>根据邮箱地址查找</summary>
            <param name="mail"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.User.FindByMobile(System.String)">
            <summary>根据手机号码查找</summary>
            <param name="mobile"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.User.FindByCode(System.String)">
            <summary>根据唯一代码查找</summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.User.FindForLogin(System.String)">
            <summary>为登录而查找账号，搜索名称、邮箱、手机、代码</summary>
            <param name="account"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.User.FindAllByMail(System.String)">
            <summary>根据邮件查找</summary>
            <param name="mail">邮件</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:XCode.Membership.User.FindAllByMobile(System.String)">
            <summary>根据手机查找</summary>
            <param name="mobile">手机</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:XCode.Membership.User.FindAllByCode(System.String)">
            <summary>根据代码查找</summary>
            <param name="code">代码</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:XCode.Membership.User.FindAllByRoleID(System.Int32)">
            <summary>根据角色查找</summary>
            <param name="roleId">角色</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:XCode.Membership.User.Search(System.String,System.Int32,System.Nullable{System.Boolean},NewLife.Data.PageParameter)">
            <summary>高级查询</summary>
            <param name="key"></param>
            <param name="roleId"></param>
            <param name="isEnable"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.User.Search(System.String,System.Int32,System.Nullable{System.Boolean},System.DateTime,System.DateTime,NewLife.Data.PageParameter)">
            <summary>高级查询</summary>
            <param name="key"></param>
            <param name="roleId"></param>
            <param name="isEnable"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.User.Search(System.Int32,System.Int32,System.Nullable{System.Boolean},System.DateTime,System.DateTime,System.String,NewLife.Data.PageParameter)">
            <summary>高级搜索</summary>
            <param name="roleId">角色</param>
            <param name="departmentId">部门</param>
            <param name="enable">启用</param>
            <param name="start">登录时间开始</param>
            <param name="end">登录时间结束</param>
            <param name="key">关键字，搜索代码、名称、昵称、手机、邮箱</param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.User.Search(System.Int32[],System.Int32[],System.Nullable{System.Boolean},System.DateTime,System.DateTime,System.String,NewLife.Data.PageParameter)">
            <summary>高级搜索</summary>
            <param name="roleIds">角色</param>
            <param name="departmentIds">部门</param>
            <param name="enable">启用</param>
            <param name="start">登录时间开始</param>
            <param name="end">登录时间结束</param>
            <param name="key">关键字，搜索代码、名称、昵称、手机、邮箱</param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.User.Search(System.Int32[],System.Int32[],System.Int32[],System.Nullable{System.Boolean},System.DateTime,System.DateTime,System.String,NewLife.Data.PageParameter)">
            <summary>高级搜索</summary>
            <param name="roleIds">角色</param>
            <param name="departmentIds">部门</param>
            <param name="areaIds">地区</param>
            <param name="enable">启用</param>
            <param name="start">登录时间开始</param>
            <param name="end">登录时间结束</param>
            <param name="key">关键字，搜索代码、名称、昵称、手机、邮箱</param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.User.Add(System.String,System.String,System.Int32,System.String)">
            <summary>添加用户，如果存在则直接返回</summary>
            <param name="name"></param>
            <param name="pass"></param>
            <param name="roleid"></param>
            <param name="display"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.User.ToString">
            <summary>已重载。显示友好名字</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.User.FixArea(System.String)">
            <summary>
            修正地区
            </summary>
        </member>
        <member name="M:XCode.Membership.User.Login(System.String,System.Action{XCode.Membership.User})">
            <summary>登录。借助回调来验证密码</summary>
            <param name="username"></param>
            <param name="onValid"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.User.Login(System.String,System.String,System.Boolean)">
            <summary>登录</summary>
            <param name="username"></param>
            <param name="password"></param>
            <param name="rememberme">是否记住密码</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.User.SaveLoginInfo">
            <summary>保存登录信息</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.User.Logout">
            <summary>注销</summary>
        </member>
        <member name="M:XCode.Membership.User.Register">
            <summary>注册用户。第一注册用户自动抢管理员</summary>
        </member>
        <member name="M:XCode.Membership.User.DisableAdmin">
            <summary>禁用默认管理员</summary>
            <returns></returns>
        </member>
        <member name="P:XCode.Membership.User.XCode#Membership#IUser#Role">
            <summary>角色</summary>
            <remarks>扩展属性不缓存空对象，一般来说，每个管理员都有对应的角色，如果没有，可能是在初始化</remarks>
        </member>
        <member name="P:XCode.Membership.User.Roles">
            <summary>角色集合</summary>
        </member>
        <member name="M:XCode.Membership.User.GetRoleIDs">
            <summary>获取角色列表。主角色在前，其它角色升序在后</summary>
            <returns></returns>
        </member>
        <member name="P:XCode.Membership.User.RoleNames">
            <summary>角色组名</summary>
        </member>
        <member name="M:XCode.Membership.User.Has(XCode.Membership.IMenu,XCode.Membership.PermissionFlags[])">
            <summary>用户是否拥有当前菜单的指定权限</summary>
            <param name="menu">指定菜单</param>
            <param name="flags">是否拥有多个权限中的任意一个，或的关系。如果需要表示与的关系，可以传入一个多权限位合并</param>
            <returns></returns>
        </member>
        <member name="P:XCode.Membership.User.NewLife#Model#IManageUser#NickName">
            <summary>昵称</summary>
        </member>
        <member name="P:XCode.Membership.User.ID">
            <summary>编号</summary>
        </member>
        <member name="P:XCode.Membership.User.Name">
            <summary>名称。登录用户名</summary>
        </member>
        <member name="P:XCode.Membership.User.Password">
            <summary>密码</summary>
        </member>
        <member name="P:XCode.Membership.User.DisplayName">
            <summary>昵称</summary>
        </member>
        <member name="P:XCode.Membership.User.Sex">
            <summary>性别。未知、男、女</summary>
        </member>
        <member name="P:XCode.Membership.User.Mail">
            <summary>邮件。支持登录</summary>
        </member>
        <member name="P:XCode.Membership.User.Mobile">
            <summary>手机。支持登录</summary>
        </member>
        <member name="P:XCode.Membership.User.Code">
            <summary>代码。身份证、员工编码等，支持登录</summary>
        </member>
        <member name="P:XCode.Membership.User.AreaId">
            <summary>地区。省市区</summary>
        </member>
        <member name="P:XCode.Membership.User.Avatar">
            <summary>头像</summary>
        </member>
        <member name="P:XCode.Membership.User.RoleID">
            <summary>角色。主要角色</summary>
        </member>
        <member name="P:XCode.Membership.User.RoleIds">
            <summary>角色组。次要角色集合</summary>
        </member>
        <member name="P:XCode.Membership.User.DepartmentID">
            <summary>部门。组织机构</summary>
        </member>
        <member name="P:XCode.Membership.User.Online">
            <summary>在线</summary>
        </member>
        <member name="P:XCode.Membership.User.Enable">
            <summary>启用</summary>
        </member>
        <member name="P:XCode.Membership.User.Age">
            <summary>年龄。周岁</summary>
        </member>
        <member name="P:XCode.Membership.User.Birthday">
            <summary>生日。公历年月日</summary>
        </member>
        <member name="P:XCode.Membership.User.Logins">
            <summary>登录次数</summary>
        </member>
        <member name="P:XCode.Membership.User.LastLogin">
            <summary>最后登录</summary>
        </member>
        <member name="P:XCode.Membership.User.LastLoginIP">
            <summary>最后登录IP</summary>
        </member>
        <member name="P:XCode.Membership.User.RegisterTime">
            <summary>注册时间</summary>
        </member>
        <member name="P:XCode.Membership.User.RegisterIP">
            <summary>注册IP</summary>
        </member>
        <member name="P:XCode.Membership.User.OnlineTime">
            <summary>在线时间。累计在线总时间，单位秒</summary>
        </member>
        <member name="P:XCode.Membership.User.Ex1">
            <summary>扩展1</summary>
        </member>
        <member name="P:XCode.Membership.User.Ex2">
            <summary>扩展2</summary>
        </member>
        <member name="P:XCode.Membership.User.Ex3">
            <summary>扩展3</summary>
        </member>
        <member name="P:XCode.Membership.User.Ex4">
            <summary>扩展4</summary>
        </member>
        <member name="P:XCode.Membership.User.Ex5">
            <summary>扩展5</summary>
        </member>
        <member name="P:XCode.Membership.User.Ex6">
            <summary>扩展6</summary>
        </member>
        <member name="P:XCode.Membership.User.UpdateUser">
            <summary>更新者</summary>
        </member>
        <member name="P:XCode.Membership.User.UpdateUserID">
            <summary>更新用户</summary>
        </member>
        <member name="P:XCode.Membership.User.UpdateIP">
            <summary>更新地址</summary>
        </member>
        <member name="P:XCode.Membership.User.UpdateTime">
            <summary>更新时间</summary>
        </member>
        <member name="P:XCode.Membership.User.Remark">
            <summary>备注</summary>
        </member>
        <member name="M:XCode.Membership.User.Copy(XCode.Membership.UserModel)">
            <summary>拷贝模型对象</summary>
            <param name="model">模型</param>
        </member>
        <member name="P:XCode.Membership.User.Item(System.String)">
            <summary>获取/设置 字段值</summary>
            <param name="name">字段名</param>
            <returns></returns>
        </member>
        <member name="P:XCode.Membership.User.Area">
            <summary>地区</summary>
        </member>
        <member name="P:XCode.Membership.User.AreaPath">
            <summary>地区</summary>
        </member>
        <member name="P:XCode.Membership.User.Role">
            <summary>角色</summary>
        </member>
        <member name="P:XCode.Membership.User.RoleName">
            <summary>角色</summary>
        </member>
        <member name="P:XCode.Membership.User.Department">
            <summary>部门</summary>
        </member>
        <member name="P:XCode.Membership.User.DepartmentName">
            <summary>部门</summary>
        </member>
        <member name="T:XCode.Membership.User._">
            <summary>取得用户字段信息的快捷方式</summary>
        </member>
        <member name="F:XCode.Membership.User._.ID">
            <summary>编号</summary>
        </member>
        <member name="F:XCode.Membership.User._.Name">
            <summary>名称。登录用户名</summary>
        </member>
        <member name="F:XCode.Membership.User._.Password">
            <summary>密码</summary>
        </member>
        <member name="F:XCode.Membership.User._.DisplayName">
            <summary>昵称</summary>
        </member>
        <member name="F:XCode.Membership.User._.Sex">
            <summary>性别。未知、男、女</summary>
        </member>
        <member name="F:XCode.Membership.User._.Mail">
            <summary>邮件。支持登录</summary>
        </member>
        <member name="F:XCode.Membership.User._.Mobile">
            <summary>手机。支持登录</summary>
        </member>
        <member name="F:XCode.Membership.User._.Code">
            <summary>代码。身份证、员工编码等，支持登录</summary>
        </member>
        <member name="F:XCode.Membership.User._.AreaId">
            <summary>地区。省市区</summary>
        </member>
        <member name="F:XCode.Membership.User._.Avatar">
            <summary>头像</summary>
        </member>
        <member name="F:XCode.Membership.User._.RoleID">
            <summary>角色。主要角色</summary>
        </member>
        <member name="F:XCode.Membership.User._.RoleIds">
            <summary>角色组。次要角色集合</summary>
        </member>
        <member name="F:XCode.Membership.User._.DepartmentID">
            <summary>部门。组织机构</summary>
        </member>
        <member name="F:XCode.Membership.User._.Online">
            <summary>在线</summary>
        </member>
        <member name="F:XCode.Membership.User._.Enable">
            <summary>启用</summary>
        </member>
        <member name="F:XCode.Membership.User._.Age">
            <summary>年龄。周岁</summary>
        </member>
        <member name="F:XCode.Membership.User._.Birthday">
            <summary>生日。公历年月日</summary>
        </member>
        <member name="F:XCode.Membership.User._.Logins">
            <summary>登录次数</summary>
        </member>
        <member name="F:XCode.Membership.User._.LastLogin">
            <summary>最后登录</summary>
        </member>
        <member name="F:XCode.Membership.User._.LastLoginIP">
            <summary>最后登录IP</summary>
        </member>
        <member name="F:XCode.Membership.User._.RegisterTime">
            <summary>注册时间</summary>
        </member>
        <member name="F:XCode.Membership.User._.RegisterIP">
            <summary>注册IP</summary>
        </member>
        <member name="F:XCode.Membership.User._.OnlineTime">
            <summary>在线时间。累计在线总时间，单位秒</summary>
        </member>
        <member name="F:XCode.Membership.User._.Ex1">
            <summary>扩展1</summary>
        </member>
        <member name="F:XCode.Membership.User._.Ex2">
            <summary>扩展2</summary>
        </member>
        <member name="F:XCode.Membership.User._.Ex3">
            <summary>扩展3</summary>
        </member>
        <member name="F:XCode.Membership.User._.Ex4">
            <summary>扩展4</summary>
        </member>
        <member name="F:XCode.Membership.User._.Ex5">
            <summary>扩展5</summary>
        </member>
        <member name="F:XCode.Membership.User._.Ex6">
            <summary>扩展6</summary>
        </member>
        <member name="F:XCode.Membership.User._.UpdateUser">
            <summary>更新者</summary>
        </member>
        <member name="F:XCode.Membership.User._.UpdateUserID">
            <summary>更新用户</summary>
        </member>
        <member name="F:XCode.Membership.User._.UpdateIP">
            <summary>更新地址</summary>
        </member>
        <member name="F:XCode.Membership.User._.UpdateTime">
            <summary>更新时间</summary>
        </member>
        <member name="F:XCode.Membership.User._.Remark">
            <summary>备注</summary>
        </member>
        <member name="T:XCode.Membership.User.__">
            <summary>取得用户字段名称的快捷方式</summary>
        </member>
        <member name="F:XCode.Membership.User.__.ID">
            <summary>编号</summary>
        </member>
        <member name="F:XCode.Membership.User.__.Name">
            <summary>名称。登录用户名</summary>
        </member>
        <member name="F:XCode.Membership.User.__.Password">
            <summary>密码</summary>
        </member>
        <member name="F:XCode.Membership.User.__.DisplayName">
            <summary>昵称</summary>
        </member>
        <member name="F:XCode.Membership.User.__.Sex">
            <summary>性别。未知、男、女</summary>
        </member>
        <member name="F:XCode.Membership.User.__.Mail">
            <summary>邮件。支持登录</summary>
        </member>
        <member name="F:XCode.Membership.User.__.Mobile">
            <summary>手机。支持登录</summary>
        </member>
        <member name="F:XCode.Membership.User.__.Code">
            <summary>代码。身份证、员工编码等，支持登录</summary>
        </member>
        <member name="F:XCode.Membership.User.__.AreaId">
            <summary>地区。省市区</summary>
        </member>
        <member name="F:XCode.Membership.User.__.Avatar">
            <summary>头像</summary>
        </member>
        <member name="F:XCode.Membership.User.__.RoleID">
            <summary>角色。主要角色</summary>
        </member>
        <member name="F:XCode.Membership.User.__.RoleIds">
            <summary>角色组。次要角色集合</summary>
        </member>
        <member name="F:XCode.Membership.User.__.DepartmentID">
            <summary>部门。组织机构</summary>
        </member>
        <member name="F:XCode.Membership.User.__.Online">
            <summary>在线</summary>
        </member>
        <member name="F:XCode.Membership.User.__.Enable">
            <summary>启用</summary>
        </member>
        <member name="F:XCode.Membership.User.__.Age">
            <summary>年龄。周岁</summary>
        </member>
        <member name="F:XCode.Membership.User.__.Birthday">
            <summary>生日。公历年月日</summary>
        </member>
        <member name="F:XCode.Membership.User.__.Logins">
            <summary>登录次数</summary>
        </member>
        <member name="F:XCode.Membership.User.__.LastLogin">
            <summary>最后登录</summary>
        </member>
        <member name="F:XCode.Membership.User.__.LastLoginIP">
            <summary>最后登录IP</summary>
        </member>
        <member name="F:XCode.Membership.User.__.RegisterTime">
            <summary>注册时间</summary>
        </member>
        <member name="F:XCode.Membership.User.__.RegisterIP">
            <summary>注册IP</summary>
        </member>
        <member name="F:XCode.Membership.User.__.OnlineTime">
            <summary>在线时间。累计在线总时间，单位秒</summary>
        </member>
        <member name="F:XCode.Membership.User.__.Ex1">
            <summary>扩展1</summary>
        </member>
        <member name="F:XCode.Membership.User.__.Ex2">
            <summary>扩展2</summary>
        </member>
        <member name="F:XCode.Membership.User.__.Ex3">
            <summary>扩展3</summary>
        </member>
        <member name="F:XCode.Membership.User.__.Ex4">
            <summary>扩展4</summary>
        </member>
        <member name="F:XCode.Membership.User.__.Ex5">
            <summary>扩展5</summary>
        </member>
        <member name="F:XCode.Membership.User.__.Ex6">
            <summary>扩展6</summary>
        </member>
        <member name="F:XCode.Membership.User.__.UpdateUser">
            <summary>更新者</summary>
        </member>
        <member name="F:XCode.Membership.User.__.UpdateUserID">
            <summary>更新用户</summary>
        </member>
        <member name="F:XCode.Membership.User.__.UpdateIP">
            <summary>更新地址</summary>
        </member>
        <member name="F:XCode.Membership.User.__.UpdateTime">
            <summary>更新时间</summary>
        </member>
        <member name="F:XCode.Membership.User.__.Remark">
            <summary>备注</summary>
        </member>
        <member name="T:XCode.Membership.Tenant">
            <summary>租户。多租户SAAS平台，用于隔离业务数据</summary>
        </member>
        <member name="M:XCode.Membership.Tenant.Valid(XCode.DataMethod)">
            <summary>验证并修补数据，返回验证结果，或者通过抛出异常的方式提示验证失败。</summary>
            <param name="method">添删改方法</param>
        </member>
        <member name="P:XCode.Membership.Tenant.RoleNames">
            <summary>角色组名</summary>
        </member>
        <member name="M:XCode.Membership.Tenant.FindById(System.Int32)">
            <summary>根据编号查找</summary>
            <param name="id">编号</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:XCode.Membership.Tenant.FindAllByName(System.String)">
            <summary>根据名称查找</summary>
            <param name="name">名称</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:XCode.Membership.Tenant.FindByCode(System.String)">
            <summary>根据编码查找</summary>
            <param name="code">编码</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:XCode.Membership.Tenant.FindByManagerId(System.Int32)">
            <summary>根据管理员编号查询</summary>
            <param name="managerId"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Tenant.Search(System.String,System.Int32,System.Nullable{System.Boolean},System.DateTime,System.DateTime,System.String,NewLife.Data.PageParameter)">
            <summary>高级查询</summary>
            <param name="name">名称</param>
            <param name="managerId">租户管理员</param>
            <param name="enable">是否启用</param>
            <param name="start">更新时间开始</param>
            <param name="end">更新时间结束</param>
            <param name="key">关键字</param>
            <param name="page">分页参数信息。可携带统计和数据权限扩展查询等信息</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:XCode.Membership.Tenant.ToModel">
            <summary>转模型</summary>
            <returns></returns>
        </member>
        <member name="P:XCode.Membership.Tenant.Id">
            <summary>编号</summary>
        </member>
        <member name="P:XCode.Membership.Tenant.Code">
            <summary>编码。唯一编码</summary>
        </member>
        <member name="P:XCode.Membership.Tenant.Name">
            <summary>名称。显示名称</summary>
        </member>
        <member name="P:XCode.Membership.Tenant.Enable">
            <summary>启用</summary>
        </member>
        <member name="P:XCode.Membership.Tenant.ManagerId">
            <summary>管理者</summary>
        </member>
        <member name="P:XCode.Membership.Tenant.RoleIds">
            <summary>角色组。租户可选的角色集合，不同级别的租户所拥有的角色不一样，高级功能也会不同</summary>
        </member>
        <member name="P:XCode.Membership.Tenant.Logo">
            <summary>图标。附件路径</summary>
        </member>
        <member name="P:XCode.Membership.Tenant.DatabaseName">
            <summary>数据库。分库用的数据库名</summary>
        </member>
        <member name="P:XCode.Membership.Tenant.TableName">
            <summary>数据表。分表用的数据表前缀</summary>
        </member>
        <member name="P:XCode.Membership.Tenant.Expired">
            <summary>过期时间。达到该时间后，自动禁用租户，空表示永不过期</summary>
        </member>
        <member name="P:XCode.Membership.Tenant.CreateUserId">
            <summary>创建者</summary>
        </member>
        <member name="P:XCode.Membership.Tenant.CreateTime">
            <summary>创建时间</summary>
        </member>
        <member name="P:XCode.Membership.Tenant.CreateIP">
            <summary>创建地址</summary>
        </member>
        <member name="P:XCode.Membership.Tenant.UpdateUserId">
            <summary>更新者</summary>
        </member>
        <member name="P:XCode.Membership.Tenant.UpdateTime">
            <summary>更新时间</summary>
        </member>
        <member name="P:XCode.Membership.Tenant.UpdateIP">
            <summary>更新地址</summary>
        </member>
        <member name="P:XCode.Membership.Tenant.Remark">
            <summary>描述</summary>
        </member>
        <member name="M:XCode.Membership.Tenant.Copy(XCode.Membership.TenantModel)">
            <summary>拷贝模型对象</summary>
            <param name="model">模型</param>
        </member>
        <member name="P:XCode.Membership.Tenant.Item(System.String)">
            <summary>获取/设置 字段值</summary>
            <param name="name">字段名</param>
            <returns></returns>
        </member>
        <member name="P:XCode.Membership.Tenant.Manager">
            <summary>管理者</summary>
        </member>
        <member name="P:XCode.Membership.Tenant.ManagerName">
            <summary>管理者</summary>
        </member>
        <member name="T:XCode.Membership.Tenant._">
            <summary>取得租户字段信息的快捷方式</summary>
        </member>
        <member name="F:XCode.Membership.Tenant._.Id">
            <summary>编号</summary>
        </member>
        <member name="F:XCode.Membership.Tenant._.Code">
            <summary>编码。唯一编码</summary>
        </member>
        <member name="F:XCode.Membership.Tenant._.Name">
            <summary>名称。显示名称</summary>
        </member>
        <member name="F:XCode.Membership.Tenant._.Enable">
            <summary>启用</summary>
        </member>
        <member name="F:XCode.Membership.Tenant._.ManagerId">
            <summary>管理者</summary>
        </member>
        <member name="F:XCode.Membership.Tenant._.RoleIds">
            <summary>角色组。租户可选的角色集合，不同级别的租户所拥有的角色不一样，高级功能也会不同</summary>
        </member>
        <member name="F:XCode.Membership.Tenant._.Logo">
            <summary>图标。附件路径</summary>
        </member>
        <member name="F:XCode.Membership.Tenant._.DatabaseName">
            <summary>数据库。分库用的数据库名</summary>
        </member>
        <member name="F:XCode.Membership.Tenant._.TableName">
            <summary>数据表。分表用的数据表前缀</summary>
        </member>
        <member name="F:XCode.Membership.Tenant._.Expired">
            <summary>过期时间。达到该时间后，自动禁用租户，空表示永不过期</summary>
        </member>
        <member name="F:XCode.Membership.Tenant._.CreateUserId">
            <summary>创建者</summary>
        </member>
        <member name="F:XCode.Membership.Tenant._.CreateTime">
            <summary>创建时间</summary>
        </member>
        <member name="F:XCode.Membership.Tenant._.CreateIP">
            <summary>创建地址</summary>
        </member>
        <member name="F:XCode.Membership.Tenant._.UpdateUserId">
            <summary>更新者</summary>
        </member>
        <member name="F:XCode.Membership.Tenant._.UpdateTime">
            <summary>更新时间</summary>
        </member>
        <member name="F:XCode.Membership.Tenant._.UpdateIP">
            <summary>更新地址</summary>
        </member>
        <member name="F:XCode.Membership.Tenant._.Remark">
            <summary>描述</summary>
        </member>
        <member name="T:XCode.Membership.Tenant.__">
            <summary>取得租户字段名称的快捷方式</summary>
        </member>
        <member name="F:XCode.Membership.Tenant.__.Id">
            <summary>编号</summary>
        </member>
        <member name="F:XCode.Membership.Tenant.__.Code">
            <summary>编码。唯一编码</summary>
        </member>
        <member name="F:XCode.Membership.Tenant.__.Name">
            <summary>名称。显示名称</summary>
        </member>
        <member name="F:XCode.Membership.Tenant.__.Enable">
            <summary>启用</summary>
        </member>
        <member name="F:XCode.Membership.Tenant.__.ManagerId">
            <summary>管理者</summary>
        </member>
        <member name="F:XCode.Membership.Tenant.__.RoleIds">
            <summary>角色组。租户可选的角色集合，不同级别的租户所拥有的角色不一样，高级功能也会不同</summary>
        </member>
        <member name="F:XCode.Membership.Tenant.__.Logo">
            <summary>图标。附件路径</summary>
        </member>
        <member name="F:XCode.Membership.Tenant.__.DatabaseName">
            <summary>数据库。分库用的数据库名</summary>
        </member>
        <member name="F:XCode.Membership.Tenant.__.TableName">
            <summary>数据表。分表用的数据表前缀</summary>
        </member>
        <member name="F:XCode.Membership.Tenant.__.Expired">
            <summary>过期时间。达到该时间后，自动禁用租户，空表示永不过期</summary>
        </member>
        <member name="F:XCode.Membership.Tenant.__.CreateUserId">
            <summary>创建者</summary>
        </member>
        <member name="F:XCode.Membership.Tenant.__.CreateTime">
            <summary>创建时间</summary>
        </member>
        <member name="F:XCode.Membership.Tenant.__.CreateIP">
            <summary>创建地址</summary>
        </member>
        <member name="F:XCode.Membership.Tenant.__.UpdateUserId">
            <summary>更新者</summary>
        </member>
        <member name="F:XCode.Membership.Tenant.__.UpdateTime">
            <summary>更新时间</summary>
        </member>
        <member name="F:XCode.Membership.Tenant.__.UpdateIP">
            <summary>更新地址</summary>
        </member>
        <member name="F:XCode.Membership.Tenant.__.Remark">
            <summary>描述</summary>
        </member>
        <member name="T:XCode.Membership.TenantUser">
            <summary>租户关系。用户选择租户进入系统后，以租户关系角色组替代自有角色组来进行鉴权</summary>
        </member>
        <member name="M:XCode.Membership.TenantUser.Valid(XCode.DataMethod)">
            <summary>验证并修补数据，返回验证结果，或者通过抛出异常的方式提示验证失败。</summary>
            <param name="method">添删改方法</param>
        </member>
        <member name="P:XCode.Membership.TenantUser.XCode#Membership#ITenantUser#Role">
            <summary>角色</summary>
        </member>
        <member name="P:XCode.Membership.TenantUser.Roles">
            <summary>角色集合</summary>
        </member>
        <member name="M:XCode.Membership.TenantUser.GetRoleIDs">
            <summary>获取角色列表。主角色在前，其它角色升序在后</summary>
            <returns></returns>
        </member>
        <member name="P:XCode.Membership.TenantUser.RoleNames">
            <summary>角色组名</summary>
        </member>
        <member name="M:XCode.Membership.TenantUser.FindById(System.Int32)">
            <summary>根据编号查找</summary>
            <param name="id">编号</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:XCode.Membership.TenantUser.FindByTenantIdAndUserId(System.Int32,System.Int32)">
            <summary>根据租户、用户查找</summary>
            <param name="tenantId">租户</param>
            <param name="userId">用户</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:XCode.Membership.TenantUser.FindAllByUserId(System.Int32,System.Boolean)">
            <summary>根据用户查找</summary>
            <param name="userId">用户</param>
            <param name="isAll">是否包含停用(默认不包含停用)</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:XCode.Membership.TenantUser.FindAllByUserId(System.Int32)">
            <summary>根据用户查找</summary>
            <param name="userId">用户</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:XCode.Membership.TenantUser.FindAllByTenantId(System.Int32)">
            <summary>根据租户查询用户id</summary>
            <param name="tenantId"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.TenantUser.Search(System.Int32,System.Int32,System.Int32,System.Nullable{System.Boolean},System.DateTime,System.DateTime,System.String,NewLife.Data.PageParameter)">
            <summary>高级查询</summary>
            <param name="tenantId">租户</param>
            <param name="userId">用户</param>
            <param name="roleId">角色</param>
            <param name="enable">是否启用</param>
            <param name="start">更新时间开始</param>
            <param name="end">更新时间结束</param>
            <param name="key">关键字</param>
            <param name="page">分页参数信息。可携带统计和数据权限扩展查询等信息</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:XCode.Membership.TenantUser.ToModel">
            <summary>转模型</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.TenantUser.Has(XCode.Membership.IMenu,XCode.Membership.PermissionFlags[])">
            <summary>用户是否拥有当前菜单的指定权限</summary>
            <param name="menu">指定菜单</param>
            <param name="flags">是否拥有多个权限中的任意一个，或的关系。如果需要表示与的关系，可以传入一个多权限位合并</param>
            <returns></returns>
        </member>
        <member name="P:XCode.Membership.TenantUser.Id">
            <summary>编号</summary>
        </member>
        <member name="P:XCode.Membership.TenantUser.TenantId">
            <summary>租户</summary>
        </member>
        <member name="P:XCode.Membership.TenantUser.UserId">
            <summary>用户</summary>
        </member>
        <member name="P:XCode.Membership.TenantUser.Enable">
            <summary>启用</summary>
        </member>
        <member name="P:XCode.Membership.TenantUser.RoleId">
            <summary>角色。用户在该租户所对应的主要角色，替换用户自身的角色组</summary>
        </member>
        <member name="P:XCode.Membership.TenantUser.RoleIds">
            <summary>角色组。次要角色集合</summary>
        </member>
        <member name="P:XCode.Membership.TenantUser.CreateUserId">
            <summary>创建者</summary>
        </member>
        <member name="P:XCode.Membership.TenantUser.CreateTime">
            <summary>创建时间</summary>
        </member>
        <member name="P:XCode.Membership.TenantUser.CreateIP">
            <summary>创建地址</summary>
        </member>
        <member name="P:XCode.Membership.TenantUser.UpdateUserId">
            <summary>更新者</summary>
        </member>
        <member name="P:XCode.Membership.TenantUser.UpdateTime">
            <summary>更新时间</summary>
        </member>
        <member name="P:XCode.Membership.TenantUser.UpdateIP">
            <summary>更新地址</summary>
        </member>
        <member name="P:XCode.Membership.TenantUser.Remark">
            <summary>描述</summary>
        </member>
        <member name="M:XCode.Membership.TenantUser.Copy(XCode.Membership.TenantUserModel)">
            <summary>拷贝模型对象</summary>
            <param name="model">模型</param>
        </member>
        <member name="P:XCode.Membership.TenantUser.Item(System.String)">
            <summary>获取/设置 字段值</summary>
            <param name="name">字段名</param>
            <returns></returns>
        </member>
        <member name="P:XCode.Membership.TenantUser.Tenant">
            <summary>租户</summary>
        </member>
        <member name="P:XCode.Membership.TenantUser.TenantName">
            <summary>租户</summary>
        </member>
        <member name="P:XCode.Membership.TenantUser.User">
            <summary>用户</summary>
        </member>
        <member name="P:XCode.Membership.TenantUser.UserName">
            <summary>用户</summary>
        </member>
        <member name="P:XCode.Membership.TenantUser.Role">
            <summary>角色</summary>
        </member>
        <member name="P:XCode.Membership.TenantUser.RoleName">
            <summary>角色</summary>
        </member>
        <member name="T:XCode.Membership.TenantUser._">
            <summary>取得租户关系字段信息的快捷方式</summary>
        </member>
        <member name="F:XCode.Membership.TenantUser._.Id">
            <summary>编号</summary>
        </member>
        <member name="F:XCode.Membership.TenantUser._.TenantId">
            <summary>租户</summary>
        </member>
        <member name="F:XCode.Membership.TenantUser._.UserId">
            <summary>用户</summary>
        </member>
        <member name="F:XCode.Membership.TenantUser._.Enable">
            <summary>启用</summary>
        </member>
        <member name="F:XCode.Membership.TenantUser._.RoleId">
            <summary>角色。用户在该租户所对应的主要角色，替换用户自身的角色组</summary>
        </member>
        <member name="F:XCode.Membership.TenantUser._.RoleIds">
            <summary>角色组。次要角色集合</summary>
        </member>
        <member name="F:XCode.Membership.TenantUser._.CreateUserId">
            <summary>创建者</summary>
        </member>
        <member name="F:XCode.Membership.TenantUser._.CreateTime">
            <summary>创建时间</summary>
        </member>
        <member name="F:XCode.Membership.TenantUser._.CreateIP">
            <summary>创建地址</summary>
        </member>
        <member name="F:XCode.Membership.TenantUser._.UpdateUserId">
            <summary>更新者</summary>
        </member>
        <member name="F:XCode.Membership.TenantUser._.UpdateTime">
            <summary>更新时间</summary>
        </member>
        <member name="F:XCode.Membership.TenantUser._.UpdateIP">
            <summary>更新地址</summary>
        </member>
        <member name="F:XCode.Membership.TenantUser._.Remark">
            <summary>描述</summary>
        </member>
        <member name="T:XCode.Membership.TenantUser.__">
            <summary>取得租户关系字段名称的快捷方式</summary>
        </member>
        <member name="F:XCode.Membership.TenantUser.__.Id">
            <summary>编号</summary>
        </member>
        <member name="F:XCode.Membership.TenantUser.__.TenantId">
            <summary>租户</summary>
        </member>
        <member name="F:XCode.Membership.TenantUser.__.UserId">
            <summary>用户</summary>
        </member>
        <member name="F:XCode.Membership.TenantUser.__.Enable">
            <summary>启用</summary>
        </member>
        <member name="F:XCode.Membership.TenantUser.__.RoleId">
            <summary>角色。用户在该租户所对应的主要角色，替换用户自身的角色组</summary>
        </member>
        <member name="F:XCode.Membership.TenantUser.__.RoleIds">
            <summary>角色组。次要角色集合</summary>
        </member>
        <member name="F:XCode.Membership.TenantUser.__.CreateUserId">
            <summary>创建者</summary>
        </member>
        <member name="F:XCode.Membership.TenantUser.__.CreateTime">
            <summary>创建时间</summary>
        </member>
        <member name="F:XCode.Membership.TenantUser.__.CreateIP">
            <summary>创建地址</summary>
        </member>
        <member name="F:XCode.Membership.TenantUser.__.UpdateUserId">
            <summary>更新者</summary>
        </member>
        <member name="F:XCode.Membership.TenantUser.__.UpdateTime">
            <summary>更新时间</summary>
        </member>
        <member name="F:XCode.Membership.TenantUser.__.UpdateIP">
            <summary>更新地址</summary>
        </member>
        <member name="F:XCode.Membership.TenantUser.__.Remark">
            <summary>描述</summary>
        </member>
        <member name="T:XCode.Membership.Menu">
            <summary>菜单</summary>
            <summary>菜单。功能权限，大多数时候也是可见页面</summary>
        </member>
        <member name="M:XCode.Membership.Menu.Valid(XCode.DataMethod)">
            <summary>验证并修补数据，返回验证结果，或者通过抛出异常的方式提示验证失败。</summary>
            <param name="method">添删改方法</param>
        </member>
        <member name="M:XCode.Membership.Menu.Save">
            <summary>已重载。调用Save时写日志，而调用Insert和Update时不写日志</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Menu.OnDelete">
            <summary>删除。</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Menu.OnLoad">
            <summary>加载权限字典</summary>
        </member>
        <member name="M:XCode.Membership.Menu.OnPropertyChanged(System.String)">
            <summary>如果Permission被修改，则重新加载</summary>
            <param name="fieldName"></param>
        </member>
        <member name="P:XCode.Membership.Menu.Url2">
            <summary></summary>
        </member>
        <member name="P:XCode.Membership.Menu.ParentMenuName">
            <summary>父菜单名</summary>
        </member>
        <member name="P:XCode.Membership.Menu.Necessaries">
            <summary>必要的菜单。必须至少有角色拥有这些权限，如果没有则自动授权给系统角色</summary>
        </member>
        <member name="P:XCode.Membership.Menu.FriendName">
            <summary>友好名称。优先显示名</summary>
        </member>
        <member name="M:XCode.Membership.Menu.FindByID(System.Int32)">
            <summary>根据编号查找</summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Menu.FindByName(System.String)">
            <summary>根据名字查找</summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Menu.FindByFullName(System.String)">
            <summary>根据全名查找</summary>
            <param name="name">全名</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Menu.FindByUrl(System.String)">
            <summary>根据Url查找</summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Menu.FindForName(System.String)">
            <summary>根据名字查找，支持路径查找</summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Menu.FindAllByParentID(System.Int32)">
            <summary>查找指定菜单的子菜单</summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Menu.GetSubMenus(System.Int32[],System.Boolean)">
            <summary>取得当前角色的子菜单，有权限、可显示、排序</summary>
            <param name="filters"></param>
            <param name="inclInvisible">包含不可见菜单</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Menu.FindAllByName(System.String)">
            <summary>根据名称查找</summary>
            <param name="name">名称</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:XCode.Membership.Menu.FindByParentIDAndName(System.Int32,System.String)">
            <summary>根据父编号、名称查找</summary>
            <param name="parentId">父编号</param>
            <param name="name">名称</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:XCode.Membership.Menu.Add(System.String,System.String,System.String,System.String)">
            <summary>添加子菜单</summary>
            <param name="name"></param>
            <param name="displayName"></param>
            <param name="fullName"></param>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.Membership.Menu.Permissions">
            <summary>可选权限子项</summary>
        </member>
        <member name="M:XCode.Membership.Menu.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Menu.XCode#Membership#IMenu#GetFullPath(System.Boolean,System.String,System.Func{XCode.Membership.IMenu,System.String})">
            <summary>取得全路径的实体，由上向下排序</summary>
            <param name="includeSelf">是否包含自己</param>
            <param name="separator">分隔符</param>
            <param name="func">回调</param>
            <returns></returns>
        </member>
        <member name="P:XCode.Membership.Menu.XCode#Membership#IMenu#Parent">
            <summary>父菜单</summary>
        </member>
        <member name="P:XCode.Membership.Menu.XCode#Membership#IMenu#Childs">
            <summary>子菜单</summary>
        </member>
        <member name="P:XCode.Membership.Menu.XCode#Membership#IMenu#AllChilds">
            <summary>子孙菜单</summary>
        </member>
        <member name="M:XCode.Membership.Menu.XCode#Membership#IMenu#FindByPath(System.String)">
            <summary>根据层次路径查找</summary>
            <param name="path">层次路径</param>
            <returns></returns>
        </member>
        <member name="T:XCode.Membership.Menu.MenuFactory">
            <summary>菜单工厂</summary>
        </member>
        <member name="M:XCode.Membership.Menu.MenuFactory.XCode#Membership#IMenuFactory#FindByID(System.Int32)">
            <summary>根据编号找到菜单</summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Menu.MenuFactory.XCode#Membership#IMenuFactory#FindByUrl(System.String)">
            <summary>根据Url找到菜单</summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Menu.MenuFactory.XCode#Membership#IMenuFactory#FindByFullName(System.String)">
            <summary>根据全名找到菜单</summary>
            <param name="fullName"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Menu.MenuFactory.XCode#Membership#IMenuFactory#GetMySubMenus(System.Int32,XCode.Membership.IUser,System.Boolean)">
            <summary>获取指定菜单下，当前用户有权访问的子菜单。</summary>
            <param name="menuid"></param>
            <param name="user"></param>
            <param name="inclInvisible">是否包含不可见菜单</param>
            <returns></returns>
        </member>
        <member name="P:XCode.Membership.Menu.ID">
            <summary>编号</summary>
        </member>
        <member name="P:XCode.Membership.Menu.Name">
            <summary>名称</summary>
        </member>
        <member name="P:XCode.Membership.Menu.DisplayName">
            <summary>显示名</summary>
        </member>
        <member name="P:XCode.Membership.Menu.FullName">
            <summary>全名</summary>
        </member>
        <member name="P:XCode.Membership.Menu.ParentID">
            <summary>父编号</summary>
        </member>
        <member name="P:XCode.Membership.Menu.Url">
            <summary>链接</summary>
        </member>
        <member name="P:XCode.Membership.Menu.Sort">
            <summary>排序</summary>
        </member>
        <member name="P:XCode.Membership.Menu.Icon">
            <summary>图标</summary>
        </member>
        <member name="P:XCode.Membership.Menu.Visible">
            <summary>可见</summary>
        </member>
        <member name="P:XCode.Membership.Menu.Necessary">
            <summary>必要。必要的菜单，必须至少有角色拥有这些权限，如果没有则自动授权给系统角色</summary>
        </member>
        <member name="P:XCode.Membership.Menu.NewWindow">
            <summary>新窗口。新窗口打开链接</summary>
        </member>
        <member name="P:XCode.Membership.Menu.Permission">
            <summary>权限子项。逗号分隔，每个权限子项名值竖线分隔</summary>
        </member>
        <member name="P:XCode.Membership.Menu.Ex1">
            <summary>扩展1</summary>
        </member>
        <member name="P:XCode.Membership.Menu.Ex2">
            <summary>扩展2</summary>
        </member>
        <member name="P:XCode.Membership.Menu.Ex3">
            <summary>扩展3</summary>
        </member>
        <member name="P:XCode.Membership.Menu.Ex4">
            <summary>扩展4</summary>
        </member>
        <member name="P:XCode.Membership.Menu.Ex5">
            <summary>扩展5</summary>
        </member>
        <member name="P:XCode.Membership.Menu.Ex6">
            <summary>扩展6</summary>
        </member>
        <member name="P:XCode.Membership.Menu.CreateUser">
            <summary>创建者</summary>
        </member>
        <member name="P:XCode.Membership.Menu.CreateUserID">
            <summary>创建用户</summary>
        </member>
        <member name="P:XCode.Membership.Menu.CreateIP">
            <summary>创建地址</summary>
        </member>
        <member name="P:XCode.Membership.Menu.CreateTime">
            <summary>创建时间</summary>
        </member>
        <member name="P:XCode.Membership.Menu.UpdateUser">
            <summary>更新者</summary>
        </member>
        <member name="P:XCode.Membership.Menu.UpdateUserID">
            <summary>更新用户</summary>
        </member>
        <member name="P:XCode.Membership.Menu.UpdateIP">
            <summary>更新地址</summary>
        </member>
        <member name="P:XCode.Membership.Menu.UpdateTime">
            <summary>更新时间</summary>
        </member>
        <member name="P:XCode.Membership.Menu.Remark">
            <summary>备注</summary>
        </member>
        <member name="M:XCode.Membership.Menu.Copy(XCode.Membership.MenuModel)">
            <summary>拷贝模型对象</summary>
            <param name="model">模型</param>
        </member>
        <member name="P:XCode.Membership.Menu.Item(System.String)">
            <summary>获取/设置 字段值</summary>
            <param name="name">字段名</param>
            <returns></returns>
        </member>
        <member name="T:XCode.Membership.Menu._">
            <summary>取得菜单字段信息的快捷方式</summary>
        </member>
        <member name="F:XCode.Membership.Menu._.ID">
            <summary>编号</summary>
        </member>
        <member name="F:XCode.Membership.Menu._.Name">
            <summary>名称</summary>
        </member>
        <member name="F:XCode.Membership.Menu._.DisplayName">
            <summary>显示名</summary>
        </member>
        <member name="F:XCode.Membership.Menu._.FullName">
            <summary>全名</summary>
        </member>
        <member name="F:XCode.Membership.Menu._.ParentID">
            <summary>父编号</summary>
        </member>
        <member name="F:XCode.Membership.Menu._.Url">
            <summary>链接</summary>
        </member>
        <member name="F:XCode.Membership.Menu._.Sort">
            <summary>排序</summary>
        </member>
        <member name="F:XCode.Membership.Menu._.Icon">
            <summary>图标</summary>
        </member>
        <member name="F:XCode.Membership.Menu._.Visible">
            <summary>可见</summary>
        </member>
        <member name="F:XCode.Membership.Menu._.Necessary">
            <summary>必要。必要的菜单，必须至少有角色拥有这些权限，如果没有则自动授权给系统角色</summary>
        </member>
        <member name="F:XCode.Membership.Menu._.NewWindow">
            <summary>新窗口。新窗口打开链接</summary>
        </member>
        <member name="F:XCode.Membership.Menu._.Permission">
            <summary>权限子项。逗号分隔，每个权限子项名值竖线分隔</summary>
        </member>
        <member name="F:XCode.Membership.Menu._.Ex1">
            <summary>扩展1</summary>
        </member>
        <member name="F:XCode.Membership.Menu._.Ex2">
            <summary>扩展2</summary>
        </member>
        <member name="F:XCode.Membership.Menu._.Ex3">
            <summary>扩展3</summary>
        </member>
        <member name="F:XCode.Membership.Menu._.Ex4">
            <summary>扩展4</summary>
        </member>
        <member name="F:XCode.Membership.Menu._.Ex5">
            <summary>扩展5</summary>
        </member>
        <member name="F:XCode.Membership.Menu._.Ex6">
            <summary>扩展6</summary>
        </member>
        <member name="F:XCode.Membership.Menu._.CreateUser">
            <summary>创建者</summary>
        </member>
        <member name="F:XCode.Membership.Menu._.CreateUserID">
            <summary>创建用户</summary>
        </member>
        <member name="F:XCode.Membership.Menu._.CreateIP">
            <summary>创建地址</summary>
        </member>
        <member name="F:XCode.Membership.Menu._.CreateTime">
            <summary>创建时间</summary>
        </member>
        <member name="F:XCode.Membership.Menu._.UpdateUser">
            <summary>更新者</summary>
        </member>
        <member name="F:XCode.Membership.Menu._.UpdateUserID">
            <summary>更新用户</summary>
        </member>
        <member name="F:XCode.Membership.Menu._.UpdateIP">
            <summary>更新地址</summary>
        </member>
        <member name="F:XCode.Membership.Menu._.UpdateTime">
            <summary>更新时间</summary>
        </member>
        <member name="F:XCode.Membership.Menu._.Remark">
            <summary>备注</summary>
        </member>
        <member name="T:XCode.Membership.Menu.__">
            <summary>取得菜单字段名称的快捷方式</summary>
        </member>
        <member name="F:XCode.Membership.Menu.__.ID">
            <summary>编号</summary>
        </member>
        <member name="F:XCode.Membership.Menu.__.Name">
            <summary>名称</summary>
        </member>
        <member name="F:XCode.Membership.Menu.__.DisplayName">
            <summary>显示名</summary>
        </member>
        <member name="F:XCode.Membership.Menu.__.FullName">
            <summary>全名</summary>
        </member>
        <member name="F:XCode.Membership.Menu.__.ParentID">
            <summary>父编号</summary>
        </member>
        <member name="F:XCode.Membership.Menu.__.Url">
            <summary>链接</summary>
        </member>
        <member name="F:XCode.Membership.Menu.__.Sort">
            <summary>排序</summary>
        </member>
        <member name="F:XCode.Membership.Menu.__.Icon">
            <summary>图标</summary>
        </member>
        <member name="F:XCode.Membership.Menu.__.Visible">
            <summary>可见</summary>
        </member>
        <member name="F:XCode.Membership.Menu.__.Necessary">
            <summary>必要。必要的菜单，必须至少有角色拥有这些权限，如果没有则自动授权给系统角色</summary>
        </member>
        <member name="F:XCode.Membership.Menu.__.NewWindow">
            <summary>新窗口。新窗口打开链接</summary>
        </member>
        <member name="F:XCode.Membership.Menu.__.Permission">
            <summary>权限子项。逗号分隔，每个权限子项名值竖线分隔</summary>
        </member>
        <member name="F:XCode.Membership.Menu.__.Ex1">
            <summary>扩展1</summary>
        </member>
        <member name="F:XCode.Membership.Menu.__.Ex2">
            <summary>扩展2</summary>
        </member>
        <member name="F:XCode.Membership.Menu.__.Ex3">
            <summary>扩展3</summary>
        </member>
        <member name="F:XCode.Membership.Menu.__.Ex4">
            <summary>扩展4</summary>
        </member>
        <member name="F:XCode.Membership.Menu.__.Ex5">
            <summary>扩展5</summary>
        </member>
        <member name="F:XCode.Membership.Menu.__.Ex6">
            <summary>扩展6</summary>
        </member>
        <member name="F:XCode.Membership.Menu.__.CreateUser">
            <summary>创建者</summary>
        </member>
        <member name="F:XCode.Membership.Menu.__.CreateUserID">
            <summary>创建用户</summary>
        </member>
        <member name="F:XCode.Membership.Menu.__.CreateIP">
            <summary>创建地址</summary>
        </member>
        <member name="F:XCode.Membership.Menu.__.CreateTime">
            <summary>创建时间</summary>
        </member>
        <member name="F:XCode.Membership.Menu.__.UpdateUser">
            <summary>更新者</summary>
        </member>
        <member name="F:XCode.Membership.Menu.__.UpdateUserID">
            <summary>更新用户</summary>
        </member>
        <member name="F:XCode.Membership.Menu.__.UpdateIP">
            <summary>更新地址</summary>
        </member>
        <member name="F:XCode.Membership.Menu.__.UpdateTime">
            <summary>更新时间</summary>
        </member>
        <member name="F:XCode.Membership.Menu.__.Remark">
            <summary>备注</summary>
        </member>
        <member name="T:XCode.Membership.Role">
            <summary>角色</summary>
            <summary>角色。业务场景中的岗位，功能权限的集合。不管是用户还是租户，都以角色来管理权限</summary>
        </member>
        <member name="M:XCode.Membership.Role.InitData">
            <summary>首次连接数据库时初始化数据，仅用于实体类重载，用户不应该调用该方法</summary>
        </member>
        <member name="M:XCode.Membership.Role.CheckRole">
            <summary>初始化时执行必要的权限检查，以防万一管理员无法操作</summary>
        </member>
        <member name="M:XCode.Membership.Role.Valid(XCode.DataMethod)">
            <summary>验证并修补数据，返回验证结果，或者通过抛出异常的方式提示验证失败。</summary>
            <param name="method">添删改方法</param>
        </member>
        <member name="M:XCode.Membership.Role.Delete">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Role.Save">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Role.Update">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Role.OnLoad">
            <summary>加载权限字典</summary>
        </member>
        <member name="M:XCode.Membership.Role.OnPropertyChanged(System.String)">
            <summary>如果Permission被修改，则重新加载</summary>
            <param name="fieldName"></param>
        </member>
        <member name="M:XCode.Membership.Role.FindByID(System.Int32)">
            <summary>根据编号查找角色</summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Role.XCode#Membership#IRole#FindByID(System.Int32)">
            <summary>根据编号查找角色</summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Role.FindByName(System.String)">
            <summary>根据名称查找角色</summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="P:XCode.Membership.Role.Permissions">
            <summary>本角色权限集合</summary>
        </member>
        <member name="M:XCode.Membership.Role.Has(System.Int32,XCode.Membership.PermissionFlags)">
            <summary>是否拥有指定资源的指定权限</summary>
            <param name="resid"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Role.Get(System.Int32)">
            <summary>获取权限</summary>
            <param name="resid"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Role.Set(System.Int32,XCode.Membership.PermissionFlags)">
            <summary>设置该角色拥有指定资源的指定权限</summary>
            <param name="resid"></param>
            <param name="flag"></param>
        </member>
        <member name="M:XCode.Membership.Role.Reset(System.Int32,XCode.Membership.PermissionFlags)">
            <summary>重置该角色指定的权限</summary>
            <param name="resid"></param>
            <param name="flag"></param>
        </member>
        <member name="M:XCode.Membership.Role.CheckValid(System.Int32[])">
            <summary>检查是否有无效权限项，有则删除</summary>
            <param name="resids"></param>
        </member>
        <member name="P:XCode.Membership.Role.Resources">
            <summary>当前角色拥有的资源</summary>
        </member>
        <member name="M:XCode.Membership.Role.GetOrAdd(System.String)">
            <summary>根据名称查找角色，若不存在则创建</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Role.XCode#Membership#IRole#GetOrAdd(System.String)">
            <summary>根据名称查找角色，若不存在则创建</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Membership.Role.Add(System.String,System.Boolean,System.String)">
            <summary>添加角色，如果存在，则直接返回，否则创建</summary>
            <param name="name"></param>
            <param name="issys"></param>
            <param name="remark"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.Membership.Role.ID">
            <summary>编号</summary>
        </member>
        <member name="P:XCode.Membership.Role.Name">
            <summary>名称</summary>
        </member>
        <member name="P:XCode.Membership.Role.Enable">
            <summary>启用</summary>
        </member>
        <member name="P:XCode.Membership.Role.IsSystem">
            <summary>系统。用于业务系统开发使用，不受数据权限约束，禁止修改名称或删除</summary>
        </member>
        <member name="P:XCode.Membership.Role.Permission">
            <summary>权限。对不同资源的权限，逗号分隔，每个资源的权限子项竖线分隔</summary>
        </member>
        <member name="P:XCode.Membership.Role.Sort">
            <summary>排序</summary>
        </member>
        <member name="P:XCode.Membership.Role.Ex1">
            <summary>扩展1</summary>
        </member>
        <member name="P:XCode.Membership.Role.Ex2">
            <summary>扩展2</summary>
        </member>
        <member name="P:XCode.Membership.Role.Ex3">
            <summary>扩展3</summary>
        </member>
        <member name="P:XCode.Membership.Role.Ex4">
            <summary>扩展4</summary>
        </member>
        <member name="P:XCode.Membership.Role.Ex5">
            <summary>扩展5</summary>
        </member>
        <member name="P:XCode.Membership.Role.Ex6">
            <summary>扩展6</summary>
        </member>
        <member name="P:XCode.Membership.Role.CreateUser">
            <summary>创建者</summary>
        </member>
        <member name="P:XCode.Membership.Role.CreateUserID">
            <summary>创建用户</summary>
        </member>
        <member name="P:XCode.Membership.Role.CreateIP">
            <summary>创建地址</summary>
        </member>
        <member name="P:XCode.Membership.Role.CreateTime">
            <summary>创建时间</summary>
        </member>
        <member name="P:XCode.Membership.Role.UpdateUser">
            <summary>更新者</summary>
        </member>
        <member name="P:XCode.Membership.Role.UpdateUserID">
            <summary>更新用户</summary>
        </member>
        <member name="P:XCode.Membership.Role.UpdateIP">
            <summary>更新地址</summary>
        </member>
        <member name="P:XCode.Membership.Role.UpdateTime">
            <summary>更新时间</summary>
        </member>
        <member name="P:XCode.Membership.Role.Remark">
            <summary>备注</summary>
        </member>
        <member name="M:XCode.Membership.Role.Copy(XCode.Membership.RoleModel)">
            <summary>拷贝模型对象</summary>
            <param name="model">模型</param>
        </member>
        <member name="P:XCode.Membership.Role.Item(System.String)">
            <summary>获取/设置 字段值</summary>
            <param name="name">字段名</param>
            <returns></returns>
        </member>
        <member name="T:XCode.Membership.Role._">
            <summary>取得角色字段信息的快捷方式</summary>
        </member>
        <member name="F:XCode.Membership.Role._.ID">
            <summary>编号</summary>
        </member>
        <member name="F:XCode.Membership.Role._.Name">
            <summary>名称</summary>
        </member>
        <member name="F:XCode.Membership.Role._.Enable">
            <summary>启用</summary>
        </member>
        <member name="F:XCode.Membership.Role._.IsSystem">
            <summary>系统。用于业务系统开发使用，不受数据权限约束，禁止修改名称或删除</summary>
        </member>
        <member name="F:XCode.Membership.Role._.Permission">
            <summary>权限。对不同资源的权限，逗号分隔，每个资源的权限子项竖线分隔</summary>
        </member>
        <member name="F:XCode.Membership.Role._.Sort">
            <summary>排序</summary>
        </member>
        <member name="F:XCode.Membership.Role._.Ex1">
            <summary>扩展1</summary>
        </member>
        <member name="F:XCode.Membership.Role._.Ex2">
            <summary>扩展2</summary>
        </member>
        <member name="F:XCode.Membership.Role._.Ex3">
            <summary>扩展3</summary>
        </member>
        <member name="F:XCode.Membership.Role._.Ex4">
            <summary>扩展4</summary>
        </member>
        <member name="F:XCode.Membership.Role._.Ex5">
            <summary>扩展5</summary>
        </member>
        <member name="F:XCode.Membership.Role._.Ex6">
            <summary>扩展6</summary>
        </member>
        <member name="F:XCode.Membership.Role._.CreateUser">
            <summary>创建者</summary>
        </member>
        <member name="F:XCode.Membership.Role._.CreateUserID">
            <summary>创建用户</summary>
        </member>
        <member name="F:XCode.Membership.Role._.CreateIP">
            <summary>创建地址</summary>
        </member>
        <member name="F:XCode.Membership.Role._.CreateTime">
            <summary>创建时间</summary>
        </member>
        <member name="F:XCode.Membership.Role._.UpdateUser">
            <summary>更新者</summary>
        </member>
        <member name="F:XCode.Membership.Role._.UpdateUserID">
            <summary>更新用户</summary>
        </member>
        <member name="F:XCode.Membership.Role._.UpdateIP">
            <summary>更新地址</summary>
        </member>
        <member name="F:XCode.Membership.Role._.UpdateTime">
            <summary>更新时间</summary>
        </member>
        <member name="F:XCode.Membership.Role._.Remark">
            <summary>备注</summary>
        </member>
        <member name="T:XCode.Membership.Role.__">
            <summary>取得角色字段名称的快捷方式</summary>
        </member>
        <member name="F:XCode.Membership.Role.__.ID">
            <summary>编号</summary>
        </member>
        <member name="F:XCode.Membership.Role.__.Name">
            <summary>名称</summary>
        </member>
        <member name="F:XCode.Membership.Role.__.Enable">
            <summary>启用</summary>
        </member>
        <member name="F:XCode.Membership.Role.__.IsSystem">
            <summary>系统。用于业务系统开发使用，不受数据权限约束，禁止修改名称或删除</summary>
        </member>
        <member name="F:XCode.Membership.Role.__.Permission">
            <summary>权限。对不同资源的权限，逗号分隔，每个资源的权限子项竖线分隔</summary>
        </member>
        <member name="F:XCode.Membership.Role.__.Sort">
            <summary>排序</summary>
        </member>
        <member name="F:XCode.Membership.Role.__.Ex1">
            <summary>扩展1</summary>
        </member>
        <member name="F:XCode.Membership.Role.__.Ex2">
            <summary>扩展2</summary>
        </member>
        <member name="F:XCode.Membership.Role.__.Ex3">
            <summary>扩展3</summary>
        </member>
        <member name="F:XCode.Membership.Role.__.Ex4">
            <summary>扩展4</summary>
        </member>
        <member name="F:XCode.Membership.Role.__.Ex5">
            <summary>扩展5</summary>
        </member>
        <member name="F:XCode.Membership.Role.__.Ex6">
            <summary>扩展6</summary>
        </member>
        <member name="F:XCode.Membership.Role.__.CreateUser">
            <summary>创建者</summary>
        </member>
        <member name="F:XCode.Membership.Role.__.CreateUserID">
            <summary>创建用户</summary>
        </member>
        <member name="F:XCode.Membership.Role.__.CreateIP">
            <summary>创建地址</summary>
        </member>
        <member name="F:XCode.Membership.Role.__.CreateTime">
            <summary>创建时间</summary>
        </member>
        <member name="F:XCode.Membership.Role.__.UpdateUser">
            <summary>更新者</summary>
        </member>
        <member name="F:XCode.Membership.Role.__.UpdateUserID">
            <summary>更新用户</summary>
        </member>
        <member name="F:XCode.Membership.Role.__.UpdateIP">
            <summary>更新地址</summary>
        </member>
        <member name="F:XCode.Membership.Role.__.UpdateTime">
            <summary>更新时间</summary>
        </member>
        <member name="F:XCode.Membership.Role.__.Remark">
            <summary>备注</summary>
        </member>
        <member name="T:XCode.Membership.Department">
            <summary>部门。组织机构，多级树状结构</summary>
            <summary>部门。组织机构，多级树状结构，支持多租户</summary>
        </member>
        <member name="M:XCode.Membership.Department.Valid(XCode.DataMethod)">
            <summary>验证并修补数据，返回验证结果，或者通过抛出异常的方式提示验证失败。</summary>
            <param name="method">添删改方法</param>
        </member>
        <member name="M:XCode.Membership.Department.InitData">
            <summary>首次连接数据库时初始化数据，仅用于实体类重载，用户不应该调用该方法</summary>
        </member>
        <member name="M:XCode.Membership.Department.Add(System.String,System.String,System.Int32)">
            <summary>添加用户，如果存在则直接返回</summary>
            <param name="name"></param>
            <param name="code"></param>
            <param name="parentid"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.Membership.Department.Parent">
            <summary>父级</summary>
        </member>
        <member name="P:XCode.Membership.Department.ParentName">
            <summary>父级</summary>
        </member>
        <member name="P:XCode.Membership.Department.ParentPath">
            <summary>父级路径</summary>
        </member>
        <member name="P:XCode.Membership.Department.Path">
            <summary>路径</summary>
        </member>
        <member name="M:XCode.Membership.Department.FindByID(System.Int32)">
            <summary>根据编号查找</summary>
            <param name="id">编号</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:XCode.Membership.Department.FindAllByName(System.String)">
            <summary>根据名称查找</summary>
            <param name="name">名称</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:XCode.Membership.Department.FindByNameAndParentID(System.String,System.Int32)">
            <summary>根据名称、父级查找</summary>
            <param name="name">名称</param>
            <param name="parentid">父级</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:XCode.Membership.Department.FindByCode(System.String)">
            <summary>根据代码查找</summary>
            <param name="code">代码</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:XCode.Membership.Department.FindAllByParentIDAndName(System.Int32,System.String)">
            <summary>根据父级、名称查找</summary>
            <param name="parentId">父级</param>
            <param name="name">名称</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:XCode.Membership.Department.FindAllByCode(System.String)">
            <summary>根据代码查找</summary>
            <param name="code">代码</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:XCode.Membership.Department.FindAllByTenantId(System.Int32)">
            <summary>根据租户查找</summary>
            <param name="tenantId">租户</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:XCode.Membership.Department.Search(System.Int32,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,NewLife.Data.PageParameter)">
            <summary>高级搜索</summary>
            <param name="parentId"></param>
            <param name="enable"></param>
            <param name="visible"></param>
            <param name="key"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.Membership.Department.ID">
            <summary>编号</summary>
        </member>
        <member name="P:XCode.Membership.Department.TenantId">
            <summary>租户</summary>
        </member>
        <member name="P:XCode.Membership.Department.Code">
            <summary>代码</summary>
        </member>
        <member name="P:XCode.Membership.Department.Name">
            <summary>名称</summary>
        </member>
        <member name="P:XCode.Membership.Department.FullName">
            <summary>全名</summary>
        </member>
        <member name="P:XCode.Membership.Department.ParentID">
            <summary>父级</summary>
        </member>
        <member name="P:XCode.Membership.Department.Level">
            <summary>层级。树状结构的层级</summary>
        </member>
        <member name="P:XCode.Membership.Department.Sort">
            <summary>排序。同级内排序</summary>
        </member>
        <member name="P:XCode.Membership.Department.Enable">
            <summary>启用</summary>
        </member>
        <member name="P:XCode.Membership.Department.Visible">
            <summary>可见</summary>
        </member>
        <member name="P:XCode.Membership.Department.ManagerId">
            <summary>管理者</summary>
        </member>
        <member name="P:XCode.Membership.Department.Ex1">
            <summary>扩展1</summary>
        </member>
        <member name="P:XCode.Membership.Department.Ex2">
            <summary>扩展2</summary>
        </member>
        <member name="P:XCode.Membership.Department.Ex3">
            <summary>扩展3</summary>
        </member>
        <member name="P:XCode.Membership.Department.Ex4">
            <summary>扩展4</summary>
        </member>
        <member name="P:XCode.Membership.Department.Ex5">
            <summary>扩展5</summary>
        </member>
        <member name="P:XCode.Membership.Department.Ex6">
            <summary>扩展6</summary>
        </member>
        <member name="P:XCode.Membership.Department.CreateUser">
            <summary>创建者</summary>
        </member>
        <member name="P:XCode.Membership.Department.CreateUserID">
            <summary>创建用户</summary>
        </member>
        <member name="P:XCode.Membership.Department.CreateIP">
            <summary>创建地址</summary>
        </member>
        <member name="P:XCode.Membership.Department.CreateTime">
            <summary>创建时间</summary>
        </member>
        <member name="P:XCode.Membership.Department.UpdateUser">
            <summary>更新者</summary>
        </member>
        <member name="P:XCode.Membership.Department.UpdateUserID">
            <summary>更新用户</summary>
        </member>
        <member name="P:XCode.Membership.Department.UpdateIP">
            <summary>更新地址</summary>
        </member>
        <member name="P:XCode.Membership.Department.UpdateTime">
            <summary>更新时间</summary>
        </member>
        <member name="P:XCode.Membership.Department.Remark">
            <summary>备注</summary>
        </member>
        <member name="M:XCode.Membership.Department.Copy(XCode.Membership.DepartmentModel)">
            <summary>拷贝模型对象</summary>
            <param name="model">模型</param>
        </member>
        <member name="P:XCode.Membership.Department.Item(System.String)">
            <summary>获取/设置 字段值</summary>
            <param name="name">字段名</param>
            <returns></returns>
        </member>
        <member name="P:XCode.Membership.Department.Tenant">
            <summary>租户</summary>
        </member>
        <member name="P:XCode.Membership.Department.TenantName">
            <summary>租户</summary>
        </member>
        <member name="P:XCode.Membership.Department.Manager">
            <summary>管理者</summary>
        </member>
        <member name="P:XCode.Membership.Department.ManagerName">
            <summary>管理者</summary>
        </member>
        <member name="T:XCode.Membership.Department._">
            <summary>取得部门字段信息的快捷方式</summary>
        </member>
        <member name="F:XCode.Membership.Department._.ID">
            <summary>编号</summary>
        </member>
        <member name="F:XCode.Membership.Department._.TenantId">
            <summary>租户</summary>
        </member>
        <member name="F:XCode.Membership.Department._.Code">
            <summary>代码</summary>
        </member>
        <member name="F:XCode.Membership.Department._.Name">
            <summary>名称</summary>
        </member>
        <member name="F:XCode.Membership.Department._.FullName">
            <summary>全名</summary>
        </member>
        <member name="F:XCode.Membership.Department._.ParentID">
            <summary>父级</summary>
        </member>
        <member name="F:XCode.Membership.Department._.Level">
            <summary>层级。树状结构的层级</summary>
        </member>
        <member name="F:XCode.Membership.Department._.Sort">
            <summary>排序。同级内排序</summary>
        </member>
        <member name="F:XCode.Membership.Department._.Enable">
            <summary>启用</summary>
        </member>
        <member name="F:XCode.Membership.Department._.Visible">
            <summary>可见</summary>
        </member>
        <member name="F:XCode.Membership.Department._.ManagerId">
            <summary>管理者</summary>
        </member>
        <member name="F:XCode.Membership.Department._.Ex1">
            <summary>扩展1</summary>
        </member>
        <member name="F:XCode.Membership.Department._.Ex2">
            <summary>扩展2</summary>
        </member>
        <member name="F:XCode.Membership.Department._.Ex3">
            <summary>扩展3</summary>
        </member>
        <member name="F:XCode.Membership.Department._.Ex4">
            <summary>扩展4</summary>
        </member>
        <member name="F:XCode.Membership.Department._.Ex5">
            <summary>扩展5</summary>
        </member>
        <member name="F:XCode.Membership.Department._.Ex6">
            <summary>扩展6</summary>
        </member>
        <member name="F:XCode.Membership.Department._.CreateUser">
            <summary>创建者</summary>
        </member>
        <member name="F:XCode.Membership.Department._.CreateUserID">
            <summary>创建用户</summary>
        </member>
        <member name="F:XCode.Membership.Department._.CreateIP">
            <summary>创建地址</summary>
        </member>
        <member name="F:XCode.Membership.Department._.CreateTime">
            <summary>创建时间</summary>
        </member>
        <member name="F:XCode.Membership.Department._.UpdateUser">
            <summary>更新者</summary>
        </member>
        <member name="F:XCode.Membership.Department._.UpdateUserID">
            <summary>更新用户</summary>
        </member>
        <member name="F:XCode.Membership.Department._.UpdateIP">
            <summary>更新地址</summary>
        </member>
        <member name="F:XCode.Membership.Department._.UpdateTime">
            <summary>更新时间</summary>
        </member>
        <member name="F:XCode.Membership.Department._.Remark">
            <summary>备注</summary>
        </member>
        <member name="T:XCode.Membership.Department.__">
            <summary>取得部门字段名称的快捷方式</summary>
        </member>
        <member name="F:XCode.Membership.Department.__.ID">
            <summary>编号</summary>
        </member>
        <member name="F:XCode.Membership.Department.__.TenantId">
            <summary>租户</summary>
        </member>
        <member name="F:XCode.Membership.Department.__.Code">
            <summary>代码</summary>
        </member>
        <member name="F:XCode.Membership.Department.__.Name">
            <summary>名称</summary>
        </member>
        <member name="F:XCode.Membership.Department.__.FullName">
            <summary>全名</summary>
        </member>
        <member name="F:XCode.Membership.Department.__.ParentID">
            <summary>父级</summary>
        </member>
        <member name="F:XCode.Membership.Department.__.Level">
            <summary>层级。树状结构的层级</summary>
        </member>
        <member name="F:XCode.Membership.Department.__.Sort">
            <summary>排序。同级内排序</summary>
        </member>
        <member name="F:XCode.Membership.Department.__.Enable">
            <summary>启用</summary>
        </member>
        <member name="F:XCode.Membership.Department.__.Visible">
            <summary>可见</summary>
        </member>
        <member name="F:XCode.Membership.Department.__.ManagerId">
            <summary>管理者</summary>
        </member>
        <member name="F:XCode.Membership.Department.__.Ex1">
            <summary>扩展1</summary>
        </member>
        <member name="F:XCode.Membership.Department.__.Ex2">
            <summary>扩展2</summary>
        </member>
        <member name="F:XCode.Membership.Department.__.Ex3">
            <summary>扩展3</summary>
        </member>
        <member name="F:XCode.Membership.Department.__.Ex4">
            <summary>扩展4</summary>
        </member>
        <member name="F:XCode.Membership.Department.__.Ex5">
            <summary>扩展5</summary>
        </member>
        <member name="F:XCode.Membership.Department.__.Ex6">
            <summary>扩展6</summary>
        </member>
        <member name="F:XCode.Membership.Department.__.CreateUser">
            <summary>创建者</summary>
        </member>
        <member name="F:XCode.Membership.Department.__.CreateUserID">
            <summary>创建用户</summary>
        </member>
        <member name="F:XCode.Membership.Department.__.CreateIP">
            <summary>创建地址</summary>
        </member>
        <member name="F:XCode.Membership.Department.__.CreateTime">
            <summary>创建时间</summary>
        </member>
        <member name="F:XCode.Membership.Department.__.UpdateUser">
            <summary>更新者</summary>
        </member>
        <member name="F:XCode.Membership.Department.__.UpdateUserID">
            <summary>更新用户</summary>
        </member>
        <member name="F:XCode.Membership.Department.__.UpdateIP">
            <summary>更新地址</summary>
        </member>
        <member name="F:XCode.Membership.Department.__.UpdateTime">
            <summary>更新时间</summary>
        </member>
        <member name="F:XCode.Membership.Department.__.Remark">
            <summary>备注</summary>
        </member>
        <member name="T:XCode.Model.BatchFinder`2">
            <summary>实体对象批量查找器</summary>
            <remarks>
            送入一批主键，然后逐个查询使用
            </remarks>
        </member>
        <member name="P:XCode.Model.BatchFinder`2.Factory">
            <summary>实体工厂</summary>
        </member>
        <member name="P:XCode.Model.BatchFinder`2.Keys">
            <summary>主键集合</summary>
        </member>
        <member name="P:XCode.Model.BatchFinder`2.Callback">
            <summary>批量查询数据的回调方法。支持外部自定义，内部默认使用In主键的操作</summary>
        </member>
        <member name="P:XCode.Model.BatchFinder`2.Cache">
            <summary>缓存数据</summary>
        </member>
        <member name="P:XCode.Model.BatchFinder`2.BatchSize">
            <summary>批大小。默认500</summary>
        </member>
        <member name="M:XCode.Model.BatchFinder`2.#ctor">
            <summary>实例化批量查找器</summary>
        </member>
        <member name="M:XCode.Model.BatchFinder`2.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>实例化批量查找器，并添加keys</summary>
            <param name="keys"></param>
        </member>
        <member name="M:XCode.Model.BatchFinder`2.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>添加Keys。可能多次调用，需要去重</summary>
            <param name="keys"></param>
        </member>
        <member name="M:XCode.Model.BatchFinder`2.FindByKey(`0)">
            <summary>根据Key查找对象</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.Model.BatchFinder`2.Item(`0)">
            <summary>索引访问器</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.Model.BatchOption">
            <summary>批操作选项</summary>
        </member>
        <member name="P:XCode.Model.BatchOption.Columns">
            <summary>字段集合。为空时表示使用所有字段</summary>
        </member>
        <member name="P:XCode.Model.BatchOption.UpdateColumns">
            <summary>要更新的字段。用于Update/Upsert，默认脏数据</summary>
        </member>
        <member name="P:XCode.Model.BatchOption.AddColumns">
            <summary>要累加更新的字段。用于Update/Upsert，默认累加</summary>
        </member>
        <member name="P:XCode.Model.BatchOption.FullInsert">
            <summary>是否完全插入所有字段。用于Insert/Upsert，默认false表示不插入没有脏数据的字段</summary>
        </member>
        <member name="T:XCode.Model.EntityActions">
            <summary>实体动作</summary>
        </member>
        <member name="F:XCode.Model.EntityActions.Save">
            <summary>保存</summary>
        </member>
        <member name="F:XCode.Model.EntityActions.Insert">
            <summary>插入</summary>
        </member>
        <member name="F:XCode.Model.EntityActions.Update">
            <summary>更新</summary>
        </member>
        <member name="F:XCode.Model.EntityActions.Upsert">
            <summary>插入或更新</summary>
        </member>
        <member name="F:XCode.Model.EntityActions.Delete">
            <summary>删除</summary>
        </member>
        <member name="T:XCode.Model.EntityDeferredQueue">
            <summary>实体延迟队列。缓冲合并对象，批量处理</summary>
        </member>
        <member name="P:XCode.Model.EntityDeferredQueue.Action">
            <summary>实体动作。默认Save保存</summary>
        </member>
        <member name="P:XCode.Model.EntityDeferredQueue.Session">
            <summary>数据会话，分表分库时使用</summary>
        </member>
        <member name="P:XCode.Model.EntityDeferredQueue.MaxSingle">
            <summary>最大单行保存大小。大于该值时才采用批量保存，默认2</summary>
        </member>
        <member name="M:XCode.Model.EntityDeferredQueue.Process(System.Collections.Generic.IList{System.Object})">
            <summary>处理一批</summary>
            <param name="list"></param>
        </member>
        <member name="T:XCode.Model.WhereBuilder">
            <summary>查询条件构建器。主要用于构建数据权限等扩展性查询</summary>
            <remarks>
            输入文本型变量表达式，分析并计算得到条件表达式。
            例如：
            输入 CreateUserID={$User.ID}， 输出 _.CreateUserID==Data["User"].GetValue("ID")
            输入 StartSiteId in {#SiteIds} or CityId={#CityId}，输出 _.StartSiteId.In(Data2["SiteIds"]) | _.CityId==Data2["CityId"]
            </remarks>
        </member>
        <member name="P:XCode.Model.WhereBuilder.Factory">
            <summary>实体工厂</summary>
        </member>
        <member name="P:XCode.Model.WhereBuilder.Expression">
            <summary>表达式语句</summary>
        </member>
        <member name="P:XCode.Model.WhereBuilder.Data">
            <summary>数据源。{$name}访问</summary>
        </member>
        <member name="P:XCode.Model.WhereBuilder.Data2">
            <summary>第二数据源。{#name}访问</summary>
        </member>
        <member name="M:XCode.Model.WhereBuilder.SetData(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>设置数据源</summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:XCode.Model.WhereBuilder.SetData2(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>设置第二数据源</summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:XCode.Model.WhereBuilder.GetExpression">
            <summary>计算获取表达式</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Model.WhereBuilder.ParseExpression(System.String)">
            <summary>递归分解表达式</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Model.WhereBuilder.Eval(XCode.IEntity)">
            <summary>评估指定实体是否满足表达式要求</summary>
            <param name="entity">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Model.WhereBuilder.EvalParse(System.String,XCode.IEntity)">
            <summary>递归分解表达式</summary>
            <param name="value"></param>
            <param name="entity">实体对象</param>
            <returns></returns>
        </member>
        <member name="T:XCode.ConcatExpression">
            <summary>逗号连接表达式</summary>
        </member>
        <member name="P:XCode.ConcatExpression.Expressions">
            <summary>内置表达式集合</summary>
        </member>
        <member name="P:XCode.ConcatExpression.IsEmpty">
            <summary>是否为空</summary>
        </member>
        <member name="M:XCode.ConcatExpression.#ctor">
            <summary>实例化</summary>
        </member>
        <member name="M:XCode.ConcatExpression.#ctor(System.String)">
            <summary>实例化</summary>
            <param name="exp"></param>
        </member>
        <member name="M:XCode.ConcatExpression.And(System.String)">
            <summary>增加</summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.ConcatExpression.And(XCode.Expression)">
            <summary>增加</summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.ConcatExpression.GetString(XCode.DataAccessLayer.IDatabase,System.Text.StringBuilder,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>已重载。</summary>
            <param name="db">数据库</param>
            <param name="builder">字符串构建器</param>
            <param name="ps">参数字典</param>
            <returns></returns>
        </member>
        <member name="M:XCode.ConcatExpression.op_BitwiseAnd(XCode.ConcatExpression,System.String)">
            <summary>重载运算符实现And操作，同时通过布尔型支持AndIf</summary>
            <param name="exp"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.ConcatExpression.op_BitwiseAnd(XCode.ConcatExpression,XCode.Expression)">
            <summary>重载运算符实现And操作，同时通过布尔型支持AndIf</summary>
            <param name="exp"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.ConcatExpression.op_BitwiseAnd(XCode.ConcatExpression,XCode.Configuration.FieldItem)">
            <summary>重载运算符实现And操作，同时通过布尔型支持AndIf</summary>
            <param name="exp"></param>
            <param name="field">数值</param>
            <returns></returns>
        </member>
        <member name="T:XCode.Expression">
            <summary>表达式基类</summary>
        </member>
        <member name="P:XCode.Expression.Text">
            <summary>文本表达式</summary>
        </member>
        <member name="P:XCode.Expression.IsEmpty">
            <summary>是否为空</summary>
        </member>
        <member name="F:XCode.Expression.Empty">
            <summary>空表达式，一般用于表达式连写</summary>
        </member>
        <member name="M:XCode.Expression.#ctor">
            <summary>实例化简单表达式</summary>
        </member>
        <member name="M:XCode.Expression.#ctor(System.String)">
            <summary>用一段文本实例化简单表达式</summary>
            <param name="value"></param>
        </member>
        <member name="F:XCode.Expression._regOr">
            <summary>用于匹配Or关键字的正则表达式</summary>
        </member>
        <member name="M:XCode.Expression.GetString(XCode.DataAccessLayer.IDatabase,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>获取表达式的文本表示</summary>
            <param name="db">数据库</param>
            <param name="ps">参数字典</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Expression.GetString(XCode.DataAccessLayer.IDatabase,System.Text.StringBuilder,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>获取字符串</summary>
            <param name="db">数据库</param>
            <param name="builder">字符串构建器</param>
            <param name="ps">参数字典</param>
        </member>
        <member name="M:XCode.Expression.ToString">
            <summary>输出该表达式的字符串形式</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Expression.op_Implicit(XCode.Expression)~System.String">
            <summary>类型转换</summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Expression.op_BitwiseAnd(XCode.Expression,XCode.Expression)">
            <summary>重载运算符实现And操作</summary>
            <param name="exp"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Expression.op_BitwiseAnd(XCode.Expression,System.String)">
            <summary>重载运算符实现And操作</summary>
            <param name="exp"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Expression.op_BitwiseOr(XCode.Expression,XCode.Expression)">
            <summary>重载运算符实现Or操作</summary>
            <param name="exp"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Expression.op_BitwiseOr(XCode.Expression,System.String)">
            <summary>重载运算符实现Or操作</summary>
            <param name="exp"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Expression.op_Addition(XCode.Expression,XCode.Expression)">
            <summary>重载运算符实现+操作</summary>
            <param name="exp"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="T:XCode.FieldExpression">
            <summary>字段表达式</summary>
        </member>
        <member name="P:XCode.FieldExpression.Field">
            <summary>字段</summary>
        </member>
        <member name="P:XCode.FieldExpression.Action">
            <summary>动作</summary>
        </member>
        <member name="P:XCode.FieldExpression.Value">
            <summary>值</summary>
        </member>
        <member name="P:XCode.FieldExpression.IsEmpty">
            <summary>是否为空</summary>
        </member>
        <member name="M:XCode.FieldExpression.#ctor(XCode.Configuration.FieldItem)">
            <summary>构造字段表达式</summary>
            <param name="field"></param>
        </member>
        <member name="M:XCode.FieldExpression.#ctor(XCode.Configuration.FieldItem,System.String,System.Object)">
            <summary>构造字段表达式</summary>
            <param name="field"></param>
            <param name="action"></param>
            <param name="value"></param>
        </member>
        <member name="M:XCode.FieldExpression.GetString(XCode.DataAccessLayer.IDatabase,System.Text.StringBuilder,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>已重载。输出字段表达式的字符串形式</summary>
            <param name="db">数据库</param>
            <param name="builder">字符串构建器</param>
            <param name="ps">参数字典</param>
            <returns></returns>
        </member>
        <member name="T:XCode.FormatExpression">
            <summary>格式化表达式。通过字段、格式化字符串和右值去构建表达式</summary>
            <remarks>右值可能为空，比如{0} Is Null</remarks>
        </member>
        <member name="P:XCode.FormatExpression.Field">
            <summary>字段</summary>
        </member>
        <member name="P:XCode.FormatExpression.Format">
            <summary>格式化字符串</summary>
        </member>
        <member name="P:XCode.FormatExpression.Value">
            <summary>操作数</summary>
        </member>
        <member name="P:XCode.FormatExpression.IsEmpty">
            <summary>是否为空</summary>
        </member>
        <member name="M:XCode.FormatExpression.#ctor(XCode.Configuration.FieldItem,System.String,System.Object)">
            <summary>构造格式化表达式</summary>
            <param name="field"></param>
            <param name="format"></param>
            <param name="value"></param>
        </member>
        <member name="M:XCode.FormatExpression.GetString(XCode.DataAccessLayer.IDatabase,System.Text.StringBuilder,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>已重载。输出字段表达式的字符串形式</summary>
            <param name="db">数据库</param>
            <param name="builder">字符串构建器</param>
            <param name="ps">参数字典</param>
            <returns></returns>
        </member>
        <member name="T:XCode.InExpression">
            <summary>格式化表达式。通过字段、格式化字符串和右值去构建表达式</summary>
            <remarks>右值可能为空，比如{0} Is Null</remarks>
        </member>
        <member name="P:XCode.InExpression.Field">
            <summary>字段</summary>
        </member>
        <member name="P:XCode.InExpression.Format">
            <summary>格式化字符串</summary>
        </member>
        <member name="P:XCode.InExpression.Value">
            <summary>操作数</summary>
        </member>
        <member name="P:XCode.InExpression.IsEmpty">
            <summary>是否为空</summary>
        </member>
        <member name="M:XCode.InExpression.#ctor(XCode.Configuration.FieldItem,System.String,System.Object)">
            <summary>构造格式化表达式</summary>
            <param name="field"></param>
            <param name="format"></param>
            <param name="value"></param>
        </member>
        <member name="M:XCode.InExpression.GetString(XCode.DataAccessLayer.IDatabase,System.Text.StringBuilder,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>已重载。输出字段表达式的字符串形式</summary>
            <param name="db">数据库</param>
            <param name="builder">字符串构建器</param>
            <param name="ps">参数字典</param>
            <returns></returns>
        </member>
        <member name="T:XCode.IPModule">
            <summary>IP地址模型</summary>
        </member>
        <member name="T:XCode.IPModule.__">
            <summary>字段名</summary>
        </member>
        <member name="F:XCode.IPModule.__.CreateIP">
            <summary>创建人</summary>
        </member>
        <member name="F:XCode.IPModule.__.UpdateIP">
            <summary>更新人</summary>
        </member>
        <member name="P:XCode.IPModule.AllowEmpty">
            <summary>允许空内容。在没有当前IP信息时，是否允许填充空内容，若允许可能是清空上一次更新IP。默认false</summary>
        </member>
        <member name="M:XCode.IPModule.OnInit(System.Type)">
            <summary>初始化。检查是否匹配</summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.IPModule.OnValid(XCode.IEntity,XCode.DataMethod)">
            <summary>验证数据，自动加上创建和更新的信息</summary>
            <param name="entity"></param>
            <param name="method"></param>
        </member>
        <member name="M:XCode.IPModule.GetIPFieldNames(System.Type)">
            <summary>获取实体类的字段名。带缓存</summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.LikeExpression">
            <summary>模糊搜索表达式。通过字段、格式化字符串和右值去构建表达式</summary>
        </member>
        <member name="P:XCode.LikeExpression.Field">
            <summary>字段</summary>
        </member>
        <member name="P:XCode.LikeExpression.Format">
            <summary>格式化字符串</summary>
        </member>
        <member name="P:XCode.LikeExpression.Value">
            <summary>操作数</summary>
        </member>
        <member name="P:XCode.LikeExpression.IsEmpty">
            <summary>是否为空</summary>
        </member>
        <member name="M:XCode.LikeExpression.#ctor(XCode.Configuration.FieldItem,System.String,System.String)">
            <summary>构造格式化表达式</summary>
            <param name="field"></param>
            <param name="format"></param>
            <param name="value"></param>
        </member>
        <member name="M:XCode.LikeExpression.GetString(XCode.DataAccessLayer.IDatabase,System.Text.StringBuilder,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>已重载。输出字段表达式的字符串形式</summary>
            <param name="db">数据库</param>
            <param name="builder">字符串构建器</param>
            <param name="ps">参数字典</param>
            <returns></returns>
        </member>
        <member name="T:XCode.OrderExpression">
            <summary>排序表达式</summary>
        </member>
        <member name="P:XCode.OrderExpression.Builder">
            <summary>内置字符串</summary>
        </member>
        <member name="P:XCode.OrderExpression.IsEmpty">
            <summary>是否为空</summary>
        </member>
        <member name="M:XCode.OrderExpression.#ctor">
            <summary>实例化</summary>
        </member>
        <member name="M:XCode.OrderExpression.#ctor(System.String)">
            <summary>实例化</summary>
            <param name="exp"></param>
        </member>
        <member name="M:XCode.OrderExpression.And(System.String)">
            <summary>增加</summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.OrderExpression.GetString(XCode.DataAccessLayer.IDatabase,System.Text.StringBuilder,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>已重载。</summary>
            <param name="db">数据库</param>
            <param name="builder">字符串构建器</param>
            <param name="ps">参数字典</param>
            <returns></returns>
        </member>
        <member name="M:XCode.OrderExpression.op_Implicit(XCode.OrderExpression)~System.String">
            <summary>类型转换</summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.OrderExpression.op_BitwiseAnd(XCode.OrderExpression,System.Object)">
            <summary>重载运算符实现And操作</summary>
            <param name="exp"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="T:XCode.TimeModule">
            <summary>时间模型</summary>
        </member>
        <member name="T:XCode.TimeModule.__">
            <summary>字段名</summary>
        </member>
        <member name="F:XCode.TimeModule.__.CreateTime">
            <summary>创建时间</summary>
        </member>
        <member name="F:XCode.TimeModule.__.UpdateTime">
            <summary>更新时间</summary>
        </member>
        <member name="M:XCode.TimeModule.OnInit(System.Type)">
            <summary>初始化。检查是否匹配</summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.TimeModule.OnCreate(XCode.IEntity,System.Boolean)">
            <summary>创建实体对象</summary>
            <param name="entity"></param>
            <param name="forEdit"></param>
        </member>
        <member name="M:XCode.TimeModule.OnValid(XCode.IEntity,XCode.DataMethod)">
            <summary>验证数据，自动加上创建和更新的信息</summary>
            <param name="entity"></param>
            <param name="method"></param>
        </member>
        <member name="T:XCode.TraceModule">
            <summary>链路追踪过滤器。自动给TraceId赋值</summary>
        </member>
        <member name="T:XCode.TraceModule.__">
            <summary>字段名</summary>
        </member>
        <member name="F:XCode.TraceModule.__.TraceId">
            <summary>链路追踪。用于APM性能追踪定位，还原该事件的调用链</summary>
        </member>
        <member name="M:XCode.TraceModule.OnInit(System.Type)">
            <summary>初始化。检查是否匹配</summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.TraceModule.OnValid(XCode.IEntity,XCode.DataMethod)">
            <summary>验证数据，自动加上创建和更新的信息</summary>
            <param name="entity"></param>
            <param name="method"></param>
        </member>
        <member name="T:XCode.UserModule">
            <summary>用户模型</summary>
        </member>
        <member name="T:XCode.UserModule.__">
            <summary>字段名</summary>
        </member>
        <member name="F:XCode.UserModule.__.CreateUserID">
            <summary>创建人</summary>
        </member>
        <member name="F:XCode.UserModule.__.CreateUser">
            <summary>创建人</summary>
        </member>
        <member name="F:XCode.UserModule.__.UpdateUserID">
            <summary>更新人</summary>
        </member>
        <member name="F:XCode.UserModule.__.UpdateUser">
            <summary>更新人</summary>
        </member>
        <member name="P:XCode.UserModule.Provider">
            <summary>当前用户提供者</summary>
        </member>
        <member name="P:XCode.UserModule.AllowEmpty">
            <summary>允许空内容。在没有当前用户信息时，是否允许填充空内容，若允许可能是清空上一次更新人。默认false</summary>
        </member>
        <member name="M:XCode.UserModule.#ctor">
            <summary>实例化</summary>
        </member>
        <member name="M:XCode.UserModule.#ctor(XCode.Membership.IManageProvider)">
            <summary>实例化</summary>
            <param name="provider"></param>
        </member>
        <member name="M:XCode.UserModule.OnInit(System.Type)">
            <summary>初始化。检查是否匹配</summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.UserModule.OnCreate(XCode.IEntity,System.Boolean)">
            <summary>创建实体对象</summary>
            <param name="entity"></param>
            <param name="forEdit"></param>
        </member>
        <member name="M:XCode.UserModule.OnValid(XCode.IEntity,XCode.DataMethod)">
            <summary>验证数据，自动加上创建和更新的信息</summary>
            <param name="entity"></param>
            <param name="method"></param>
        </member>
        <member name="T:XCode.Operator">
            <summary>操作符</summary>
        </member>
        <member name="F:XCode.Operator.And">
            <summary>与，交集</summary>
        </member>
        <member name="F:XCode.Operator.Or">
            <summary>或，并集</summary>
        </member>
        <member name="F:XCode.Operator.Space">
            <summary>空格</summary>
        </member>
        <member name="T:XCode.WhereExpression">
            <summary>条件表达式</summary>
        </member>
        <member name="P:XCode.WhereExpression.Left">
            <summary>左节点</summary>
        </member>
        <member name="P:XCode.WhereExpression.Right">
            <summary>右节点</summary>
        </member>
        <member name="P:XCode.WhereExpression.Operator">
            <summary>是否And</summary>
        </member>
        <member name="P:XCode.WhereExpression.IsEmpty">
            <summary>是否为空</summary>
        </member>
        <member name="M:XCode.WhereExpression.#ctor">
            <summary>实例化</summary>
        </member>
        <member name="M:XCode.WhereExpression.#ctor(XCode.Expression,XCode.Operator,XCode.Expression)">
            <summary>实例化</summary>
            <param name="left"></param>
            <param name="op"></param>
            <param name="right"></param>
        </member>
        <member name="M:XCode.WhereExpression.GetString(XCode.DataAccessLayer.IDatabase,System.Text.StringBuilder,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>输出条件表达式的字符串表示，遍历表达式集合并拼接起来</summary>
            <param name="db">数据库</param>
            <param name="builder"></param>
            <param name="ps">参数字典</param>
            <returns></returns>
        </member>
        <member name="M:XCode.WhereExpression.Flatten(XCode.Expression)">
            <summary>拉平表达式，避免空子项</summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.WhereExpression.GetEnumerator">
            <summary>枚举</summary>
            <returns></returns>
        </member>
        <member name="T:XCode.Setting">
            <summary>XCode设置</summary>
        </member>
        <member name="T:XCode.XCodeSetting">
            <summary>XCode设置</summary>
        </member>
        <member name="P:XCode.XCodeSetting.Debug">
            <summary>是否启用调试。默认启用</summary>
        </member>
        <member name="P:XCode.XCodeSetting.ShowSQL">
            <summary>是否输出SQL语句，默认启用</summary>
        </member>
        <member name="P:XCode.XCodeSetting.SQLPath">
            <summary>设置SQL输出的单独目录，默认为空，SQL输出到当前日志中。生产环境建议输出到站点外单独的SqlLog目录</summary>
        </member>
        <member name="P:XCode.XCodeSetting.TraceSQLTime">
            <summary>跟踪SQL执行时间，大于该阀值将输出日志，默认1000毫秒</summary>
        </member>
        <member name="P:XCode.XCodeSetting.SQLMaxLength">
            <summary>SQL最大长度，输出日志时的SQL最大长度，超长截断，默认4096，不截断用0</summary>
        </member>
        <member name="P:XCode.XCodeSetting.UseParameter">
            <summary>参数化添删改查。默认关闭</summary>
        </member>
        <member name="P:XCode.XCodeSetting.BatchSize">
            <summary>批大小。用于批量操作数据，抽取、删除、备份、恢复，默认5000</summary>
        </member>
        <member name="P:XCode.XCodeSetting.CommandTimeout">
            <summary>命令超时。查询执行超时时间，默认0秒不限制</summary>
        </member>
        <member name="P:XCode.XCodeSetting.RetryOnFailure">
            <summary>失败重试。执行命令超时后的重试次数，默认0不重试</summary>
        </member>
        <member name="P:XCode.XCodeSetting.DataCacheExpire">
            <summary>数据层缓存。根据sql做缓存，默认0秒</summary>
        </member>
        <member name="P:XCode.XCodeSetting.EntityCacheExpire">
            <summary>实体缓存过期。整表缓存实体列表，默认10秒</summary>
        </member>
        <member name="P:XCode.XCodeSetting.SingleCacheExpire">
            <summary>单对象缓存过期。按主键缓存实体，默认10秒</summary>
        </member>
        <member name="P:XCode.XCodeSetting.ExtendExpire">
            <summary>扩展属性过期。扩展属性Extends缓存，默认10秒</summary>
        </member>
        <member name="P:XCode.XCodeSetting.FieldCacheExpire">
            <summary>字段缓存过期。缓存表中分类型字段的分组数据，默认3600秒</summary>
        </member>
        <member name="P:XCode.XCodeSetting.Migration">
            <summary>反向工程。Off 关闭；ReadOnly 只读不执行；On 打开，仅新建；Full 完全，修改删除</summary>
        </member>
        <member name="P:XCode.XCodeSetting.NameFormat">
            <summary></summary>
        </member>
        <member name="P:XCode.XCodeSetting.FastCountMin">
            <summary>快速统计最小数据量</summary>
        </member>
        <member name="T:XCode.Shards.IShardPolicy">
            <summary>分表策略</summary>
        </member>
        <member name="P:XCode.Shards.IShardPolicy.Field">
            <summary>字段</summary>
        </member>
        <member name="M:XCode.Shards.IShardPolicy.Shard(System.Object)">
            <summary>为实体对象、时间、雪花Id等计算分表分库</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Shards.IShardPolicy.Shards(System.DateTime,System.DateTime)">
            <summary>从时间区间中计算多个分表分库</summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Shards.IShardPolicy.Shards(XCode.Expression)">
            <summary>从查询表达式中计算多个分表分库</summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.Shards.ShardModel">
            <summary>分表分库模型</summary>
        </member>
        <member name="P:XCode.Shards.ShardModel.ConnName">
            <summary>连接名</summary>
        </member>
        <member name="P:XCode.Shards.ShardModel.TableName">
            <summary>表名</summary>
        </member>
        <member name="M:XCode.Shards.ShardModel.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="T:XCode.Shards.TimeShardPolicy">
            <summary>时间分表策略</summary>
        </member>
        <member name="P:XCode.Shards.TimeShardPolicy.Factory">
            <summary>实体工厂</summary>
        </member>
        <member name="P:XCode.Shards.TimeShardPolicy.Field">
            <summary>字段</summary>
        </member>
        <member name="P:XCode.Shards.TimeShardPolicy.ConnPolicy">
            <summary>连接名策略。格式化字符串，0位基础连接名，1位时间，如{0}_{1:yyyy}</summary>
        </member>
        <member name="P:XCode.Shards.TimeShardPolicy.TablePolicy">
            <summary>表名策略。格式化字符串，0位基础表名，1位时间，如{0}_{1:yyyyMM}</summary>
        </member>
        <member name="P:XCode.Shards.TimeShardPolicy.Step">
            <summary>时间区间步进。遇到时间区间需要扫描多张表时的时间步进，默认1天</summary>
        </member>
        <member name="M:XCode.Shards.TimeShardPolicy.#ctor">
            <summary>实例化</summary>
        </member>
        <member name="M:XCode.Shards.TimeShardPolicy.#ctor(XCode.Configuration.FieldItem,XCode.IEntityFactory)">
            <summary>指定字段实例化分表策略</summary>
            <param name="field"></param>
            <param name="factory"></param>
        </member>
        <member name="M:XCode.Shards.TimeShardPolicy.#ctor(System.String,XCode.IEntityFactory)">
            <summary>指定字段名和工厂实例化分表策略</summary>
            <param name="fieldName"></param>
            <param name="factory"></param>
        </member>
        <member name="M:XCode.Shards.TimeShardPolicy.Shard(System.Object)">
            <summary>为实体对象、时间、雪花Id等计算分表分库</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Shards.TimeShardPolicy.Shard(XCode.IEntity)">
            <summary>为实体对象计算分表分库</summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Shards.TimeShardPolicy.Shard(System.DateTime)">
            <summary>为时间计算分表分库</summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Shards.TimeShardPolicy.Shards(System.DateTime,System.DateTime)">
            <summary>从时间区间中计算多个分表分库，支持倒序。步进由Step指定，默认1天</summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Shards.TimeShardPolicy.Shards(XCode.Expression)">
            <summary>从查询表达式中计算多个分表分库</summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.Statistics.IStat">
            <summary>统计接口</summary>
        </member>
        <member name="P:XCode.Statistics.IStat.Level">
            <summary>层级</summary>
        </member>
        <member name="P:XCode.Statistics.IStat.Time">
            <summary>时间</summary>
        </member>
        <member name="P:XCode.Statistics.IStat.CreateTime">
            <summary>创建时间</summary>
        </member>
        <member name="P:XCode.Statistics.IStat.UpdateTime">
            <summary>更新时间</summary>
        </member>
        <member name="T:XCode.Statistics.StatHelper">
            <summary>统计助手类</summary>
        </member>
        <member name="M:XCode.Statistics.StatHelper.GetOrAdd``2(``1,System.Func{``1,System.Boolean,``0},System.Action{``0})">
            <summary>获取 或 新增 统计对象</summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TModel"></typeparam>
            <param name="model"></param>
            <param name="find"></param>
            <param name="onCreate"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.Statistics.StatLevels">
            <summary>统计层级</summary>
        </member>
        <member name="F:XCode.Statistics.StatLevels.All">
            <summary>全局</summary>
        </member>
        <member name="F:XCode.Statistics.StatLevels.Year">
            <summary>年</summary>
        </member>
        <member name="F:XCode.Statistics.StatLevels.Month">
            <summary>月</summary>
        </member>
        <member name="F:XCode.Statistics.StatLevels.Day">
            <summary>日</summary>
        </member>
        <member name="F:XCode.Statistics.StatLevels.Hour">
            <summary>小时</summary>
        </member>
        <member name="F:XCode.Statistics.StatLevels.Minute">
            <summary>分钟</summary>
        </member>
        <member name="F:XCode.Statistics.StatLevels.Quarter">
            <summary>季度</summary>
        </member>
        <member name="T:XCode.Statistics.StatModel`1">
            <summary>统计模型</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XCode.Statistics.StatModel`1.Copy(`0)">
            <summary>拷贝</summary>
            <param name="model"></param>
        </member>
        <member name="M:XCode.Statistics.StatModel`1.Clone">
            <summary>克隆到目标类型</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Statistics.StatModel`1.Split(XCode.Statistics.StatLevels[])">
            <summary>分割为多个层级</summary>
            <param name="levels"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.Statistics.StatModel">
            <summary>统计模型</summary>
        </member>
        <member name="P:XCode.Statistics.StatModel.Time">
            <summary>时间</summary>
        </member>
        <member name="P:XCode.Statistics.StatModel.Level">
            <summary>层级</summary>
        </member>
        <member name="M:XCode.Statistics.StatModel.#ctor">
            <summary>实例化</summary>
        </member>
        <member name="M:XCode.Statistics.StatModel.GetDate(XCode.Statistics.StatLevels)">
            <summary>获取不同层级的时间。选择层级区间的开头</summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Statistics.StatModel.ToString">
            <summary>数据库时间转显示字符串</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Statistics.StatModel.Fill(System.Collections.Generic.IDictionary{System.String,System.String},XCode.Statistics.StatLevels)">
            <summary>使用参数填充</summary>
            <param name="ps">请求参数</param>
            <param name="defLevel">默认级别</param>
        </member>
        <member name="M:XCode.Statistics.StatModel.Equals(System.Object)">
            <summary>相等</summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Statistics.StatModel.GetHashCode">
            <summary>获取哈希</summary>
            <returns></returns>
        </member>
        <member name="T:XCode.TDengine.TDengineCommand">
            <summary>命令</summary>
        </member>
        <member name="P:XCode.TDengine.TDengineCommand.CommandType">
            <summary>命令类型</summary>
        </member>
        <member name="P:XCode.TDengine.TDengineCommand.CommandText">
            <summary>命令文本</summary>
        </member>
        <member name="P:XCode.TDengine.TDengineCommand.CommandTimeout">
            <summary>命令超时</summary>
        </member>
        <member name="P:XCode.TDengine.TDengineCommand.DbConnection">
            <summary>数据库连接</summary>
        </member>
        <member name="P:XCode.TDengine.TDengineCommand.DbTransaction">
            <summary>数据库事务</summary>
        </member>
        <member name="P:XCode.TDengine.TDengineCommand.DbParameterCollection">
            <summary>参数集合</summary>
        </member>
        <member name="P:XCode.TDengine.TDengineCommand.DesignTimeVisible">
            <summary>设计时可见</summary>
        </member>
        <member name="P:XCode.TDengine.TDengineCommand.UpdatedRowSource">
            <summary>更新行来源</summary>
        </member>
        <member name="M:XCode.TDengine.TDengineCommand.CreateDbParameter">
            <summary>创建参数</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.TDengine.TDengineCommand.Prepare">
            <summary>准备执行命令</summary>
        </member>
        <member name="M:XCode.TDengine.TDengineCommand.ExecuteDbDataReader(System.Data.CommandBehavior)">
            <summary>执行查询</summary>
            <param name="behavior"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.TDengine.TDengineCommand.ExecuteNonQuery">
            <summary>执行命令</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.TDengine.TDengineCommand.ExecuteScalar">
            <summary>执行查询</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.TDengine.TDengineCommand.Cancel">
            <summary>取消</summary>
        </member>
        <member name="T:XCode.TDengine.TDengineConnection">
            <summary>数据库连接</summary>
        </member>
        <member name="P:XCode.TDengine.TDengineConnection.ConnectionString">
            <summary>连接字符串</summary>
        </member>
        <member name="P:XCode.TDengine.TDengineConnection.ServerVersion">
            <summary>服务器版本</summary>
        </member>
        <member name="P:XCode.TDengine.TDengineConnection.State">
            <summary>状态</summary>
        </member>
        <member name="P:XCode.TDengine.TDengineConnection.DbProviderFactory">
            <summary>数据提供者工厂</summary>
        </member>
        <member name="P:XCode.TDengine.TDengineConnection.Transaction">
            <summary>事务</summary>
        </member>
        <member name="P:XCode.TDengine.TDengineConnection.Database">
            <summary>数据库</summary>
        </member>
        <member name="P:XCode.TDengine.TDengineConnection.DataSource">
            <summary>数据源</summary>
        </member>
        <member name="M:XCode.TDengine.TDengineConnection.Dispose(System.Boolean)">
            <summary>销毁</summary>
            <param name="disposing"></param>
        </member>
        <member name="M:XCode.TDengine.TDengineConnection.Open">
            <summary>打开连接</summary>
        </member>
        <member name="M:XCode.TDengine.TDengineConnection.Close">
            <summary>关闭连接</summary>
        </member>
        <member name="M:XCode.TDengine.TDengineConnection.Execute(System.String)">
            <summary>执行</summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.TDengine.TDengineConnection.CreateDbCommand">
            <summary>创建命令</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.TDengine.TDengineConnection.BeginDbTransaction(System.Data.IsolationLevel)">
            <summary>开始事务</summary>
            <param name="isolationLevel"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.TDengine.TDengineConnection.ChangeDatabase(System.String)">
            <summary>改变数据库</summary>
            <param name="databaseName"></param>
        </member>
        <member name="T:XCode.TDengine.TDengineDataReader">
            <summary>数据读取器</summary>
        </member>
        <member name="P:XCode.TDengine.TDengineDataReader.Depth">
            <summary>深度</summary>
        </member>
        <member name="P:XCode.TDengine.TDengineDataReader.FieldCount">
            <summary>字段数</summary>
        </member>
        <member name="P:XCode.TDengine.TDengineDataReader.HasRows">
            <summary>是否有数据行</summary>
        </member>
        <member name="P:XCode.TDengine.TDengineDataReader.IsClosed">
            <summary>是否已关闭</summary>
        </member>
        <member name="P:XCode.TDengine.TDengineDataReader.RecordsAffected">
            <summary>影响行数</summary>
        </member>
        <member name="P:XCode.TDengine.TDengineDataReader.Item(System.String)">
            <summary>名称读取</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.TDengine.TDengineDataReader.Item(System.Int32)">
            <summary>序号读取</summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.TDengine.TDengineDataReader.Dispose(System.Boolean)">
            <summary>销毁</summary>
            <param name="disposing"></param>
        </member>
        <member name="M:XCode.TDengine.TDengineDataReader.Read">
            <summary>读取</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.TDengine.TDengineDataReader.NextResult">
            <summary>下一个结果集</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.TDengine.TDengineDataReader.Close">
            <summary>关闭读取器</summary>
        </member>
        <member name="M:XCode.TDengine.TDengineDataReader.GetName(System.Int32)">
            <summary>获取字段名</summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.TDengine.TDengineDataReader.GetOrdinal(System.String)">
            <summary>获取序号</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.TDengine.TDengineDataReader.GetDataTypeName(System.Int32)">
            <summary>获取类型名</summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.TDengine.TDengineDataReader.GetFieldType(System.Int32)">
            <summary>获取字段类型</summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.TDengine.TDengineDataReader.IsDBNull(System.Int32)">
            <summary>是否空类型</summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.TDengine.TDengineDataReader.GetFieldValue``1(System.Int32)">
            <summary>获取字段值</summary>
            <typeparam name="T"></typeparam>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.TDengine.TDengineDataReader.GetEnumerator">
            <summary>迭代</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.TDengine.TDengineDataReader.GetValue(System.Int32)">
            <summary>获取数值</summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.TDengine.TDengineDataReader.GetValues(System.Object[])">
            <summary>获取数值</summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.TDengine.TDengineDataReader.GetSchemaTable">
            <summary>获取架构表</summary>
            <returns></returns>
        </member>
        <member name="T:XCode.TDengine.TDengineFactory">
            <summary>TDengine工厂</summary>
            <remarks>
            参考SQLite驱动建立架构
            </remarks>
        </member>
        <member name="F:XCode.TDengine.TDengineFactory.Instance">
            <summary>实例</summary>
        </member>
        <member name="M:XCode.TDengine.TDengineFactory.CreateCommand">
            <summary>创建命令</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.TDengine.TDengineFactory.CreateConnection">
            <summary>创建连接</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.TDengine.TDengineFactory.CreateConnectionStringBuilder">
            <summary>创建连接字符串生成器</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.TDengine.TDengineFactory.CreateParameter">
            <summary>创建参数</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.TDengine.TDengineFactory.CreateDataAdapter">
            <summary>创建数据适配器</summary>
            <returns></returns>
        </member>
        <member name="T:XCode.TDengine.TDengineParameter">
            <summary>参数</summary>
        </member>
        <member name="P:XCode.TDengine.TDengineParameter.DbType">
            <summary>类型</summary>
        </member>
        <member name="P:XCode.TDengine.TDengineParameter.Direction">
            <summary>方向</summary>
        </member>
        <member name="P:XCode.TDengine.TDengineParameter.IsNullable">
            <summary>允许空</summary>
        </member>
        <member name="P:XCode.TDengine.TDengineParameter.ParameterName">
            <summary>参数名</summary>
        </member>
        <member name="P:XCode.TDengine.TDengineParameter.Value">
            <summary>参数值</summary>
        </member>
        <member name="P:XCode.TDengine.TDengineParameter.Size">
            <summary>大小</summary>
        </member>
        <member name="P:XCode.TDengine.TDengineParameter.SourceColumn">
            <summary>源列</summary>
        </member>
        <member name="P:XCode.TDengine.TDengineParameter.SourceColumnNullMapping">
            <summary>源列空映射</summary>
        </member>
        <member name="P:XCode.TDengine.TDengineParameter.SourceVersion">
            <summary>源版本</summary>
        </member>
        <member name="M:XCode.TDengine.TDengineParameter.ResetDbType">
            <summary>重置</summary>
        </member>
        <member name="T:XCode.TDengine.TDengineParameterCollection">
            <summary>参数集合</summary>
        </member>
        <member name="M:XCode.TDengine.TDengineParameterCollection.#ctor">
            <summary>实例化</summary>
        </member>
        <member name="P:XCode.TDengine.TDengineParameterCollection.Count">
            <summary>个数</summary>
        </member>
        <member name="P:XCode.TDengine.TDengineParameterCollection.SyncRoot">
            <summary>同步根</summary>
        </member>
        <member name="P:XCode.TDengine.TDengineParameterCollection.IsFixedSize">
            <summary>固定大小</summary>
        </member>
        <member name="P:XCode.TDengine.TDengineParameterCollection.IsReadOnly">
            <summary>只读</summary>
        </member>
        <member name="P:XCode.TDengine.TDengineParameterCollection.IsSynchronized">
            <summary>同步</summary>
        </member>
        <member name="M:XCode.TDengine.TDengineParameterCollection.Add(System.Object)">
            <summary>添加参数</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.TDengine.TDengineParameterCollection.AddRange(System.Array)">
            <summary>添加参数</summary>
            <param name="values"></param>
        </member>
        <member name="M:XCode.TDengine.TDengineParameterCollection.Clear">
            <summary>清空</summary>
        </member>
        <member name="M:XCode.TDengine.TDengineParameterCollection.Contains(System.Object)">
            <summary>是否包含</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.TDengine.TDengineParameterCollection.Contains(System.String)">
            <summary>是否包含</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.TDengine.TDengineParameterCollection.CopyTo(System.Array,System.Int32)">
            <summary>拷贝</summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:XCode.TDengine.TDengineParameterCollection.GetEnumerator">
            <summary>迭代</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.TDengine.TDengineParameterCollection.GetParameter(System.Int32)">
            <summary>获取参数</summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.TDengine.TDengineParameterCollection.GetParameter(System.String)">
            <summary>获取参数</summary>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.TDengine.TDengineParameterCollection.IndexOf(System.Object)">
            <summary>查找</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.TDengine.TDengineParameterCollection.IndexOf(System.String)">
            <summary>查找</summary>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.TDengine.TDengineParameterCollection.Insert(System.Int32,System.Object)">
            <summary>插入</summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:XCode.TDengine.TDengineParameterCollection.Remove(System.Object)">
            <summary>删除</summary>
            <param name="value"></param>
        </member>
        <member name="M:XCode.TDengine.TDengineParameterCollection.RemoveAt(System.Int32)">
            <summary>删除</summary>
            <param name="index"></param>
        </member>
        <member name="M:XCode.TDengine.TDengineParameterCollection.RemoveAt(System.String)">
            <summary>删除</summary>
            <param name="parameterName"></param>
        </member>
        <member name="M:XCode.TDengine.TDengineParameterCollection.SetParameter(System.Int32,System.Data.Common.DbParameter)">
            <summary>设置</summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:XCode.TDengine.TDengineParameterCollection.SetParameter(System.String,System.Data.Common.DbParameter)">
            <summary>设置</summary>
            <param name="parameterName"></param>
            <param name="value"></param>
        </member>
        <member name="T:XCode.TDengine.TDengineTransaction">
            <summary>事务</summary>
        </member>
        <member name="M:XCode.TDengine.TDengineTransaction.Dispose(System.Boolean)">
            <summary>销毁</summary>
            <param name="disposing"></param>
        </member>
        <member name="P:XCode.TDengine.TDengineTransaction.DbConnection">
            <summary>数据库连接</summary>
        </member>
        <member name="P:XCode.TDengine.TDengineTransaction.IsolationLevel">
            <summary>等级</summary>
        </member>
        <member name="M:XCode.TDengine.TDengineTransaction.Begin">
            <summary>开始事务</summary>
        </member>
        <member name="M:XCode.TDengine.TDengineTransaction.Commit">
            <summary>提交事务</summary>
        </member>
        <member name="M:XCode.TDengine.TDengineTransaction.Rollback">
            <summary>回滚事务</summary>
        </member>
        <member name="T:XCode.Transform.DataContext">
            <summary>数据上下文</summary>
        </member>
        <member name="P:XCode.Transform.DataContext.Setting">
            <summary>抽取设置</summary>
        </member>
        <member name="P:XCode.Transform.DataContext.Data">
            <summary>实体列表</summary>
        </member>
        <member name="P:XCode.Transform.DataContext.FetchCost">
            <summary>抽取耗时，毫秒</summary>
        </member>
        <member name="P:XCode.Transform.DataContext.Success">
            <summary>成功处理数</summary>
        </member>
        <member name="P:XCode.Transform.DataContext.ProcessCost">
            <summary>处理耗时</summary>
        </member>
        <member name="P:XCode.Transform.DataContext.Entity">
            <summary>实体对象</summary>
        </member>
        <member name="P:XCode.Transform.DataContext.Error">
            <summary>处理异常</summary>
        </member>
        <member name="P:XCode.Transform.DataContext.StartTime">
            <summary>开始时间</summary>
        </member>
        <member name="P:XCode.Transform.DataContext.Item(System.String)">
            <summary>用户数据</summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.Transform.DataContext.FetchSpeed">
            <summary>抽取速度</summary>
        </member>
        <member name="P:XCode.Transform.DataContext.ProcessSpeed">
            <summary>处理速度</summary>
        </member>
        <member name="T:XCode.Transform.EntityIdExtracter">
            <summary>自增数据抽取器</summary>
            <remarks>
            适用于带有自增字段或雪花Id字段的数据抽取器，速度飞快。
            </remarks>
        </member>
        <member name="P:XCode.Transform.EntityIdExtracter.Factory">
            <summary>实体工厂</summary>
        </member>
        <member name="P:XCode.Transform.EntityIdExtracter.IdField">
            <summary>Id字段</summary>
        </member>
        <member name="P:XCode.Transform.EntityIdExtracter.Row">
            <summary>开始行。默认0</summary>
        </member>
        <member name="P:XCode.Transform.EntityIdExtracter.BatchSize">
            <summary>批大小。默认5000</summary>
        </member>
        <member name="M:XCode.Transform.EntityIdExtracter.#ctor(XCode.IEntityFactory,XCode.Configuration.FieldItem)">
            <summary>实例化数据抽取器</summary>
            <param name="factory"></param>
            <param name="idField"></param>
        </member>
        <member name="M:XCode.Transform.EntityIdExtracter.Fetch">
            <summary>迭代抽取数据</summary>
            <returns></returns>
        </member>
        <member name="T:XCode.Transform.IExtractSetting">
            <summary>数据抽取参数</summary>
        </member>
        <member name="P:XCode.Transform.IExtractSetting.Start">
            <summary>开始。大于等于</summary>
        </member>
        <member name="P:XCode.Transform.IExtractSetting.End">
            <summary>结束。小于</summary>
        </member>
        <member name="P:XCode.Transform.IExtractSetting.Offset">
            <summary>时间偏移。距离实时时间的秒数，部分业务不能跑到实时</summary>
        </member>
        <member name="P:XCode.Transform.IExtractSetting.Row">
            <summary>开始行。分页</summary>
        </member>
        <member name="P:XCode.Transform.IExtractSetting.Step">
            <summary>步进。最大区间大小，秒</summary>
        </member>
        <member name="P:XCode.Transform.IExtractSetting.BatchSize">
            <summary>批大小</summary>
        </member>
        <member name="T:XCode.Transform.ExtractSetting">
            <summary>数据抽取参数</summary>
        </member>
        <member name="P:XCode.Transform.ExtractSetting.Start">
            <summary>开始。大于等于</summary>
        </member>
        <member name="P:XCode.Transform.ExtractSetting.End">
            <summary>结束。小于</summary>
        </member>
        <member name="P:XCode.Transform.ExtractSetting.Offset">
            <summary>时间偏移。距离实时时间的秒数，部分业务不能跑到实时</summary>
        </member>
        <member name="P:XCode.Transform.ExtractSetting.Row">
            <summary>开始行。分页</summary>
        </member>
        <member name="P:XCode.Transform.ExtractSetting.Step">
            <summary>步进。最大区间大小，秒</summary>
        </member>
        <member name="P:XCode.Transform.ExtractSetting.BatchSize">
            <summary>批大小</summary>
        </member>
        <member name="M:XCode.Transform.ExtractSetting.#ctor">
            <summary>实例化</summary>
        </member>
        <member name="M:XCode.Transform.ExtractSetting.#ctor(XCode.Transform.IExtractSetting)">
            <summary>实例化</summary>
            <param name="set"></param>
        </member>
        <member name="T:XCode.Transform.ExtractSettingHelper">
            <summary>抽取参数帮助类</summary>
        </member>
        <member name="M:XCode.Transform.ExtractSettingHelper.Copy(XCode.Transform.IExtractSetting,XCode.Transform.IExtractSetting)">
            <summary>拷贝设置参数</summary>
            <param name="src"></param>
            <param name="set"></param>
        </member>
        <member name="M:XCode.Transform.ExtractSettingHelper.Clone(XCode.Transform.IExtractSetting)">
            <summary>克隆一份设置参数</summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.Transform.IdExtracter">
            <summary>整型主键数据抽取器</summary>
            <remarks>
            适用于带有自增字段或雪花Id字段的数据抽取器，速度飞快。
            </remarks>
        </member>
        <member name="P:XCode.Transform.IdExtracter.Dal">
            <summary>数据层</summary>
        </member>
        <member name="P:XCode.Transform.IdExtracter.Builder">
            <summary>查询表达式</summary>
        </member>
        <member name="P:XCode.Transform.IdExtracter.Field">
            <summary>Id字段</summary>
        </member>
        <member name="P:XCode.Transform.IdExtracter.Row">
            <summary>开始行。默认0</summary>
        </member>
        <member name="P:XCode.Transform.IdExtracter.BatchSize">
            <summary>批大小。默认5000</summary>
        </member>
        <member name="P:XCode.Transform.IdExtracter.TotalCount">
            <summary>总行数</summary>
        </member>
        <member name="M:XCode.Transform.IdExtracter.#ctor">
            <summary>实例化自增抽取器</summary>
        </member>
        <member name="M:XCode.Transform.IdExtracter.#ctor(XCode.DataAccessLayer.DAL,System.String,XCode.DataAccessLayer.IDataColumn)">
            <summary>实例化自增抽取器</summary>
            <param name="dal"></param>
            <param name="tableName"></param>
            <param name="field"></param>
        </member>
        <member name="M:XCode.Transform.IdExtracter.Fetch">
            <summary>迭代抽取数据</summary>
            <returns></returns>
        </member>
        <member name="T:XCode.Transform.IETLModule">
            <summary>数据抽取模块，用于自定义抽取过程中各个环节</summary>
        </member>
        <member name="M:XCode.Transform.IETLModule.Start">
            <summary>开始调度</summary>
        </member>
        <member name="M:XCode.Transform.IETLModule.Stop">
            <summary>停止调度</summary>
        </member>
        <member name="M:XCode.Transform.IETLModule.Init">
            <summary>首次初始化任务</summary>
        </member>
        <member name="M:XCode.Transform.IETLModule.Processing(XCode.Transform.DataContext)">
            <summary>单批数据处理前</summary>
            <param name="ctx">数据上下文</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Transform.IETLModule.Processed(XCode.Transform.DataContext)">
            <summary>单批数据处理后</summary>
            <param name="ctx">数据上下文</param>
        </member>
        <member name="M:XCode.Transform.IETLModule.Fetched(XCode.Transform.DataContext)">
            <summary>抽取完成</summary>
            <param name="ctx">数据上下文</param>
        </member>
        <member name="M:XCode.Transform.IETLModule.OnFinished(XCode.Transform.DataContext)">
            <summary>实体列表完成后</summary>
            <param name="ctx">数据上下文</param>
        </member>
        <member name="M:XCode.Transform.IETLModule.OnError(XCode.Transform.DataContext)">
            <summary>出错</summary>
            <param name="ctx">数据上下文</param>
        </member>
        <member name="T:XCode.Transform.IETLStat">
            <summary>ETL统计接口</summary>
        </member>
        <member name="P:XCode.Transform.IETLStat.Total">
            <summary>总数</summary>
        </member>
        <member name="P:XCode.Transform.IETLStat.Success">
            <summary>成功</summary>
        </member>
        <member name="P:XCode.Transform.IETLStat.Changes">
            <summary>改变数</summary>
        </member>
        <member name="P:XCode.Transform.IETLStat.Times">
            <summary>次数</summary>
        </member>
        <member name="P:XCode.Transform.IETLStat.Error">
            <summary>错误</summary>
        </member>
        <member name="P:XCode.Transform.IETLStat.Message">
            <summary>错误内容</summary>
        </member>
        <member name="T:XCode.Transform.ETLStat">
            <summary>ETL统计</summary>
        </member>
        <member name="P:XCode.Transform.ETLStat.Total">
            <summary>总数</summary>
        </member>
        <member name="P:XCode.Transform.ETLStat.Success">
            <summary>成功</summary>
        </member>
        <member name="P:XCode.Transform.ETLStat.Changes">
            <summary>改变数</summary>
        </member>
        <member name="P:XCode.Transform.ETLStat.Times">
            <summary>次数</summary>
        </member>
        <member name="P:XCode.Transform.ETLStat.Error">
            <summary>错误</summary>
        </member>
        <member name="P:XCode.Transform.ETLStat.Message">
            <summary>错误内容</summary>
        </member>
        <member name="T:XCode.Transform.IExtracter`1">
            <summary>数据抽取接口</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:XCode.Transform.IExtracter`1.Row">
            <summary>开始行。分页时表示偏移行数，自增时表示下一个编号，默认0</summary>
        </member>
        <member name="M:XCode.Transform.IExtracter`1.Fetch">
            <summary>迭代抽取数据</summary>
            <returns></returns>
        </member>
        <member name="T:XCode.Transform.ExtracterBase">
            <summary>抽取器基类</summary>
        </member>
        <member name="P:XCode.Transform.ExtracterBase.Name">
            <summary>名称</summary>
        </member>
        <member name="P:XCode.Transform.ExtracterBase.Factory">
            <summary>实体工厂</summary>
        </member>
        <member name="P:XCode.Transform.ExtracterBase.FieldName">
            <summary>获取 或 设置 时间字段</summary>
        </member>
        <member name="P:XCode.Transform.ExtracterBase.Where">
            <summary>附加条件</summary>
        </member>
        <member name="P:XCode.Transform.ExtracterBase.Field">
            <summary>时间字段</summary>
        </member>
        <member name="P:XCode.Transform.ExtracterBase.OrderBy">
            <summary>排序</summary>
        </member>
        <member name="P:XCode.Transform.ExtracterBase.Selects">
            <summary>选择列</summary>
        </member>
        <member name="M:XCode.Transform.ExtracterBase.#ctor">
            <summary>实例化时基抽取算法</summary>
        </member>
        <member name="M:XCode.Transform.ExtracterBase.Init">
            <summary>初始化</summary>
        </member>
        <member name="P:XCode.Transform.ExtracterBase.Log">
            <summary>日志</summary>
        </member>
        <member name="M:XCode.Transform.ExtracterBase.WriteLog(System.String,System.Object[])">
            <summary>写日志</summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="T:XCode.Transform.PagingExtracter">
            <summary>分页数据抽取器</summary>
            <remarks>
            通用抽取器，既没有Id序列也没有时间戳时使用。
            采用分页技术抽取，通用性很强，但是随着页数增加，速度也会下降。
            </remarks>
        </member>
        <member name="P:XCode.Transform.PagingExtracter.Dal">
            <summary>数据层</summary>
        </member>
        <member name="P:XCode.Transform.PagingExtracter.Builder">
            <summary>查询表达式</summary>
        </member>
        <member name="P:XCode.Transform.PagingExtracter.Row">
            <summary>开始行。默认0</summary>
        </member>
        <member name="P:XCode.Transform.PagingExtracter.BatchSize">
            <summary>批大小。默认5000</summary>
        </member>
        <member name="M:XCode.Transform.PagingExtracter.#ctor">
            <summary>实例化分页抽取器</summary>
        </member>
        <member name="M:XCode.Transform.PagingExtracter.#ctor(XCode.DataAccessLayer.DAL,System.String)">
            <summary>实例化分页抽取器</summary>
            <param name="dal"></param>
            <param name="tableName"></param>
        </member>
        <member name="M:XCode.Transform.PagingExtracter.#ctor(XCode.DataAccessLayer.DAL,System.String,System.String)">
            <summary>实例化分页抽取器</summary>
            <param name="dal"></param>
            <param name="tableName"></param>
            <param name="orderBy"></param>
        </member>
        <member name="M:XCode.Transform.PagingExtracter.Fetch">
            <summary>迭代抽取数据</summary>
            <returns></returns>
        </member>
        <member name="T:XCode.Transform.TimeExtracter">
            <summary>时间索引数据抽取器</summary>
            <remarks>
            适用于带有时间索引字段的数据抽取器，速度飞快。
            </remarks>
        </member>
        <member name="P:XCode.Transform.TimeExtracter.Dal">
            <summary>数据层</summary>
        </member>
        <member name="P:XCode.Transform.TimeExtracter.Builder">
            <summary>查询表达式</summary>
        </member>
        <member name="P:XCode.Transform.TimeExtracter.Field">
            <summary>时间字段</summary>
        </member>
        <member name="P:XCode.Transform.TimeExtracter.Row">
            <summary>开始行。分页时表示偏移行数，自增时表示下一个编号，默认0</summary>
        </member>
        <member name="P:XCode.Transform.TimeExtracter.StartTime">
            <summary>开始抽取时间</summary>
        </member>
        <member name="P:XCode.Transform.TimeExtracter.BatchSize">
            <summary>批大小。默认5000</summary>
        </member>
        <member name="P:XCode.Transform.TimeExtracter.TotalCount">
            <summary>总行数</summary>
        </member>
        <member name="M:XCode.Transform.TimeExtracter.#ctor">
            <summary>实例化自增抽取器</summary>
        </member>
        <member name="M:XCode.Transform.TimeExtracter.#ctor(XCode.DataAccessLayer.DAL,System.String,XCode.DataAccessLayer.IDataColumn)">
            <summary>实例化自增抽取器</summary>
            <param name="dal"></param>
            <param name="tableName"></param>
            <param name="field"></param>
        </member>
        <member name="M:XCode.Transform.TimeExtracter.Fetch">
            <summary>迭代抽取数据</summary>
            <returns></returns>
        </member>
        <member name="T:XCode.EntityTree`1">
            <summary>主键为整型的实体树基类</summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:XCode.EntityTree`2">
            <summary>实体树基类，具有树形结构的实体继承该类即可得到各种树操作功能</summary>
            <remarks>
            实体树很神奇，子类可以通过KeyName、ParentKeyName、SortingKeyName、NameKeyName等设置型属性，
            指定关联键、关联父键、排序键、名称键，其中前两个是必须的，它们是构造一棵树的根基！
            
            整个表会形成一颗实体树，同时也是一个实体列表，子级紧靠父级，同级排序，<see cref="P:XCode.EntityTree`2.Root"/>就是这棵树的根。
            所以，Root.Childs可以得到顶级节点集合，Root.AllChilds得到整棵树。
            </remarks>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="F:XCode.EntityTree`2.Setting">
            <summary>实体树操作者</summary>
        </member>
        <member name="P:XCode.EntityTree`2.Sort">
            <summary>排序值</summary>
        </member>
        <member name="P:XCode.EntityTree`2.Childs">
            <summary>子节点</summary>
        </member>
        <member name="M:XCode.EntityTree`2.FindChilds">
            <summary>子节点</summary>
        </member>
        <member name="P:XCode.EntityTree`2.Parent">
            <summary>父节点</summary>
        </member>
        <member name="M:XCode.EntityTree`2.FindParent">
            <summary>父节点</summary>
        </member>
        <member name="M:XCode.EntityTree`2.FindByKeyWithCache(`0)">
            <summary>在缓存中查找节点</summary>
        </member>
        <member name="P:XCode.EntityTree`2.AllChilds">
            <summary>子孙节点</summary>
        </member>
        <member name="P:XCode.EntityTree`2.MyAllChilds">
            <summary>子孙节点，包含自己</summary>
        </member>
        <member name="P:XCode.EntityTree`2.AllParents">
            <summary>父节点集合</summary>
        </member>
        <member name="P:XCode.EntityTree`2.Deepth">
            <summary>深度</summary>
        </member>
        <member name="P:XCode.EntityTree`2.Root">
            <summary>根</summary>
        </member>
        <member name="P:XCode.EntityTree`2.NodeName">
            <summary>节点名</summary>
        </member>
        <member name="P:XCode.EntityTree`2.ParentNodeName">
            <summary>父级节点名</summary>
        </member>
        <member name="P:XCode.EntityTree`2.TreeNodeName">
            <summary>树形节点名，根据深度带全角空格前缀</summary>
        </member>
        <member name="P:XCode.EntityTree`2.TreeNodeName2">
            <summary>树形节点名，根据深度带全角空格前缀</summary>
        </member>
        <member name="P:XCode.EntityTree`2.TreeNodeText">
            <summary>树形节点名，根据深度带全角空格前缀</summary>
        </member>
        <member name="P:XCode.EntityTree`2.FullPath">
            <summary>斜杠分隔的全路径</summary>
        </member>
        <member name="P:XCode.EntityTree`2.FullParentPath">
            <summary>斜杠分隔的全父路径</summary>
        </member>
        <member name="M:XCode.EntityTree`2.FindAllByParent(`0)">
            <summary>根据父级查找所有子级，带排序功能，先排序字段再主键</summary>
            <remarks>如果是顶级，那么包含所有无头节点，无头节点由错误数据造成</remarks>
            <param name="parentKey"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityTree`2.FindAllNoParent">
            <summary>查找所有无头节点（没有父节点的节点）集合（其实就是父节点已经被删掉了的非法节点）</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityTree`2.FindAllChildsByParent(`0)">
            <summary>查找指定键的所有子节点，以深度层次树结构输出，包括当前节点作为根节点。空父节点返回顶级列表，无效父节点返回空列表</summary>
            <param name="parentKey"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityTree`2.FindAllChildsNoParent(`0)">
            <summary>查找指定键的所有子节点，以深度层次树结构输出。空父节点返回顶级列表，无效父节点返回空列表</summary>
            <param name="parentKey"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityTree`2.FindAllChildsExcept(XCode.IEntityTree)">
            <summary>获取完整树，包含根节点，排除指定分支。多用于树节点父级选择</summary>
            <param name="exclude"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityTree`2.FindAllParentsByKey(`0)">
            <summary>查找指定键的所有父节点，从高到底以深度层次树结构输出</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityTree`2.FindAllChilds(XCode.IEntityTree,System.Boolean,XCode.IEntityTree)">
            <summary>查找指定节点的所有子节点，以深度层次树结构输出</summary>
            <param name="entity">根节点</param>
            <param name="includeSelf">返回列表是否包含根节点，默认false</param>
            <param name="exclude">要排除的节点</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityTree`2.FindAllParents(XCode.IEntityTree,System.Boolean)">
            <summary>查找指定节点的所有父节点，从高到底以深度层次树结构输出</summary>
            <param name="entity"></param>
            <param name="includeSelf">返回列表是否包含根节点，默认false</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityTree`2.FindByPath(System.String,System.String[])">
            <summary>根据层次路径查找</summary>
            <param name="path">层次路径</param>
            <param name="keys">用于在每一层匹配实体的键值，默认是NameKeyName</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityTree`2.Contains(`0)">
            <summary>是否包含子节点</summary>
            <param name="key">子节点键值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityTree`2.GetFullPath(System.Boolean,System.String,System.Func{`1,System.String})">
            <summary>取得全路径的实体，由上向下排序</summary>
            <param name="includeSelf">是否包含自己</param>
            <param name="separator">分隔符</param>
            <param name="func">回调</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityTree`2.ClearRelation">
            <summary>删除子级到本级的关系。导出数据前可以先删除关系，以减少导出的大小</summary>
        </member>
        <member name="M:XCode.EntityTree`2.Up">
            <summary>排序上升</summary>
        </member>
        <member name="M:XCode.EntityTree`2.Down">
            <summary>排序下降</summary>
        </member>
        <member name="M:XCode.EntityTree`2.Valid(XCode.DataMethod)">
            <summary>验证并修补数据，返回验证结果，或者通过抛出异常的方式提示验证失败。</summary>
            <param name="method">添删改方法</param>
        </member>
        <member name="P:XCode.EntityTree`2.XCode#IEntityTree#Parent">
            <summary>父实体</summary>
        </member>
        <member name="P:XCode.EntityTree`2.XCode#IEntityTree#Childs">
            <summary>子实体集合</summary>
        </member>
        <member name="P:XCode.EntityTree`2.XCode#IEntityTree#AllChilds">
            <summary>子孙实体集合。以深度层次树结构输出</summary>
        </member>
        <member name="P:XCode.EntityTree`2.XCode#IEntityTree#AllParents">
            <summary>父亲实体集合。以深度层次树结构输出</summary>
        </member>
        <member name="M:XCode.EntityTree`2.XCode#IEntityTree#FindAllChildsExcept(XCode.IEntityTree)">
            <summary>获取完整树，包含根节点，排除指定分支。多用于树节点父级选择</summary>
            <param name="exclude"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.IEntityTree">
            <summary>实体树接口</summary>
        </member>
        <member name="P:XCode.IEntityTree.Parent">
            <summary>父实体</summary>
        </member>
        <member name="P:XCode.IEntityTree.Childs">
            <summary>子实体集合</summary>
        </member>
        <member name="P:XCode.IEntityTree.AllChilds">
            <summary>子孙实体集合。以深度层次树结构输出</summary>
        </member>
        <member name="P:XCode.IEntityTree.AllParents">
            <summary>父亲实体集合。以深度层次树结构输出</summary>
        </member>
        <member name="P:XCode.IEntityTree.Deepth">
            <summary>深度</summary>
        </member>
        <member name="P:XCode.IEntityTree.TreeNodeText">
            <summary>树形节点名，根据深度带全角空格前缀</summary>
        </member>
        <member name="M:XCode.IEntityTree.FindAllChildsExcept(XCode.IEntityTree)">
            <summary>获取完整树，包含根节点，排除指定分支。多用于树节点父级选择</summary>
            <param name="exclude"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.IEntityTreeSetting">
            <summary>实体树设置</summary>
        </member>
        <member name="P:XCode.IEntityTreeSetting.Key">
            <summary>关联键名称，一般是主键，如ID</summary>
        </member>
        <member name="P:XCode.IEntityTreeSetting.Parent">
            <summary>关联父键名，一般是Parent加主键，如ParentID</summary>
        </member>
        <member name="P:XCode.IEntityTreeSetting.Sort">
            <summary>排序字段，默认是"Sorting", "Sort", "Rank"之一</summary>
        </member>
        <member name="P:XCode.IEntityTreeSetting.Name">
            <summary>名称键名，如Name，否则使用第一个非自增字段</summary>
            <remarks>影响NodeName、TreeNodeName、TreeNodeName2、FindByPath、GetFullPath、GetFullPath2等</remarks>
        </member>
        <member name="P:XCode.IEntityTreeSetting.Text">
            <summary>文本键名</summary>
        </member>
        <member name="P:XCode.IEntityTreeSetting.BigSort">
            <summary>是否大排序，较大排序值在前面</summary>
        </member>
        <member name="P:XCode.IEntityTreeSetting.MaxDeepth">
            <summary>允许的最大深度。默认0，不限制</summary>
        </member>
        <member name="T:XCode.EntityTreeSetting`1">
            <summary>实体树设置</summary>
        </member>
        <member name="P:XCode.EntityTreeSetting`1.Factory">
            <summary>实体操作者</summary>
        </member>
        <member name="P:XCode.EntityTreeSetting`1.Key">
            <summary>关联键名称，一般是主键，如ID</summary>
        </member>
        <member name="P:XCode.EntityTreeSetting`1.Parent">
            <summary>关联父键名，一般是Parent加主键，如ParentID</summary>
        </member>
        <member name="P:XCode.EntityTreeSetting`1.Sort">
            <summary>排序字段，默认是"Sorting", "Sort", "Rank"之一</summary>
        </member>
        <member name="P:XCode.EntityTreeSetting`1.Name">
            <summary>名称键名，如Name，否则使用第一个非自增字段</summary>
            <remarks>影响NodeName、TreeNodeName、TreeNodeName2、FindByPath、GetFullPath、GetFullPath2等</remarks>
        </member>
        <member name="P:XCode.EntityTreeSetting`1.Text">
            <summary>文本键名</summary>
        </member>
        <member name="P:XCode.EntityTreeSetting`1.BigSort">
            <summary>是否大排序，较大排序值在前面</summary>
        </member>
        <member name="P:XCode.EntityTreeSetting`1.MaxDeepth">
            <summary>允许的最大深度。默认0，不限制</summary>
        </member>
        <member name="T:NewLife.Caching.DbCache">
            <summary>数据库缓存。利用数据表来缓存信息</summary>
            <remarks>
            构建一个操作队列，新增、更新、删除等操作全部排队单线程执行，以改进性能
            </remarks>
        </member>
        <member name="P:NewLife.Caching.DbCache.Factory">
            <summary>实体工厂</summary>
        </member>
        <member name="P:NewLife.Caching.DbCache.KeyField">
            <summary>主键字段</summary>
        </member>
        <member name="P:NewLife.Caching.DbCache.TimeField">
            <summary>时间字段</summary>
        </member>
        <member name="M:NewLife.Caching.DbCache.#ctor(XCode.IEntityFactory,System.String,System.String)">
            <summary>实例化一个数据库缓存</summary>
            <param name="factory"></param>
            <param name="keyName"></param>
            <param name="timeName"></param>
        </member>
        <member name="M:NewLife.Caching.DbCache.Dispose(System.Boolean)">
            <summary>销毁</summary>
            <param name="disposing"></param>
        </member>
        <member name="P:NewLife.Caching.DbCache.Count">
            <summary>缓存个数。高频使用时注意性能</summary>
        </member>
        <member name="P:NewLife.Caching.DbCache.Keys">
            <summary>所有键。实际返回只读列表新实例，数据量较大时注意性能</summary>
        </member>
        <member name="M:NewLife.Caching.DbCache.Init(System.String)">
            <summary>初始化配置</summary>
            <param name="config"></param>
        </member>
        <member name="M:NewLife.Caching.DbCache.ContainsKey(System.String)">
            <summary>是否包含缓存项</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.DbCache.Set``1(System.String,``0,System.Int32)">
            <summary>添加缓存项，已存在时更新</summary>
            <typeparam name="T">值类型</typeparam>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="expire">过期时间，秒。小于0时采用默认缓存时间</param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.DbCache.Get``1(System.String)">
            <summary>获取缓存项，不存在时返回默认值</summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.DbCache.Remove(System.String[])">
            <summary>批量移除缓存项</summary>
            <param name="keys">键集合</param>
            <returns>实际移除个数</returns>
        </member>
        <member name="M:NewLife.Caching.DbCache.Clear">
            <summary>删除所有配置项</summary>
        </member>
        <member name="M:NewLife.Caching.DbCache.SetExpire(System.String,System.TimeSpan)">
            <summary>设置缓存项有效期</summary>
            <param name="key">键</param>
            <param name="expire">过期时间</param>
            <returns>设置是否成功</returns>
        </member>
        <member name="M:NewLife.Caching.DbCache.GetExpire(System.String)">
            <summary>获取缓存项有效期，不存在时返回Zero</summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.DbCache.Add``1(System.String,``0,System.Int32)">
            <summary>添加，已存在时不更新，常用于锁争夺</summary>
            <typeparam name="T">值类型</typeparam>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="expire">过期时间，秒。小于0时采用默认缓存时间</param>
            <returns></returns>
        </member>
        <member name="F:NewLife.Caching.DbCache.clearTimer">
            <summary>清理会话计时器</summary>
        </member>
        <member name="M:NewLife.Caching.DbCache.RemoveNotAlive(System.Object)">
            <summary>移除过期的缓存项</summary>
        </member>
        <member name="M:NewLife.Caching.DbCache.BenchOne(System.Int64,System.Int32,System.Boolean,System.Int32)">
            <summary>使用指定线程测试指定次数</summary>
            <param name="times">次数</param>
            <param name="threads">线程</param>
            <param name="rand">随机读写</param>
            <param name="batch">批量操作</param>
        </member>
        <member name="T:NewLife.Caching.IDbCache">
            <summary>数据缓存接口</summary>
        </member>
        <member name="P:NewLife.Caching.IDbCache.Name">
            <summary>名称</summary>
        </member>
        <member name="P:NewLife.Caching.IDbCache.Value">
            <summary>键值</summary>
        </member>
        <member name="P:NewLife.Caching.IDbCache.CreateTime">
            <summary>创建时间</summary>
        </member>
        <member name="P:NewLife.Caching.IDbCache.ExpiredTime">
            <summary>过期时间</summary>
        </member>
        <member name="M:NewLife.Caching.IDbCache.SaveAsync(System.Int32)">
            <summary>异步保存</summary>
            <param name="msDelay"></param>
            <returns></returns>
        </member>
    </members>
</doc>
